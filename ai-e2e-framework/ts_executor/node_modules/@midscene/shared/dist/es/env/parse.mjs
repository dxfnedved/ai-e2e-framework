import { MIDSCENE_USE_DOUBAO_VISION, MIDSCENE_USE_GEMINI, MIDSCENE_USE_QWEN_VL, MIDSCENE_USE_VLM_UI_TARS, UITarsModelVersion, VL_MODE_RAW_VALID_VALUES } from "./types.mjs";
const parseVlModeAndUiTarsModelVersionFromRawValue = (vlModeRaw)=>{
    if (!vlModeRaw) return {
        vlMode: void 0,
        uiTarsVersion: void 0
    };
    if (!VL_MODE_RAW_VALID_VALUES.includes(vlModeRaw)) throw new Error(`the value ${vlModeRaw} is not a valid VL_MODE value, must be one of ${VL_MODE_RAW_VALID_VALUES}`);
    const raw = vlModeRaw;
    if ('vlm-ui-tars' === raw) return {
        vlMode: 'vlm-ui-tars',
        uiTarsVersion: UITarsModelVersion.V1_0
    };
    if ('vlm-ui-tars-doubao' === raw || 'vlm-ui-tars-doubao-1.5' === raw) return {
        vlMode: 'vlm-ui-tars',
        uiTarsVersion: UITarsModelVersion.DOUBAO_1_5_20B
    };
    return {
        vlMode: raw,
        uiTarsVersion: void 0
    };
};
const parseVlModeAndUiTarsFromGlobalConfig = (provider)=>{
    const isDoubao = provider[MIDSCENE_USE_DOUBAO_VISION];
    const isQwen = provider[MIDSCENE_USE_QWEN_VL];
    const isUiTars = provider[MIDSCENE_USE_VLM_UI_TARS];
    const isGemini = provider[MIDSCENE_USE_GEMINI];
    const enabledModes = [
        isDoubao && MIDSCENE_USE_DOUBAO_VISION,
        isQwen && MIDSCENE_USE_QWEN_VL,
        isUiTars && MIDSCENE_USE_VLM_UI_TARS,
        isGemini && MIDSCENE_USE_GEMINI
    ].filter(Boolean);
    if (enabledModes.length > 1) throw new Error(`Only one vision mode can be enabled at a time. Currently enabled modes: ${enabledModes.join(', ')}. Please disable all but one mode.`);
    if (isQwen) return {
        vlMode: 'qwen-vl',
        uiTarsVersion: void 0
    };
    if (isDoubao) return {
        vlMode: 'doubao-vision',
        uiTarsVersion: void 0
    };
    if (isGemini) return {
        vlMode: 'gemini',
        uiTarsVersion: void 0
    };
    if (isUiTars) if ('1' === isUiTars) return {
        vlMode: 'vlm-ui-tars',
        uiTarsVersion: UITarsModelVersion.V1_0
    };
    else if ('DOUBAO' === isUiTars || 'DOUBAO-1.5' === isUiTars) return {
        vlMode: 'vlm-ui-tars',
        uiTarsVersion: UITarsModelVersion.DOUBAO_1_5_20B
    };
    else return {
        vlMode: 'vlm-ui-tars',
        uiTarsVersion: `${isUiTars}`
    };
    return {
        vlMode: void 0,
        uiTarsVersion: void 0
    };
};
export { parseVlModeAndUiTarsFromGlobalConfig, parseVlModeAndUiTarsModelVersionFromRawValue };
