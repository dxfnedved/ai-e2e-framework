import { PLAYWRIGHT_EXAMPLE_CODE } from "@midscene/shared/constants";
import { AIActionType, callAI, callAIWithStringResponse } from "../index.mjs";
import { createEventCounts, createMessageContent, extractInputDescriptions, filterEventsByType, getScreenshotsForLLM, prepareEventSummary, processEventsForLLM, validateEvents } from "./yaml-generator.mjs";
const generatePlaywrightTest = async (events, options, modelConfig)=>{
    validateEvents(events);
    const summary = prepareEventSummary(events, {
        testName: options.testName,
        maxScreenshots: options.maxScreenshots || 3
    });
    const playwrightSummary = {
        ...summary,
        waitForNetworkIdle: false !== options.waitForNetworkIdle,
        waitForNetworkIdleTimeout: options.waitForNetworkIdleTimeout || 2000,
        viewportSize: options.viewportSize || {
            width: 1280,
            height: 800
        }
    };
    const screenshots = getScreenshotsForLLM(events, options.maxScreenshots || 3);
    const promptText = `Generate a Playwright test using @midscene/web/playwright that reproduces this recorded browser session. The test should be based on the following events and follow the structure of the example provided. Make the test descriptive with appropriate assertions and validations.

Event Summary:
${JSON.stringify(playwrightSummary, null, 2)}

Generated code should:
1. Import required dependencies
2. Set up the test with proper configuration
3. Include a beforeEach hook to navigate to the starting URL
4. Implement a test that uses Midscene AI methods (aiTap, aiInput, aiAssert, etc.)
5. Include appropriate assertions and validations
6. Follow best practices for Playwright tests
7. Be ready to execute without further modification

Important: Return ONLY the raw Playwright test code. Do NOT wrap the response in markdown code blocks (no \`\`\`typescript, \`\`\`javascript or \`\`\`). Start directly with the code content.`;
    const messageContent = createMessageContent(promptText, screenshots, false !== options.includeScreenshots);
    const systemPrompt = `You are an expert test automation engineer specializing in Playwright and Midscene. 
Your task is to generate a complete, executable Playwright test using @midscene/web/playwright that reproduces a recorded browser session.

${PLAYWRIGHT_EXAMPLE_CODE}`;
    const prompt = [
        {
            role: 'system',
            content: systemPrompt
        },
        {
            role: 'user',
            content: messageContent
        }
    ];
    const response = await callAIWithStringResponse(prompt, AIActionType.TEXT, modelConfig);
    if ((null == response ? void 0 : response.content) && 'string' == typeof response.content) return response.content;
    throw new Error('Failed to generate Playwright test code');
};
const generatePlaywrightTestStream = async (events, options, modelConfig)=>{
    validateEvents(events);
    const summary = prepareEventSummary(events, {
        testName: options.testName,
        maxScreenshots: options.maxScreenshots || 3
    });
    const playwrightSummary = {
        ...summary,
        waitForNetworkIdle: false !== options.waitForNetworkIdle,
        waitForNetworkIdleTimeout: options.waitForNetworkIdleTimeout || 2000,
        viewportSize: options.viewportSize || {
            width: 1280,
            height: 800
        }
    };
    const screenshots = getScreenshotsForLLM(events, options.maxScreenshots || 3);
    const promptText = `Generate a Playwright test using @midscene/web/playwright that reproduces this recorded browser session. The test should be based on the following events and follow the structure of the example provided. Make the test descriptive with appropriate assertions and validations.

Event Summary:
${JSON.stringify(playwrightSummary, null, 2)}

Generated code should:
1. Import required dependencies
2. Set up the test with proper configuration
3. Include a beforeEach hook to navigate to the starting URL
4. Implement a test that uses Midscene AI methods (aiTap, aiInput, aiAssert, etc.)
5. Include appropriate assertions and validations
6. Follow best practices for Playwright tests
7. Be ready to execute without further modification
8. can't wrap this test code in markdown code block

Important: Return ONLY the raw Playwright test code. Do NOT wrap the response in markdown code blocks (no \`\`\`typescript, \`\`\`javascript or \`\`\`). Start directly with the code content.`;
    const messageContent = createMessageContent(promptText, screenshots, false !== options.includeScreenshots);
    const systemPrompt = `You are an expert test automation engineer specializing in Playwright and Midscene. 
Your task is to generate a complete, executable Playwright test using @midscene/web/playwright that reproduces a recorded browser session.

${PLAYWRIGHT_EXAMPLE_CODE}`;
    const prompt = [
        {
            role: 'system',
            content: systemPrompt
        },
        {
            role: 'user',
            content: messageContent
        }
    ];
    if (options.stream && options.onChunk) return await callAI(prompt, AIActionType.TEXT, modelConfig, {
        stream: true,
        onChunk: options.onChunk
    });
    {
        const response = await callAIWithStringResponse(prompt, AIActionType.TEXT, modelConfig);
        if ((null == response ? void 0 : response.content) && 'string' == typeof response.content) return {
            content: response.content,
            usage: response.usage,
            isStreamed: false
        };
        throw new Error('Failed to generate Playwright test code');
    }
};
export { createEventCounts, createMessageContent, extractInputDescriptions, filterEventsByType, generatePlaywrightTest, generatePlaywrightTestStream, getScreenshotsForLLM, prepareEventSummary, processEventsForLLM, validateEvents };

//# sourceMappingURL=playwright-generator.mjs.map