{"version":3,"file":"server.mjs","sources":["webpack://@midscene/playground/./src/server.ts"],"sourcesContent":["import { existsSync, readFileSync, writeFileSync } from 'node:fs';\nimport type { Server } from 'node:http';\nimport { dirname, join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport type { Agent as PageAgent } from '@midscene/core/agent';\nimport type { AbstractInterface } from '@midscene/core/device';\nimport { getTmpDir } from '@midscene/core/utils';\nimport { PLAYGROUND_SERVER_PORT } from '@midscene/shared/constants';\nimport { overrideAIConfig } from '@midscene/shared/env';\nimport { uuid } from '@midscene/shared/utils';\nimport express, { type Request, type Response } from 'express';\nimport { executeAction, formatErrorMessage } from './common';\n\nimport 'dotenv/config';\n\nconst defaultPort = PLAYGROUND_SERVER_PORT;\n\n// Static path for playground files\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst STATIC_PATH = join(__dirname, '..', '..', 'static');\n\nconst errorHandler = (\n  err: unknown,\n  req: Request,\n  res: Response,\n  next: express.NextFunction,\n) => {\n  console.error(err);\n  const errorMessage =\n    err instanceof Error ? err.message : 'Internal server error';\n  res.status(500).json({\n    error: errorMessage,\n  });\n};\n\nclass PlaygroundServer {\n  private _app: express.Application;\n  tmpDir: string;\n  server?: Server;\n  port?: number | null;\n  page: AbstractInterface;\n  agent: PageAgent;\n  staticPath: string;\n  taskProgressTips: Record<string, string>;\n  id: string; // Unique identifier for this server instance\n\n  private _initialized = false;\n\n  constructor(\n    page: AbstractInterface,\n    agent: PageAgent,\n    staticPath = STATIC_PATH,\n    id?: string, // Optional override ID\n  ) {\n    this._app = express();\n    this.tmpDir = getTmpDir()!;\n    this.page = page;\n    this.agent = agent;\n    this.staticPath = staticPath;\n    this.taskProgressTips = {};\n    // Use provided ID, or generate random UUID for each startup\n    this.id = id || uuid();\n  }\n\n  /**\n   * Get the Express app instance for custom configuration\n   *\n   * IMPORTANT: Add middleware (like CORS) BEFORE calling launch()\n   * The routes are initialized when launch() is called, so middleware\n   * added after launch() will not affect the API routes.\n   *\n   * @example\n   * ```typescript\n   * import cors from 'cors';\n   *\n   * const server = new PlaygroundServer(page, agent);\n   *\n   * // Add CORS middleware before launch\n   * server.app.use(cors({\n   *   origin: true,\n   *   credentials: true,\n   *   methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']\n   * }));\n   *\n   * await server.launch();\n   * ```\n   */\n  get app(): express.Application {\n    return this._app;\n  }\n\n  /**\n   * Initialize Express app with all routes and middleware\n   * Called automatically by launch() if not already initialized\n   */\n  private initializeApp(): void {\n    if (this._initialized) return;\n\n    // Built-in middleware to parse JSON bodies\n    this._app.use(express.json({ limit: '50mb' }));\n\n    // Context update middleware (after JSON parsing)\n    this._app.use(\n      (req: Request, _res: Response, next: express.NextFunction) => {\n        const { context } = req.body || {};\n        if (\n          context &&\n          'updateContext' in this.page &&\n          typeof this.page.updateContext === 'function'\n        ) {\n          this.page.updateContext(context);\n          console.log('Context updated by PlaygroundServer middleware');\n        }\n        next();\n      },\n    );\n\n    // NOTE: CORS middleware should be added externally via server.app.use()\n    // before calling server.launch() if needed\n\n    // API routes\n    this.setupRoutes();\n\n    // Static file serving (if staticPath is provided)\n    this.setupStaticRoutes();\n\n    // Error handler middleware (must be last)\n    this._app.use(errorHandler);\n\n    this._initialized = true;\n  }\n\n  filePathForUuid(uuid: string) {\n    return join(this.tmpDir, `${uuid}.json`);\n  }\n\n  saveContextFile(uuid: string, context: string) {\n    const tmpFile = this.filePathForUuid(uuid);\n    console.log(`save context file: ${tmpFile}`);\n    writeFileSync(tmpFile, context);\n    return tmpFile;\n  }\n\n  /**\n   * Setup all API routes\n   */\n  private setupRoutes(): void {\n    this._app.get('/status', async (req: Request, res: Response) => {\n      res.send({\n        status: 'ok',\n        id: this.id,\n      });\n    });\n\n    this._app.get('/context/:uuid', async (req: Request, res: Response) => {\n      const { uuid } = req.params;\n      const contextFile = this.filePathForUuid(uuid);\n\n      if (!existsSync(contextFile)) {\n        return res.status(404).json({\n          error: 'Context not found',\n        });\n      }\n\n      const context = readFileSync(contextFile, 'utf8');\n      res.json({\n        context,\n      });\n    });\n\n    this._app.get(\n      '/task-progress/:requestId',\n      async (req: Request, res: Response) => {\n        const { requestId } = req.params;\n        res.json({\n          tip: this.taskProgressTips[requestId] || '',\n        });\n      },\n    );\n\n    this._app.post('/action-space', async (req: Request, res: Response) => {\n      try {\n        let actionSpace = [];\n\n        actionSpace = await this.page.actionSpace();\n\n        // Process actionSpace to make paramSchema serializable with shape info\n        const processedActionSpace = actionSpace.map((action: unknown) => {\n          if (action && typeof action === 'object' && 'paramSchema' in action) {\n            const typedAction = action as {\n              paramSchema?: { shape?: object; [key: string]: unknown };\n              [key: string]: unknown;\n            };\n            if (\n              typedAction.paramSchema &&\n              typeof typedAction.paramSchema === 'object'\n            ) {\n              // Extract shape information from Zod schema\n              let processedSchema = null;\n\n              try {\n                // Extract shape from runtime Zod object\n                if (\n                  typedAction.paramSchema.shape &&\n                  typeof typedAction.paramSchema.shape === 'object'\n                ) {\n                  processedSchema = {\n                    type: 'ZodObject',\n                    shape: typedAction.paramSchema.shape,\n                  };\n                }\n              } catch (e) {\n                const actionName =\n                  'name' in typedAction && typeof typedAction.name === 'string'\n                    ? typedAction.name\n                    : 'unknown';\n                console.warn(\n                  'Failed to process paramSchema for action:',\n                  actionName,\n                  e,\n                );\n              }\n\n              return {\n                ...typedAction,\n                paramSchema: processedSchema,\n              };\n            }\n          }\n          return action;\n        });\n\n        res.json(processedActionSpace);\n      } catch (error: unknown) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Unknown error';\n        console.error('Failed to get action space:', error);\n        res.status(500).json({\n          error: errorMessage,\n        });\n      }\n    });\n\n    // -------------------------\n    // actions from report file\n    this._app.post(\n      '/playground-with-context',\n      async (req: Request, res: Response) => {\n        const context = req.body.context;\n\n        if (!context) {\n          return res.status(400).json({\n            error: 'context is required',\n          });\n        }\n\n        const requestId = uuid();\n        this.saveContextFile(requestId, context);\n        return res.json({\n          location: `/playground/${requestId}`,\n          uuid: requestId,\n        });\n      },\n    );\n\n    this._app.post('/execute', async (req: Request, res: Response) => {\n      const {\n        type,\n        prompt,\n        params,\n        requestId,\n        deepThink,\n        screenshotIncluded,\n        domIncluded,\n      } = req.body;\n\n      if (!type) {\n        return res.status(400).json({\n          error: 'type is required',\n        });\n      }\n\n      if (requestId) {\n        this.taskProgressTips[requestId] = '';\n\n        this.agent.onTaskStartTip = (tip: string) => {\n          this.taskProgressTips[requestId] = tip;\n        };\n      }\n\n      const response: {\n        result: unknown;\n        dump: string | null;\n        error: string | null;\n        reportHTML: string | null;\n        requestId?: string;\n      } = {\n        result: null,\n        dump: null,\n        error: null,\n        reportHTML: null,\n        requestId,\n      };\n\n      const startTime = Date.now();\n      try {\n        // Get action space to check for dynamic actions\n        const actionSpace = await this.page.actionSpace();\n\n        // Prepare value object for executeAction\n        const value = {\n          type,\n          prompt,\n          params,\n        };\n\n        response.result = await executeAction(\n          this.agent,\n          type,\n          actionSpace,\n          value,\n          {\n            deepThink,\n            screenshotIncluded,\n            domIncluded,\n          },\n        );\n      } catch (error: unknown) {\n        response.error = formatErrorMessage(error);\n      }\n\n      try {\n        response.dump = JSON.parse(this.agent.dumpDataString());\n        response.reportHTML = this.agent.reportHTMLString() || null;\n\n        this.agent.writeOutActionDumps();\n        this.agent.resetDump();\n      } catch (error: unknown) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Unknown error';\n        console.error(\n          `write out dump failed: requestId: ${requestId}, ${errorMessage}`,\n        );\n      }\n\n      res.send(response);\n      const timeCost = Date.now() - startTime;\n\n      if (response.error) {\n        console.error(\n          `handle request failed after ${timeCost}ms: requestId: ${requestId}, ${response.error}`,\n        );\n      } else {\n        console.log(\n          `handle request done after ${timeCost}ms: requestId: ${requestId}`,\n        );\n      }\n\n      // Clean up task progress tip after execution completes\n      if (requestId) {\n        delete this.taskProgressTips[requestId];\n      }\n    });\n\n    this._app.post(\n      '/cancel/:requestId',\n      async (req: Request, res: Response) => {\n        const { requestId } = req.params;\n\n        if (!requestId) {\n          return res.status(400).json({\n            error: 'requestId is required',\n          });\n        }\n\n        try {\n          // Since we only have one agent, just clear the task progress tip\n          if (this.taskProgressTips[requestId]) {\n            delete this.taskProgressTips[requestId];\n          }\n          res.json({ status: 'cancelled' });\n        } catch (error: unknown) {\n          const errorMessage =\n            error instanceof Error ? error.message : 'Unknown error';\n          console.error(`Failed to cancel: ${errorMessage}`);\n          res.status(500).json({\n            error: `Failed to cancel: ${errorMessage}`,\n          });\n        }\n      },\n    );\n\n    // Screenshot API for real-time screenshot polling\n    this._app.get('/screenshot', async (_req: Request, res: Response) => {\n      try {\n        // Check if page has screenshotBase64 method\n        if (typeof this.page.screenshotBase64 !== 'function') {\n          return res.status(500).json({\n            error: 'Screenshot method not available on current interface',\n          });\n        }\n\n        const base64Screenshot = await this.page.screenshotBase64();\n\n        res.json({\n          screenshot: base64Screenshot,\n          timestamp: Date.now(),\n        });\n      } catch (error: unknown) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Unknown error';\n        console.error(`Failed to take screenshot: ${errorMessage}`);\n        res.status(500).json({\n          error: `Failed to take screenshot: ${errorMessage}`,\n        });\n      }\n    });\n\n    // Interface info API for getting interface type and description\n    this._app.get('/interface-info', async (_req: Request, res: Response) => {\n      try {\n        const type = this.page.interfaceType || 'Unknown';\n        const description = this.page.describe?.() || undefined;\n\n        res.json({\n          type,\n          description,\n        });\n      } catch (error: unknown) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Unknown error';\n        console.error(`Failed to get interface info: ${errorMessage}`);\n        res.status(500).json({\n          error: `Failed to get interface info: ${errorMessage}`,\n        });\n      }\n    });\n\n    this.app.post('/config', async (req: Request, res: Response) => {\n      const { aiConfig } = req.body;\n\n      if (!aiConfig || typeof aiConfig !== 'object') {\n        return res.status(400).json({\n          error: 'aiConfig is required and must be an object',\n        });\n      }\n\n      if (Object.keys(aiConfig).length === 0) {\n        return res.json({\n          status: 'ok',\n          message: 'AI config not changed due to empty object',\n        });\n      }\n\n      try {\n        overrideAIConfig(aiConfig);\n\n        return res.json({\n          status: 'ok',\n          message: 'AI config updated successfully',\n        });\n      } catch (error: unknown) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Unknown error';\n        console.error(`Failed to update AI config: ${errorMessage}`);\n        return res.status(500).json({\n          error: `Failed to update AI config: ${errorMessage}`,\n        });\n      }\n    });\n  }\n\n  /**\n   * Setup static file serving routes\n   */\n  private setupStaticRoutes(): void {\n    // Handle index.html with port injection\n    this._app.get('/', (_req: Request, res: Response) => {\n      this.serveHtmlWithPorts(res);\n    });\n\n    this._app.get('/index.html', (_req: Request, res: Response) => {\n      this.serveHtmlWithPorts(res);\n    });\n\n    // Use express.static middleware for secure static file serving\n    this._app.use(express.static(this.staticPath));\n\n    // Fallback to index.html for SPA routing\n    this._app.get('*', (_req: Request, res: Response) => {\n      this.serveHtmlWithPorts(res);\n    });\n  }\n\n  /**\n   * Serve HTML with injected port configuration\n   */\n  private serveHtmlWithPorts(res: Response): void {\n    try {\n      const htmlPath = join(this.staticPath, 'index.html');\n      let html = readFileSync(htmlPath, 'utf8');\n\n      // Get scrcpy server port from global\n      const scrcpyPort = (global as any).scrcpyServerPort || this.port! + 1;\n\n      // Inject scrcpy port configuration script into HTML head\n      const configScript = `\n        <script>\n          window.SCRCPY_PORT = ${scrcpyPort};\n        </script>\n      `;\n\n      // Insert the script before closing </head> tag\n      html = html.replace('</head>', `${configScript}</head>`);\n\n      res.setHeader('Content-Type', 'text/html');\n      res.send(html);\n    } catch (error) {\n      console.error('Error serving HTML with ports:', error);\n      res.status(500).send('Internal Server Error');\n    }\n  }\n\n  /**\n   * Launch the server on specified port\n   */\n  async launch(port?: number): Promise<PlaygroundServer> {\n    // Initialize routes now, after any middleware has been added\n    this.initializeApp();\n\n    this.port = port || defaultPort;\n\n    // Keep the random UUID as-is, no need to regenerate\n\n    return new Promise((resolve) => {\n      const serverPort = this.port;\n      this.server = this._app.listen(serverPort, () => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * Close the server and clean up resources\n   */\n  async close(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.server) {\n        // Clean up the single agent\n        try {\n          this.agent.destroy();\n        } catch (error) {\n          console.warn('Failed to destroy agent:', error);\n        }\n        this.taskProgressTips = {};\n\n        // Close the server\n        this.server.close((error) => {\n          if (error) {\n            reject(error);\n          } else {\n            this.server = undefined;\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n\nexport default PlaygroundServer;\nexport { PlaygroundServer };\n"],"names":["defaultPort","PLAYGROUND_SERVER_PORT","__filename","fileURLToPath","__dirname","dirname","STATIC_PATH","join","errorHandler","err","req","res","next","console","errorMessage","Error","PlaygroundServer","express","_res","context","uuid","tmpFile","writeFileSync","contextFile","existsSync","readFileSync","requestId","actionSpace","processedActionSpace","action","typedAction","processedSchema","e","actionName","error","type","prompt","params","deepThink","screenshotIncluded","domIncluded","tip","response","startTime","Date","value","executeAction","formatErrorMessage","JSON","timeCost","_req","base64Screenshot","_this_page","description","undefined","aiConfig","Object","overrideAIConfig","htmlPath","html","scrcpyPort","global","configScript","port","Promise","resolve","serverPort","reject","page","agent","staticPath","id","getTmpDir"],"mappings":";;;;;;;;;;;;;;;;;;;;AAeA,MAAMA,cAAcC;AAGpB,MAAMC,kBAAaC,cAAc,YAAY,GAAG;AAChD,MAAMC,iBAAYC,QAAQH;AAC1B,MAAMI,cAAcC,KAAKH,gBAAW,MAAM,MAAM;AAEhD,MAAMI,eAAe,CACnBC,KACAC,KACAC,KACAC;IAEAC,QAAQ,KAAK,CAACJ;IACd,MAAMK,eACJL,eAAeM,QAAQN,IAAI,OAAO,GAAG;IACvCE,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QACnB,OAAOG;IACT;AACF;AAEA,MAAME;IAoDJ,IAAI,MAA2B;QAC7B,OAAO,IAAI,CAAC,IAAI;IAClB;IAMQ,gBAAsB;QAC5B,IAAI,IAAI,CAAC,YAAY,EAAE;QAGvB,IAAI,CAAC,IAAI,CAAC,GAAG,CAACC,QAAQ,IAAI,CAAC;YAAE,OAAO;QAAO;QAG3C,IAAI,CAAC,IAAI,CAAC,GAAG,CACX,CAACP,KAAcQ,MAAgBN;YAC7B,MAAM,EAAEO,OAAO,EAAE,GAAGT,IAAI,IAAI,IAAI,CAAC;YACjC,IACES,WACA,mBAAmB,IAAI,CAAC,IAAI,IAC5B,AAAmC,cAAnC,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,EAC9B;gBACA,IAAI,CAAC,IAAI,CAAC,aAAa,CAACA;gBACxBN,QAAQ,GAAG,CAAC;YACd;YACAD;QACF;QAOF,IAAI,CAAC,WAAW;QAGhB,IAAI,CAAC,iBAAiB;QAGtB,IAAI,CAAC,IAAI,CAAC,GAAG,CAACJ;QAEd,IAAI,CAAC,YAAY,GAAG;IACtB;IAEA,gBAAgBY,IAAY,EAAE;QAC5B,OAAOb,KAAK,IAAI,CAAC,MAAM,EAAE,GAAGa,KAAK,KAAK,CAAC;IACzC;IAEA,gBAAgBA,IAAY,EAAED,OAAe,EAAE;QAC7C,MAAME,UAAU,IAAI,CAAC,eAAe,CAACD;QACrCP,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAEQ,SAAS;QAC3CC,cAAcD,SAASF;QACvB,OAAOE;IACT;IAKQ,cAAoB;QAC1B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,OAAOX,KAAcC;YAC5CA,IAAI,IAAI,CAAC;gBACP,QAAQ;gBACR,IAAI,IAAI,CAAC,EAAE;YACb;QACF;QAEA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kBAAkB,OAAOD,KAAcC;YACnD,MAAM,EAAES,IAAI,EAAE,GAAGV,IAAI,MAAM;YAC3B,MAAMa,cAAc,IAAI,CAAC,eAAe,CAACH;YAEzC,IAAI,CAACI,WAAWD,cACd,OAAOZ,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,OAAO;YACT;YAGF,MAAMQ,UAAUM,aAAaF,aAAa;YAC1CZ,IAAI,IAAI,CAAC;gBACPQ;YACF;QACF;QAEA,IAAI,CAAC,IAAI,CAAC,GAAG,CACX,6BACA,OAAOT,KAAcC;YACnB,MAAM,EAAEe,SAAS,EAAE,GAAGhB,IAAI,MAAM;YAChCC,IAAI,IAAI,CAAC;gBACP,KAAK,IAAI,CAAC,gBAAgB,CAACe,UAAU,IAAI;YAC3C;QACF;QAGF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,OAAOhB,KAAcC;YACnD,IAAI;gBACF,IAAIgB,cAAc,EAAE;gBAEpBA,cAAc,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW;gBAGzC,MAAMC,uBAAuBD,YAAY,GAAG,CAAC,CAACE;oBAC5C,IAAIA,UAAU,AAAkB,YAAlB,OAAOA,UAAuB,iBAAiBA,QAAQ;wBACnE,MAAMC,cAAcD;wBAIpB,IACEC,YAAY,WAAW,IACvB,AAAmC,YAAnC,OAAOA,YAAY,WAAW,EAC9B;4BAEA,IAAIC,kBAAkB;4BAEtB,IAAI;gCAEF,IACED,YAAY,WAAW,CAAC,KAAK,IAC7B,AAAyC,YAAzC,OAAOA,YAAY,WAAW,CAAC,KAAK,EAEpCC,kBAAkB;oCAChB,MAAM;oCACN,OAAOD,YAAY,WAAW,CAAC,KAAK;gCACtC;4BAEJ,EAAE,OAAOE,GAAG;gCACV,MAAMC,aACJ,UAAUH,eAAe,AAA4B,YAA5B,OAAOA,YAAY,IAAI,GAC5CA,YAAY,IAAI,GAChB;gCACNjB,QAAQ,IAAI,CACV,6CACAoB,YACAD;4BAEJ;4BAEA,OAAO;gCACL,GAAGF,WAAW;gCACd,aAAaC;4BACf;wBACF;oBACF;oBACA,OAAOF;gBACT;gBAEAlB,IAAI,IAAI,CAACiB;YACX,EAAE,OAAOM,OAAgB;gBACvB,MAAMpB,eACJoB,iBAAiBnB,QAAQmB,MAAM,OAAO,GAAG;gBAC3CrB,QAAQ,KAAK,CAAC,+BAA+BqB;gBAC7CvB,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBACnB,OAAOG;gBACT;YACF;QACF;QAIA,IAAI,CAAC,IAAI,CAAC,IAAI,CACZ,4BACA,OAAOJ,KAAcC;YACnB,MAAMQ,UAAUT,IAAI,IAAI,CAAC,OAAO;YAEhC,IAAI,CAACS,SACH,OAAOR,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,OAAO;YACT;YAGF,MAAMe,YAAYN;YAClB,IAAI,CAAC,eAAe,CAACM,WAAWP;YAChC,OAAOR,IAAI,IAAI,CAAC;gBACd,UAAU,CAAC,YAAY,EAAEe,WAAW;gBACpC,MAAMA;YACR;QACF;QAGF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,OAAOhB,KAAcC;YAC9C,MAAM,EACJwB,IAAI,EACJC,MAAM,EACNC,MAAM,EACNX,SAAS,EACTY,SAAS,EACTC,kBAAkB,EAClBC,WAAW,EACZ,GAAG9B,IAAI,IAAI;YAEZ,IAAI,CAACyB,MACH,OAAOxB,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,OAAO;YACT;YAGF,IAAIe,WAAW;gBACb,IAAI,CAAC,gBAAgB,CAACA,UAAU,GAAG;gBAEnC,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,CAACe;oBAC3B,IAAI,CAAC,gBAAgB,CAACf,UAAU,GAAGe;gBACrC;YACF;YAEA,MAAMC,WAMF;gBACF,QAAQ;gBACR,MAAM;gBACN,OAAO;gBACP,YAAY;gBACZhB;YACF;YAEA,MAAMiB,YAAYC,KAAK,GAAG;YAC1B,IAAI;gBAEF,MAAMjB,cAAc,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW;gBAG/C,MAAMkB,QAAQ;oBACZV;oBACAC;oBACAC;gBACF;gBAEAK,SAAS,MAAM,GAAG,MAAMI,cACtB,IAAI,CAAC,KAAK,EACVX,MACAR,aACAkB,OACA;oBACEP;oBACAC;oBACAC;gBACF;YAEJ,EAAE,OAAON,OAAgB;gBACvBQ,SAAS,KAAK,GAAGK,mBAAmBb;YACtC;YAEA,IAAI;gBACFQ,SAAS,IAAI,GAAGM,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc;gBACpDN,SAAS,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,MAAM;gBAEvD,IAAI,CAAC,KAAK,CAAC,mBAAmB;gBAC9B,IAAI,CAAC,KAAK,CAAC,SAAS;YACtB,EAAE,OAAOR,OAAgB;gBACvB,MAAMpB,eACJoB,iBAAiBnB,QAAQmB,MAAM,OAAO,GAAG;gBAC3CrB,QAAQ,KAAK,CACX,CAAC,kCAAkC,EAAEa,UAAU,EAAE,EAAEZ,cAAc;YAErE;YAEAH,IAAI,IAAI,CAAC+B;YACT,MAAMO,WAAWL,KAAK,GAAG,KAAKD;YAE9B,IAAID,SAAS,KAAK,EAChB7B,QAAQ,KAAK,CACX,CAAC,4BAA4B,EAAEoC,SAAS,eAAe,EAAEvB,UAAU,EAAE,EAAEgB,SAAS,KAAK,EAAE;iBAGzF7B,QAAQ,GAAG,CACT,CAAC,0BAA0B,EAAEoC,SAAS,eAAe,EAAEvB,WAAW;YAKtE,IAAIA,WACF,OAAO,IAAI,CAAC,gBAAgB,CAACA,UAAU;QAE3C;QAEA,IAAI,CAAC,IAAI,CAAC,IAAI,CACZ,sBACA,OAAOhB,KAAcC;YACnB,MAAM,EAAEe,SAAS,EAAE,GAAGhB,IAAI,MAAM;YAEhC,IAAI,CAACgB,WACH,OAAOf,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,OAAO;YACT;YAGF,IAAI;gBAEF,IAAI,IAAI,CAAC,gBAAgB,CAACe,UAAU,EAClC,OAAO,IAAI,CAAC,gBAAgB,CAACA,UAAU;gBAEzCf,IAAI,IAAI,CAAC;oBAAE,QAAQ;gBAAY;YACjC,EAAE,OAAOuB,OAAgB;gBACvB,MAAMpB,eACJoB,iBAAiBnB,QAAQmB,MAAM,OAAO,GAAG;gBAC3CrB,QAAQ,KAAK,CAAC,CAAC,kBAAkB,EAAEC,cAAc;gBACjDH,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBACnB,OAAO,CAAC,kBAAkB,EAAEG,cAAc;gBAC5C;YACF;QACF;QAIF,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,OAAOoC,MAAevC;YACjD,IAAI;gBAEF,IAAI,AAAsC,cAAtC,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,EACnC,OAAOA,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBAC1B,OAAO;gBACT;gBAGF,MAAMwC,mBAAmB,MAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB;gBAEzDxC,IAAI,IAAI,CAAC;oBACP,YAAYwC;oBACZ,WAAWP,KAAK,GAAG;gBACrB;YACF,EAAE,OAAOV,OAAgB;gBACvB,MAAMpB,eACJoB,iBAAiBnB,QAAQmB,MAAM,OAAO,GAAG;gBAC3CrB,QAAQ,KAAK,CAAC,CAAC,2BAA2B,EAAEC,cAAc;gBAC1DH,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBACnB,OAAO,CAAC,2BAA2B,EAAEG,cAAc;gBACrD;YACF;QACF;QAGA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,OAAOoC,MAAevC;YACrD,IAAI;oBAEkByC,qBAAAA;gBADpB,MAAMjB,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI;gBACxC,MAAMkB,cAAcD,AAAAA,SAAAA,CAAAA,sBAAAA,AAAAA,CAAAA,aAAAA,IAAI,CAAC,IAAI,AAAD,EAAE,QAAQ,AAAD,IAAjBA,KAAAA,IAAAA,oBAAAA,IAAAA,CAAAA,WAAAA,KAA0BE;gBAE9C3C,IAAI,IAAI,CAAC;oBACPwB;oBACAkB;gBACF;YACF,EAAE,OAAOnB,OAAgB;gBACvB,MAAMpB,eACJoB,iBAAiBnB,QAAQmB,MAAM,OAAO,GAAG;gBAC3CrB,QAAQ,KAAK,CAAC,CAAC,8BAA8B,EAAEC,cAAc;gBAC7DH,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBACnB,OAAO,CAAC,8BAA8B,EAAEG,cAAc;gBACxD;YACF;QACF;QAEA,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,OAAOJ,KAAcC;YAC5C,MAAM,EAAE4C,QAAQ,EAAE,GAAG7C,IAAI,IAAI;YAE7B,IAAI,CAAC6C,YAAY,AAAoB,YAApB,OAAOA,UACtB,OAAO5C,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAC1B,OAAO;YACT;YAGF,IAAI6C,AAAiC,MAAjCA,OAAO,IAAI,CAACD,UAAU,MAAM,EAC9B,OAAO5C,IAAI,IAAI,CAAC;gBACd,QAAQ;gBACR,SAAS;YACX;YAGF,IAAI;gBACF8C,iBAAiBF;gBAEjB,OAAO5C,IAAI,IAAI,CAAC;oBACd,QAAQ;oBACR,SAAS;gBACX;YACF,EAAE,OAAOuB,OAAgB;gBACvB,MAAMpB,eACJoB,iBAAiBnB,QAAQmB,MAAM,OAAO,GAAG;gBAC3CrB,QAAQ,KAAK,CAAC,CAAC,4BAA4B,EAAEC,cAAc;gBAC3D,OAAOH,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;oBAC1B,OAAO,CAAC,4BAA4B,EAAEG,cAAc;gBACtD;YACF;QACF;IACF;IAKQ,oBAA0B;QAEhC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAACoC,MAAevC;YACjC,IAAI,CAAC,kBAAkB,CAACA;QAC1B;QAEA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAACuC,MAAevC;YAC3C,IAAI,CAAC,kBAAkB,CAACA;QAC1B;QAGA,IAAI,CAAC,IAAI,CAAC,GAAG,CAACM,OAAO,CAAPA,SAAc,CAAC,IAAI,CAAC,UAAU;QAG5C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAACiC,MAAevC;YACjC,IAAI,CAAC,kBAAkB,CAACA;QAC1B;IACF;IAKQ,mBAAmBA,GAAa,EAAQ;QAC9C,IAAI;YACF,MAAM+C,WAAWnD,KAAK,IAAI,CAAC,UAAU,EAAE;YACvC,IAAIoD,OAAOlC,aAAaiC,UAAU;YAGlC,MAAME,aAAcC,OAAe,gBAAgB,IAAI,IAAI,CAAC,IAAI,GAAI;YAGpE,MAAMC,eAAe,CAAC;;+BAEG,EAAEF,WAAW;;MAEtC,CAAC;YAGDD,OAAOA,KAAK,OAAO,CAAC,WAAW,GAAGG,aAAa,OAAO,CAAC;YAEvDnD,IAAI,SAAS,CAAC,gBAAgB;YAC9BA,IAAI,IAAI,CAACgD;QACX,EAAE,OAAOzB,OAAO;YACdrB,QAAQ,KAAK,CAAC,kCAAkCqB;YAChDvB,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QACvB;IACF;IAKA,MAAM,OAAOoD,IAAa,EAA6B;QAErD,IAAI,CAAC,aAAa;QAElB,IAAI,CAAC,IAAI,GAAGA,QAAQ/D;QAIpB,OAAO,IAAIgE,QAAQ,CAACC;YAClB,MAAMC,aAAa,IAAI,CAAC,IAAI;YAC5B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAACA,YAAY;gBACzCD,QAAQ,IAAI;YACd;QACF;IACF;IAKA,MAAM,QAAuB;QAC3B,OAAO,IAAID,QAAQ,CAACC,SAASE;YAC3B,IAAI,IAAI,CAAC,MAAM,EAAE;gBAEf,IAAI;oBACF,IAAI,CAAC,KAAK,CAAC,OAAO;gBACpB,EAAE,OAAOjC,OAAO;oBACdrB,QAAQ,IAAI,CAAC,4BAA4BqB;gBAC3C;gBACA,IAAI,CAAC,gBAAgB,GAAG,CAAC;gBAGzB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAACA;oBACjB,IAAIA,OACFiC,OAAOjC;yBACF;wBACL,IAAI,CAAC,MAAM,GAAGoB;wBACdW;oBACF;gBACF;YACF,OACEA;QAEJ;IACF;IAzgBA,YACEG,IAAuB,EACvBC,KAAgB,EAChBC,aAAahE,WAAW,EACxBiE,EAAW,CACX;QAjBF,uBAAQ,QAAR;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QAEA,uBAAQ,gBAAe;QAQrB,IAAI,CAAC,IAAI,GAAGtD;QACZ,IAAI,CAAC,MAAM,GAAGuD;QACd,IAAI,CAAC,IAAI,GAAGJ;QACZ,IAAI,CAAC,KAAK,GAAGC;QACb,IAAI,CAAC,UAAU,GAAGC;QAClB,IAAI,CAAC,gBAAgB,GAAG,CAAC;QAEzB,IAAI,CAAC,EAAE,GAAGC,MAAMnD;IAClB;AA4fF;AAEA,eAAeJ"}