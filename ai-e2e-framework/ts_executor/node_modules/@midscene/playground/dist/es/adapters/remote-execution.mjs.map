{"version":3,"file":"adapters/remote-execution.mjs","sources":["webpack://@midscene/playground/./src/adapters/remote-execution.ts"],"sourcesContent":["import type { DeviceAction } from '@midscene/core';\nimport { parseStructuredParams } from '../common';\nimport type { ExecutionOptions, FormValue, ValidationResult } from '../types';\nimport { BasePlaygroundAdapter } from './base';\n\nexport class RemoteExecutionAdapter extends BasePlaygroundAdapter {\n  private serverUrl?: string;\n  private progressPolling = new Map<string, NodeJS.Timeout>();\n  private progressCallback?: (tip: string) => void;\n  private _id?: string;\n\n  constructor(serverUrl: string) {\n    super();\n    this.serverUrl = serverUrl;\n  }\n\n  // Get adapter ID (cached after first status check for remote)\n  get id(): string | undefined {\n    return this._id;\n  }\n\n  // Override validateParams for remote execution\n  // Since schemas from server are JSON-serialized and lack .parse() method\n  validateParams(\n    value: FormValue,\n    action: DeviceAction<unknown> | undefined,\n  ): ValidationResult {\n    if (!action?.paramSchema) {\n      return { valid: true };\n    }\n\n    const needsStructuredParams = this.actionNeedsStructuredParams(action);\n\n    if (!needsStructuredParams) {\n      return { valid: true };\n    }\n\n    if (!value.params) {\n      return { valid: false, errorMessage: 'Parameters are required' };\n    }\n\n    // For remote execution, perform basic validation without .parse()\n    // Check if required fields are present\n    if (action.paramSchema && typeof action.paramSchema === 'object') {\n      const schema = action.paramSchema as any;\n      if (schema.shape || schema.type === 'ZodObject') {\n        const shape = schema.shape || {};\n        const missingFields = Object.keys(shape).filter((key) => {\n          const fieldDef = shape[key];\n          // Check if field is required (not optional)\n          const isOptional =\n            fieldDef?.isOptional ||\n            fieldDef?._def?.innerType || // ZodOptional\n            fieldDef?._def?.typeName === 'ZodOptional';\n          return (\n            !isOptional &&\n            (value.params![key] === undefined || value.params![key] === '')\n          );\n        });\n\n        if (missingFields.length > 0) {\n          return {\n            valid: false,\n            errorMessage: `Missing required parameters: ${missingFields.join(', ')}`,\n          };\n        }\n      }\n    }\n\n    return { valid: true };\n  }\n\n  async parseStructuredParams(\n    action: DeviceAction<unknown>,\n    params: Record<string, unknown>,\n    options: ExecutionOptions,\n  ): Promise<unknown[]> {\n    // Use shared implementation from common.ts\n    return await parseStructuredParams(action, params, options);\n  }\n\n  formatErrorMessage(error: any): string {\n    const message = error?.message || '';\n\n    // Handle Android-specific errors\n    const androidErrors = [\n      {\n        keyword: 'adb',\n        message:\n          'ADB connection error. Please ensure device is connected and USB debugging is enabled.',\n      },\n      {\n        keyword: 'UIAutomator',\n        message:\n          'UIAutomator error. Please ensure the UIAutomator server is running on the device.',\n      },\n    ];\n\n    const androidError = androidErrors.find(({ keyword }) =>\n      message.includes(keyword),\n    );\n    if (androidError) {\n      return androidError.message;\n    }\n\n    return this.formatBasicErrorMessage(error);\n  }\n\n  // Remote execution adapter - simplified interface\n  async executeAction(\n    actionType: string,\n    value: FormValue,\n    options: ExecutionOptions,\n  ): Promise<unknown> {\n    // If serverUrl is provided, use server-side execution\n    if (this.serverUrl && typeof window !== 'undefined') {\n      return this.executeViaServer(actionType, value, options);\n    }\n\n    throw new Error(\n      'Remote execution adapter requires server URL for execution',\n    );\n  }\n\n  // Remote execution via server - uses same endpoint as requestPlaygroundServer\n  private async executeViaServer(\n    actionType: string,\n    value: FormValue,\n    options: ExecutionOptions,\n  ): Promise<unknown> {\n    const payload: Record<string, unknown> = {\n      type: actionType,\n      prompt: value.prompt,\n      ...this.buildOptionalPayloadParams(options, value),\n    };\n\n    // Add context only if it exists (server can handle single agent case without context)\n    if (options.context) {\n      payload.context = options.context;\n    }\n\n    // Start progress polling if callback is set and requestId exists\n    if (options.requestId && this.progressCallback) {\n      this.startProgressPolling(options.requestId, this.progressCallback);\n    }\n\n    try {\n      const response = await fetch(`${this.serverUrl}/execute`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unknown error');\n        throw new Error(\n          `Server request failed (${response.status}): ${errorText}`,\n        );\n      }\n\n      const result = await response.json();\n\n      // Stop progress polling when execution completes\n      if (options.requestId) {\n        this.stopProgressPolling(options.requestId);\n      }\n\n      return result;\n    } catch (error) {\n      // Stop progress polling on error\n      if (options.requestId) {\n        this.stopProgressPolling(options.requestId);\n      }\n      console.error('Execute via server failed:', error);\n      throw error;\n    }\n  }\n\n  // Helper method to build optional payload parameters\n  private buildOptionalPayloadParams(\n    options: ExecutionOptions,\n    value: FormValue,\n  ): Record<string, unknown> {\n    const optionalParams: Record<string, unknown> = {};\n\n    // Add optional parameters only if they have meaningful values\n    const optionalFields = [\n      { key: 'requestId', value: options.requestId },\n      { key: 'deepThink', value: options.deepThink },\n      { key: 'screenshotIncluded', value: options.screenshotIncluded },\n      { key: 'domIncluded', value: options.domIncluded },\n      { key: 'params', value: value.params },\n    ] as const;\n\n    optionalFields.forEach(({ key, value }) => {\n      if (value !== undefined && value !== null && value !== '') {\n        optionalParams[key] = value;\n      }\n    });\n\n    return optionalParams;\n  }\n\n  // Get action space from server with fallback\n  async getActionSpace(context?: unknown): Promise<DeviceAction<unknown>[]> {\n    // Try server first if available\n    if (this.serverUrl && typeof window !== 'undefined') {\n      try {\n        const response = await fetch(`${this.serverUrl}/action-space`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ context }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to get action space: ${response.statusText}`);\n        }\n\n        const result = await response.json();\n        return Array.isArray(result) ? result : [];\n      } catch (error) {\n        console.error('Failed to get action space from server:', error);\n        // Fall through to context fallback\n      }\n    }\n\n    // Fallback: try context.actionSpace if available\n    if (context && typeof context === 'object' && 'actionSpace' in context) {\n      try {\n        const actionSpaceMethod = (\n          context as { actionSpace: () => Promise<DeviceAction<unknown>[]> }\n        ).actionSpace;\n        const result = await actionSpaceMethod();\n        return Array.isArray(result) ? result : [];\n      } catch (error) {\n        console.error('Failed to get action space from context:', error);\n      }\n    }\n\n    return [];\n  }\n\n  // Uses base implementation for validateParams and createDisplayContent\n\n  // Server communication methods\n  async checkStatus(): Promise<boolean> {\n    if (!this.serverUrl) {\n      return false;\n    }\n\n    try {\n      const res = await fetch(`${this.serverUrl}/status`);\n      if (res.status === 200) {\n        // Try to extract id from response\n        try {\n          const data = await res.json();\n          if (data.id && typeof data.id === 'string') {\n            this._id = data.id;\n          }\n        } catch (jsonError) {\n          // If JSON parsing fails, id remains undefined but status is still OK\n          console.debug('Failed to parse status response:', jsonError);\n        }\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.warn('Server status check failed:', error);\n      return false;\n    }\n  }\n\n  async overrideConfig(aiConfig: Record<string, unknown>): Promise<void> {\n    if (!this.serverUrl) {\n      throw new Error('Server URL not configured');\n    }\n\n    try {\n      const response = await fetch(`${this.serverUrl}/config`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ aiConfig }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to override server config: ${response.statusText}`,\n        );\n      }\n    } catch (error) {\n      console.error('Failed to override server config:', error);\n      throw error;\n    }\n  }\n\n  async getTaskProgress(requestId: string): Promise<{ tip?: string }> {\n    if (!this.serverUrl) {\n      return { tip: undefined };\n    }\n\n    if (!requestId?.trim()) {\n      console.warn('Invalid requestId provided for task progress');\n      return { tip: undefined };\n    }\n\n    try {\n      const response = await fetch(\n        `${this.serverUrl}/task-progress/${encodeURIComponent(requestId)}`,\n      );\n\n      if (!response.ok) {\n        console.warn(`Task progress request failed: ${response.statusText}`);\n        return { tip: undefined };\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to poll task progress:', error);\n      return { tip: undefined };\n    }\n  }\n\n  // Cancel task\n  async cancelTask(\n    requestId: string,\n  ): Promise<{ error?: string; success?: boolean }> {\n    // Stop progress polling\n    this.stopProgressPolling(requestId);\n\n    if (!this.serverUrl) {\n      return { error: 'No server URL configured' };\n    }\n\n    if (!requestId?.trim()) {\n      return { error: 'Invalid request ID' };\n    }\n\n    try {\n      const res = await fetch(\n        `${this.serverUrl}/cancel/${encodeURIComponent(requestId)}`,\n        {\n          method: 'POST',\n        },\n      );\n\n      if (!res.ok) {\n        return { error: `Cancel request failed: ${res.statusText}` };\n      }\n\n      const result = await res.json();\n      return { success: true, ...result };\n    } catch (error) {\n      console.error('Failed to cancel task:', error);\n      return { error: 'Failed to cancel task' };\n    }\n  }\n\n  // Progress callback management\n  setProgressCallback(callback: (tip: string) => void): void {\n    this.progressCallback = callback;\n  }\n\n  // Start progress polling\n  private startProgressPolling(\n    requestId: string,\n    callback: (tip: string) => void,\n  ): void {\n    // Don't start multiple polling for the same request\n    if (this.progressPolling.has(requestId)) {\n      return;\n    }\n\n    let lastTip = '';\n    const interval = setInterval(async () => {\n      try {\n        const progress = await this.getTaskProgress(requestId);\n        if (progress?.tip?.trim?.() && progress.tip !== lastTip) {\n          lastTip = progress.tip;\n          callback(progress.tip);\n        }\n      } catch (error) {\n        // Silently ignore progress polling errors to avoid spam\n        console.debug('Progress polling error:', error);\n      }\n    }, 500); // Poll every 500ms\n\n    this.progressPolling.set(requestId, interval);\n  }\n\n  // Stop progress polling\n  private stopProgressPolling(requestId: string): void {\n    const interval = this.progressPolling.get(requestId);\n    if (interval) {\n      clearInterval(interval);\n      this.progressPolling.delete(requestId);\n    }\n  }\n\n  // Get screenshot from server\n  async getScreenshot(): Promise<{\n    screenshot: string;\n    timestamp: number;\n  } | null> {\n    if (!this.serverUrl) {\n      return null;\n    }\n\n    try {\n      const response = await fetch(`${this.serverUrl}/screenshot`);\n\n      if (!response.ok) {\n        console.warn(`Screenshot request failed: ${response.statusText}`);\n        return null;\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get screenshot:', error);\n      return null;\n    }\n  }\n\n  // Get interface information from server\n  async getInterfaceInfo(): Promise<{\n    type: string;\n    description?: string;\n  } | null> {\n    if (!this.serverUrl) {\n      return null;\n    }\n\n    try {\n      const response = await fetch(`${this.serverUrl}/interface-info`);\n\n      if (!response.ok) {\n        console.warn(`Interface info request failed: ${response.statusText}`);\n        return null;\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get interface info:', error);\n      return null;\n    }\n  }\n}\n"],"names":["RemoteExecutionAdapter","BasePlaygroundAdapter","value","action","needsStructuredParams","schema","shape","missingFields","Object","key","_fieldDef__def","_fieldDef__def1","fieldDef","isOptional","undefined","params","options","parseStructuredParams","error","message","androidErrors","androidError","keyword","actionType","window","Error","payload","response","fetch","JSON","errorText","result","console","optionalParams","optionalFields","context","Array","actionSpaceMethod","res","data","jsonError","aiConfig","requestId","encodeURIComponent","callback","lastTip","interval","setInterval","_progress_tip","progress","clearInterval","serverUrl","Map"],"mappings":"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"}