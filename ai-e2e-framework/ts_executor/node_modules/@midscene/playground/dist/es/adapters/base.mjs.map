{"version":3,"file":"adapters/base.mjs","sources":["webpack://@midscene/playground/./src/adapters/base.ts"],"sourcesContent":["import type { DeviceAction } from '@midscene/core';\nimport { findAllMidsceneLocatorField } from '@midscene/core/ai-model';\nimport type { ExecutionOptions, FormValue, ValidationResult } from '../types';\n\nexport abstract class BasePlaygroundAdapter {\n  abstract parseStructuredParams(\n    action: DeviceAction<unknown>,\n    params: Record<string, unknown>,\n    options: ExecutionOptions,\n  ): Promise<unknown[]>;\n\n  abstract formatErrorMessage(error: any): string;\n\n  // Abstract method for execution - must be implemented by concrete adapters\n  abstract executeAction(\n    actionType: string,\n    value: FormValue,\n    options: ExecutionOptions,\n  ): Promise<unknown>;\n\n  // Optional method for getting action space - default implementation returns empty array\n  async getActionSpace(_context: any): Promise<DeviceAction<unknown>[]> {\n    return [];\n  }\n\n  // Common validation logic - can be overridden if needed\n  validateParams(\n    value: FormValue,\n    action: DeviceAction<unknown> | undefined,\n  ): ValidationResult {\n    if (!action?.paramSchema) {\n      return { valid: true };\n    }\n\n    const needsStructuredParams = this.actionNeedsStructuredParams(action);\n\n    if (!needsStructuredParams) {\n      return { valid: true };\n    }\n\n    if (!value.params) {\n      return { valid: false, errorMessage: 'Parameters are required' };\n    }\n\n    try {\n      const paramsForValidation = this.prepareParamsForValidation(\n        value.params,\n        action,\n      );\n      action.paramSchema.parse(paramsForValidation);\n      return { valid: true };\n    } catch (error: unknown) {\n      return this.handleValidationError(error);\n    }\n  }\n\n  // Common display content creation logic - can be overridden if needed\n  createDisplayContent(\n    value: FormValue,\n    needsStructuredParams: boolean,\n    action: DeviceAction<unknown> | undefined,\n  ): string {\n    if (!needsStructuredParams || !value.params || !action?.paramSchema) {\n      return value.prompt || '';\n    }\n\n    const paramsList = this.buildParamsDisplayList(value.params, action);\n    return paramsList.join('\\n') || value.prompt || '';\n  }\n\n  // Helper method for basic error message formatting\n  protected formatBasicErrorMessage(error: any): string {\n    return error?.message || 'Unknown error';\n  }\n\n  // Helper method for parsing structured params base logic\n  protected getSchemaKeys(action: DeviceAction<unknown>): string[] {\n    if (!action?.paramSchema || !('shape' in action.paramSchema)) {\n      return [];\n    }\n\n    const schema = action.paramSchema;\n    return schema && 'shape' in schema\n      ? Object.keys((schema as { shape: Record<string, unknown> }).shape)\n      : [];\n  }\n\n  // Helper method for filtering valid params\n  protected filterValidParams(\n    params: Record<string, unknown>,\n    excludeKeys: string[] = [],\n  ): Record<string, unknown> {\n    const filtered: Record<string, unknown> = {};\n\n    Object.keys(params).forEach((key) => {\n      if (\n        !excludeKeys.includes(key) &&\n        params[key] !== undefined &&\n        params[key] !== null &&\n        params[key] !== ''\n      ) {\n        filtered[key] = params[key];\n      }\n    });\n\n    return filtered;\n  }\n\n  // Check if action needs structured parameters\n  protected actionNeedsStructuredParams(\n    action: DeviceAction<unknown>,\n  ): boolean {\n    if (\n      typeof action.paramSchema === 'object' &&\n      'shape' in action.paramSchema\n    ) {\n      const shape =\n        (action.paramSchema as { shape: Record<string, unknown> }).shape || {};\n      return Object.keys(shape).length > 0;\n    }\n    return true; // If paramSchema exists but not in expected format, assume it needs params\n  }\n\n  // Prepare parameters for validation by converting string locate fields\n  protected prepareParamsForValidation(\n    params: Record<string, unknown>,\n    action: DeviceAction<unknown>,\n  ): Record<string, unknown> {\n    const paramsForValidation = { ...params };\n\n    if (action.paramSchema) {\n      const locatorFieldKeys = findAllMidsceneLocatorField(action.paramSchema);\n      locatorFieldKeys.forEach((key: string) => {\n        if (typeof paramsForValidation[key] === 'string') {\n          paramsForValidation[key] = {\n            midscene_location_field_flag: true,\n            prompt: paramsForValidation[key],\n            center: [0, 0], // dummy values for validation\n            rect: { left: 0, top: 0, width: 0, height: 0 },\n          };\n        }\n      });\n    }\n\n    return paramsForValidation;\n  }\n\n  // Handle validation errors with proper error message extraction\n  protected handleValidationError(error: unknown): ValidationResult {\n    const zodError = error as {\n      errors?: Array<{ path: string[]; message: string }>;\n    };\n\n    if (zodError.errors && zodError.errors.length > 0) {\n      const errorMessages = zodError.errors\n        .filter((err) => {\n          const path = err.path.join('.');\n          return (\n            !path.includes('center') &&\n            !path.includes('rect') &&\n            !path.includes('midscene_location_field_flag')\n          );\n        })\n        .map((err) => {\n          const field = err.path.join('.');\n          return `${field}: ${err.message}`;\n        });\n\n      if (errorMessages.length > 0) {\n        return {\n          valid: false,\n          errorMessage: `Validation error: ${errorMessages.join(', ')}`,\n        };\n      }\n    }\n\n    const errorMsg =\n      error instanceof Error ? error.message : 'Unknown validation error';\n\n    return {\n      valid: false,\n      errorMessage: `Parameter validation failed: ${errorMsg}`,\n    };\n  }\n\n  // Build display list for parameters\n  protected buildParamsDisplayList(\n    params: Record<string, unknown>,\n    action: DeviceAction<unknown>,\n  ): string[] {\n    const paramsList: string[] = [];\n    const schema = action.paramSchema;\n\n    if (!(schema && 'shape' in schema)) {\n      return paramsList;\n    }\n\n    const locatorFieldKeys = findAllMidsceneLocatorField(schema);\n    const shapeKeys = Object.keys(\n      (schema as { shape: Record<string, unknown> }).shape,\n    );\n\n    shapeKeys.forEach((key) => {\n      const paramValue = params[key];\n      if (this.isValidParamValue(paramValue)) {\n        const displayKey = this.capitalizeFirstLetter(key);\n        const formattedValue = this.formatParamValue(\n          key,\n          paramValue,\n          locatorFieldKeys.includes(key),\n        );\n        paramsList.push(`${displayKey}: ${formattedValue}`);\n      }\n    });\n\n    return paramsList;\n  }\n\n  // Check if parameter value is valid for display\n  protected isValidParamValue(value: unknown): boolean {\n    return value !== undefined && value !== null && value !== '';\n  }\n\n  // Capitalize first letter of a string\n  protected capitalizeFirstLetter(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  // Format parameter value for display\n  protected formatParamValue(\n    key: string,\n    value: unknown,\n    isLocateField: boolean,\n  ): string {\n    if (isLocateField || typeof value === 'string') {\n      return `\"${value}\"`;\n    }\n\n    if (typeof value === 'number') {\n      // Special handling for distance in scroll\n      return key === 'distance' ? `${value}px` : `${value}`;\n    }\n\n    return `${value}`;\n  }\n}\n"],"names":["BasePlaygroundAdapter","_context","value","action","needsStructuredParams","paramsForValidation","error","paramsList","schema","Object","params","excludeKeys","filtered","key","undefined","shape","locatorFieldKeys","findAllMidsceneLocatorField","zodError","errorMessages","err","path","field","errorMsg","Error","shapeKeys","paramValue","displayKey","formattedValue","str","isLocateField"],"mappings":"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"}