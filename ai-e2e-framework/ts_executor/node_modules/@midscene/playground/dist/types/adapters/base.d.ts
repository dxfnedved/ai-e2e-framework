import type { DeviceAction } from '@midscene/core';
import type { ExecutionOptions, FormValue, ValidationResult } from '../types';
export declare abstract class BasePlaygroundAdapter {
    abstract parseStructuredParams(action: DeviceAction<unknown>, params: Record<string, unknown>, options: ExecutionOptions): Promise<unknown[]>;
    abstract formatErrorMessage(error: any): string;
    abstract executeAction(actionType: string, value: FormValue, options: ExecutionOptions): Promise<unknown>;
    getActionSpace(_context: any): Promise<DeviceAction<unknown>[]>;
    validateParams(value: FormValue, action: DeviceAction<unknown> | undefined): ValidationResult;
    createDisplayContent(value: FormValue, needsStructuredParams: boolean, action: DeviceAction<unknown> | undefined): string;
    protected formatBasicErrorMessage(error: any): string;
    protected getSchemaKeys(action: DeviceAction<unknown>): string[];
    protected filterValidParams(params: Record<string, unknown>, excludeKeys?: string[]): Record<string, unknown>;
    protected actionNeedsStructuredParams(action: DeviceAction<unknown>): boolean;
    protected prepareParamsForValidation(params: Record<string, unknown>, action: DeviceAction<unknown>): Record<string, unknown>;
    protected handleValidationError(error: unknown): ValidationResult;
    protected buildParamsDisplayList(params: Record<string, unknown>, action: DeviceAction<unknown>): string[];
    protected isValidParamValue(value: unknown): boolean;
    protected capitalizeFirstLetter(str: string): string;
    protected formatParamValue(key: string, value: unknown, isLocateField: boolean): string;
}
