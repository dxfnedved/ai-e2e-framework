{"version":3,"file":"static/js/async/290.dd04c2bc.js","sources":["webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/utils/env.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/singletons/fetch.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/utils/async_caller.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/utils/messages.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/utils/_uuid.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/utils/warn.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/utils/prompts.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/utils/error.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/utils/fast-safe-stringify/index.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/client.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/index.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/env.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/singletons/constants.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/run_trees.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/singletons/traceable.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/utils/asserts.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/traceable.js","webpack://playground/../../node_modules/.pnpm/langsmith@0.3.7_openai@4.81.0_ws@8.18.3_zod@3.24.3_/node_modules/langsmith/dist/wrappers/openai.js"],"sourcesContent":["// Inlined from https://github.com/flexdinesh/browser-or-node\nimport { __version__ } from \"../index.js\";\nlet globalEnv;\nexport const isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\nexport const isWebWorker = () => typeof globalThis === \"object\" &&\n    globalThis.constructor &&\n    globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nexport const isJsDom = () => (typeof window !== \"undefined\" && window.name === \"nodejs\") ||\n    (typeof navigator !== \"undefined\" &&\n        (navigator.userAgent.includes(\"Node.js\") ||\n            navigator.userAgent.includes(\"jsdom\")));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nexport const isDeno = () => typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nexport const isNode = () => typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\" &&\n    !isDeno();\nexport const getEnv = () => {\n    if (globalEnv) {\n        return globalEnv;\n    }\n    if (isBrowser()) {\n        globalEnv = \"browser\";\n    }\n    else if (isNode()) {\n        globalEnv = \"node\";\n    }\n    else if (isWebWorker()) {\n        globalEnv = \"webworker\";\n    }\n    else if (isJsDom()) {\n        globalEnv = \"jsdom\";\n    }\n    else if (isDeno()) {\n        globalEnv = \"deno\";\n    }\n    else {\n        globalEnv = \"other\";\n    }\n    return globalEnv;\n};\nlet runtimeEnvironment;\nexport function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        const releaseEnv = getShas();\n        runtimeEnvironment = {\n            library: \"langsmith\",\n            runtime: env,\n            sdk: \"langsmith-js\",\n            sdk_version: __version__,\n            ...releaseEnv,\n        };\n    }\n    return runtimeEnvironment;\n}\n/**\n * Retrieves the LangChain-specific environment variables from the current runtime environment.\n * Sensitive keys (containing the word \"key\", \"token\", or \"secret\") have their values redacted for security.\n *\n * @returns {Record<string, string>}\n *  - A record of LangChain-specific environment variables.\n */\nexport function getLangChainEnvVars() {\n    const allEnvVars = getEnvironmentVariables() || {};\n    const envVars = {};\n    for (const [key, value] of Object.entries(allEnvVars)) {\n        if (key.startsWith(\"LANGCHAIN_\") && typeof value === \"string\") {\n            envVars[key] = value;\n        }\n    }\n    for (const key in envVars) {\n        if ((key.toLowerCase().includes(\"key\") ||\n            key.toLowerCase().includes(\"secret\") ||\n            key.toLowerCase().includes(\"token\")) &&\n            typeof envVars[key] === \"string\") {\n            const value = envVars[key];\n            envVars[key] =\n                value.slice(0, 2) + \"*\".repeat(value.length - 4) + value.slice(-2);\n        }\n    }\n    return envVars;\n}\n/**\n * Retrieves the LangChain-specific metadata from the current runtime environment.\n *\n * @returns {Record<string, string>}\n *  - A record of LangChain-specific metadata environment variables.\n */\nexport function getLangChainEnvVarsMetadata() {\n    const allEnvVars = getEnvironmentVariables() || {};\n    const envVars = {};\n    const excluded = [\n        \"LANGCHAIN_API_KEY\",\n        \"LANGCHAIN_ENDPOINT\",\n        \"LANGCHAIN_TRACING_V2\",\n        \"LANGCHAIN_PROJECT\",\n        \"LANGCHAIN_SESSION\",\n        \"LANGSMITH_API_KEY\",\n        \"LANGSMITH_ENDPOINT\",\n        \"LANGSMITH_TRACING_V2\",\n        \"LANGSMITH_PROJECT\",\n        \"LANGSMITH_SESSION\",\n    ];\n    for (const [key, value] of Object.entries(allEnvVars)) {\n        if ((key.startsWith(\"LANGCHAIN_\") || key.startsWith(\"LANGSMITH_\")) &&\n            typeof value === \"string\" &&\n            !excluded.includes(key) &&\n            !key.toLowerCase().includes(\"key\") &&\n            !key.toLowerCase().includes(\"secret\") &&\n            !key.toLowerCase().includes(\"token\")) {\n            if (key === \"LANGCHAIN_REVISION_ID\") {\n                envVars[\"revision_id\"] = value;\n            }\n            else {\n                envVars[key] = value;\n            }\n        }\n    }\n    return envVars;\n}\n/**\n * Retrieves the environment variables from the current runtime environment.\n *\n * This function is designed to operate in a variety of JS environments,\n * including Node.js, Deno, browsers, etc.\n *\n * @returns {Record<string, string> | undefined}\n *  - A record of environment variables if available.\n *  - `undefined` if the environment does not support or allows access to environment variables.\n */\nexport function getEnvironmentVariables() {\n    try {\n        // Check for Node.js environment\n        // eslint-disable-next-line no-process-env\n        if (typeof process !== \"undefined\" && process.env) {\n            // eslint-disable-next-line no-process-env\n            return Object.entries(process.env).reduce((acc, [key, value]) => {\n                acc[key] = String(value);\n                return acc;\n            }, {});\n        }\n        // For browsers and other environments, we may not have direct access to env variables\n        // Return undefined or any other fallback as required.\n        return undefined;\n    }\n    catch (e) {\n        // Catch any errors that might occur while trying to access environment variables\n        return undefined;\n    }\n}\nexport function getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/hwchase17/langchainjs/issues/1412\n    try {\n        return typeof process !== \"undefined\"\n            ? // eslint-disable-next-line no-process-env\n                process.env?.[name]\n            : undefined;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\nexport function getLangSmithEnvironmentVariable(name) {\n    return (getEnvironmentVariable(`LANGSMITH_${name}`) ||\n        getEnvironmentVariable(`LANGCHAIN_${name}`));\n}\nexport function setEnvironmentVariable(name, value) {\n    if (typeof process !== \"undefined\") {\n        // eslint-disable-next-line no-process-env\n        process.env[name] = value;\n    }\n}\nlet cachedCommitSHAs;\n/**\n * Get the Git commit SHA from common environment variables\n * used by different CI/CD platforms.\n * @returns {string | undefined} The Git commit SHA or undefined if not found.\n */\nexport function getShas() {\n    if (cachedCommitSHAs !== undefined) {\n        return cachedCommitSHAs;\n    }\n    const common_release_envs = [\n        \"VERCEL_GIT_COMMIT_SHA\",\n        \"NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA\",\n        \"COMMIT_REF\",\n        \"RENDER_GIT_COMMIT\",\n        \"CI_COMMIT_SHA\",\n        \"CIRCLE_SHA1\",\n        \"CF_PAGES_COMMIT_SHA\",\n        \"REACT_APP_GIT_SHA\",\n        \"SOURCE_VERSION\",\n        \"GITHUB_SHA\",\n        \"TRAVIS_COMMIT\",\n        \"GIT_COMMIT\",\n        \"BUILD_VCS_NUMBER\",\n        \"bamboo_planRepository_revision\",\n        \"Build.SourceVersion\",\n        \"BITBUCKET_COMMIT\",\n        \"DRONE_COMMIT_SHA\",\n        \"SEMAPHORE_GIT_SHA\",\n        \"BUILDKITE_COMMIT\",\n    ];\n    const shas = {};\n    for (const env of common_release_envs) {\n        const envVar = getEnvironmentVariable(env);\n        if (envVar !== undefined) {\n            shas[env] = envVar;\n        }\n    }\n    cachedCommitSHAs = shas;\n    return shas;\n}\n","// Wrap the default fetch call due to issues with illegal invocations\n// in some environments:\n// https://stackoverflow.com/questions/69876859/why-does-bind-fix-failed-to-execute-fetch-on-window-illegal-invocation-err\n// @ts-expect-error Broad typing to support a range of fetch implementations\nconst DEFAULT_FETCH_IMPLEMENTATION = (...args) => fetch(...args);\nconst LANGSMITH_FETCH_IMPLEMENTATION_KEY = Symbol.for(\"ls:fetch_implementation\");\n/**\n * Overrides the fetch implementation used for LangSmith calls.\n * You should use this if you need to use an implementation of fetch\n * other than the default global (e.g. for dealing with proxies).\n * @param fetch The new fetch functino to use.\n */\nexport const overrideFetchImplementation = (fetch) => {\n    globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] = fetch;\n};\n/**\n * @internal\n */\nexport const _getFetchImplementation = () => {\n    return (globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] ??\n        DEFAULT_FETCH_IMPLEMENTATION);\n};\n","import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nimport { _getFetchImplementation } from \"../singletons/fetch.js\";\nconst STATUS_NO_RETRY = [\n    400, // Bad Request\n    401, // Unauthorized\n    403, // Forbidden\n    404, // Not Found\n    405, // Method Not Allowed\n    406, // Not Acceptable\n    407, // Proxy Authentication Required\n    408, // Request Timeout\n];\nconst STATUS_IGNORE = [\n    409, // Conflict\n];\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedResponseHook\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        if (\"default\" in PQueueMod) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new PQueueMod.default({\n                concurrency: this.maxConcurrency,\n            });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new PQueueMod({ concurrency: this.maxConcurrency });\n        }\n        this.onFailedResponseHook = params?.onFailedResponseHook;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        const onFailedResponseHook = this.onFailedResponseHook;\n        return this.queue.add(() => pRetry(() => callable(...args).catch((error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            async onFailedAttempt(error) {\n                if (error.message.startsWith(\"Cancel\") ||\n                    error.message.startsWith(\"TimeoutError\") ||\n                    error.message.startsWith(\"AbortError\")) {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (error?.code === \"ECONNABORTED\") {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const response = error?.response;\n                const status = response?.status;\n                if (status) {\n                    if (STATUS_NO_RETRY.includes(+status)) {\n                        throw error;\n                    }\n                    else if (STATUS_IGNORE.includes(+status)) {\n                        return;\n                    }\n                    if (onFailedResponseHook) {\n                        await onFailedResponseHook(response);\n                    }\n                }\n            },\n            // If needed we can change some of the defaults here,\n            // but they're quite sensible.\n            retries: this.maxRetries,\n            randomize: true,\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(() => _getFetchImplementation()(...args).then((res) => res.ok ? res : Promise.reject(res)));\n    }\n}\n","export function isLangChainMessage(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nmessage) {\n    return typeof message?._getType === \"function\";\n}\nexport function convertLangChainMessageToExample(message) {\n    const converted = {\n        type: message._getType(),\n        data: { content: message.content },\n    };\n    // Check for presence of keys in additional_kwargs\n    if (message?.additional_kwargs &&\n        Object.keys(message.additional_kwargs).length > 0) {\n        converted.data.additional_kwargs = { ...message.additional_kwargs };\n    }\n    return converted;\n}\n","import * as uuid from \"uuid\";\nexport function assertUuid(str, which) {\n    if (!uuid.validate(str)) {\n        const msg = which !== undefined\n            ? `Invalid UUID for ${which}: ${str}`\n            : `Invalid UUID: ${str}`;\n        throw new Error(msg);\n    }\n    return str;\n}\n","const warnedMessages = {};\nexport function warnOnce(message) {\n    if (!warnedMessages[message]) {\n        console.warn(message);\n        warnedMessages[message] = true;\n    }\n}\n","import { parse as parseVersion } from \"semver\";\nexport function isVersionGreaterOrEqual(current_version, target_version) {\n    const current = parseVersion(current_version);\n    const target = parseVersion(target_version);\n    if (!current || !target) {\n        throw new Error(\"Invalid version format.\");\n    }\n    return current.compare(target) >= 0;\n}\nexport function parsePromptIdentifier(identifier) {\n    if (!identifier ||\n        identifier.split(\"/\").length > 2 ||\n        identifier.startsWith(\"/\") ||\n        identifier.endsWith(\"/\") ||\n        identifier.split(\":\").length > 2) {\n        throw new Error(`Invalid identifier format: ${identifier}`);\n    }\n    const [ownerNamePart, commitPart] = identifier.split(\":\");\n    const commit = commitPart || \"latest\";\n    if (ownerNamePart.includes(\"/\")) {\n        const [owner, name] = ownerNamePart.split(\"/\", 2);\n        if (!owner || !name) {\n            throw new Error(`Invalid identifier format: ${identifier}`);\n        }\n        return [owner, name, commit];\n    }\n    else {\n        if (!ownerNamePart) {\n            throw new Error(`Invalid identifier format: ${identifier}`);\n        }\n        return [\"-\", ownerNamePart, commit];\n    }\n}\n","function getErrorStackTrace(e) {\n    if (typeof e !== \"object\" || e == null)\n        return undefined;\n    if (!(\"stack\" in e) || typeof e.stack !== \"string\")\n        return undefined;\n    let stack = e.stack;\n    const prevLine = `${e}`;\n    if (stack.startsWith(prevLine)) {\n        stack = stack.slice(prevLine.length);\n    }\n    if (stack.startsWith(\"\\n\")) {\n        stack = stack.slice(1);\n    }\n    return stack;\n}\nexport function printErrorStackTrace(e) {\n    const stack = getErrorStackTrace(e);\n    if (stack == null)\n        return;\n    console.error(stack);\n}\n/**\n * LangSmithConflictError\n *\n * Represents an error that occurs when there's a conflict during an operation,\n * typically corresponding to HTTP 409 status code responses.\n *\n * This error is thrown when an attempt to create or modify a resource conflicts\n * with the current state of the resource on the server. Common scenarios include:\n * - Attempting to create a resource that already exists\n * - Trying to update a resource that has been modified by another process\n * - Violating a uniqueness constraint in the data\n *\n * @extends Error\n *\n * @example\n * try {\n *   await createProject(\"existingProject\");\n * } catch (error) {\n *   if (error instanceof ConflictError) {\n *     console.log(\"A conflict occurred:\", error.message);\n *     // Handle the conflict, e.g., by suggesting a different project name\n *   } else {\n *     // Handle other types of errors\n *   }\n * }\n *\n * @property {string} name - Always set to 'ConflictError' for easy identification\n * @property {string} message - Detailed error message including server response\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409\n */\nexport class LangSmithConflictError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"LangSmithConflictError\";\n    }\n}\n/**\n * Throws an appropriate error based on the response status and body.\n *\n * @param response - The fetch Response object\n * @param context - Additional context to include in the error message (e.g., operation being performed)\n * @throws {LangSmithConflictError} When the response status is 409\n * @throws {Error} For all other non-ok responses\n */\nexport async function raiseForStatus(response, context, consume) {\n    // consume the response body to release the connection\n    // https://undici.nodejs.org/#/?id=garbage-collection\n    let errorBody;\n    if (response.ok) {\n        if (consume) {\n            errorBody = await response.text();\n        }\n        return;\n    }\n    errorBody = await response.text();\n    const fullMessage = `Failed to ${context}. Received status [${response.status}]: ${response.statusText}. Server response: ${errorBody}`;\n    if (response.status === 409) {\n        throw new LangSmithConflictError(fullMessage);\n    }\n    throw new Error(fullMessage);\n}\n","/* eslint-disable */\n// @ts-nocheck\nvar LIMIT_REPLACE_NODE = \"[...]\";\nvar CIRCULAR_REPLACE_NODE = { result: \"[Circular]\" };\nvar arr = [];\nvar replacerStack = [];\nconst encoder = new TextEncoder();\nfunction defaultOptions() {\n    return {\n        depthLimit: Number.MAX_SAFE_INTEGER,\n        edgesLimit: Number.MAX_SAFE_INTEGER,\n    };\n}\nfunction encodeString(str) {\n    return encoder.encode(str);\n}\n// Regular stringify\nexport function serialize(obj, replacer, spacer, options) {\n    try {\n        const str = JSON.stringify(obj, replacer, spacer);\n        return encodeString(str);\n    }\n    catch (e) {\n        // Fall back to more complex stringify if circular reference\n        if (!e.message?.includes(\"Converting circular structure to JSON\")) {\n            console.warn(\"[WARNING]: LangSmith received unserializable value.\");\n            return encodeString(\"[Unserializable]\");\n        }\n        console.warn(\"[WARNING]: LangSmith received circular JSON. This will decrease tracer performance.\");\n        if (typeof options === \"undefined\") {\n            options = defaultOptions();\n        }\n        decirc(obj, \"\", 0, [], undefined, 0, options);\n        let res;\n        try {\n            if (replacerStack.length === 0) {\n                res = JSON.stringify(obj, replacer, spacer);\n            }\n            else {\n                res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);\n            }\n        }\n        catch (_) {\n            return encodeString(\"[unable to serialize, circular reference is too complex to analyze]\");\n        }\n        finally {\n            while (arr.length !== 0) {\n                const part = arr.pop();\n                if (part.length === 4) {\n                    Object.defineProperty(part[0], part[1], part[3]);\n                }\n                else {\n                    part[0][part[1]] = part[2];\n                }\n            }\n        }\n        return encodeString(res);\n    }\n}\nfunction setReplace(replace, val, k, parent) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);\n    if (propertyDescriptor.get !== undefined) {\n        if (propertyDescriptor.configurable) {\n            Object.defineProperty(parent, k, { value: replace });\n            arr.push([parent, k, val, propertyDescriptor]);\n        }\n        else {\n            replacerStack.push([val, k, replace]);\n        }\n    }\n    else {\n        parent[k] = replace;\n        arr.push([parent, k, val]);\n    }\n}\nfunction decirc(val, k, edgeIndex, stack, parent, depth, options) {\n    depth += 1;\n    var i;\n    if (typeof val === \"object\" && val !== null) {\n        for (i = 0; i < stack.length; i++) {\n            if (stack[i] === val) {\n                setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);\n                return;\n            }\n        }\n        if (typeof options.depthLimit !== \"undefined\" &&\n            depth > options.depthLimit) {\n            setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n            return;\n        }\n        if (typeof options.edgesLimit !== \"undefined\" &&\n            edgeIndex + 1 > options.edgesLimit) {\n            setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n            return;\n        }\n        stack.push(val);\n        // Optimize for Arrays. Big arrays could kill the performance otherwise!\n        if (Array.isArray(val)) {\n            for (i = 0; i < val.length; i++) {\n                decirc(val[i], i, i, stack, val, depth, options);\n            }\n        }\n        else {\n            var keys = Object.keys(val);\n            for (i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                decirc(val[key], key, i, stack, val, depth, options);\n            }\n        }\n        stack.pop();\n    }\n}\n// Stable-stringify\nfunction compareFunction(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nfunction deterministicStringify(obj, replacer, spacer, options) {\n    if (typeof options === \"undefined\") {\n        options = defaultOptions();\n    }\n    var tmp = deterministicDecirc(obj, \"\", 0, [], undefined, 0, options) || obj;\n    var res;\n    try {\n        if (replacerStack.length === 0) {\n            res = JSON.stringify(tmp, replacer, spacer);\n        }\n        else {\n            res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);\n        }\n    }\n    catch (_) {\n        return JSON.stringify(\"[unable to serialize, circular reference is too complex to analyze]\");\n    }\n    finally {\n        // Ensure that we restore the object as it was.\n        while (arr.length !== 0) {\n            var part = arr.pop();\n            if (part.length === 4) {\n                Object.defineProperty(part[0], part[1], part[3]);\n            }\n            else {\n                part[0][part[1]] = part[2];\n            }\n        }\n    }\n    return res;\n}\nfunction deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {\n    depth += 1;\n    var i;\n    if (typeof val === \"object\" && val !== null) {\n        for (i = 0; i < stack.length; i++) {\n            if (stack[i] === val) {\n                setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);\n                return;\n            }\n        }\n        try {\n            if (typeof val.toJSON === \"function\") {\n                return;\n            }\n        }\n        catch (_) {\n            return;\n        }\n        if (typeof options.depthLimit !== \"undefined\" &&\n            depth > options.depthLimit) {\n            setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n            return;\n        }\n        if (typeof options.edgesLimit !== \"undefined\" &&\n            edgeIndex + 1 > options.edgesLimit) {\n            setReplace(LIMIT_REPLACE_NODE, val, k, parent);\n            return;\n        }\n        stack.push(val);\n        // Optimize for Arrays. Big arrays could kill the performance otherwise!\n        if (Array.isArray(val)) {\n            for (i = 0; i < val.length; i++) {\n                deterministicDecirc(val[i], i, i, stack, val, depth, options);\n            }\n        }\n        else {\n            // Create a temporary object in the required way\n            var tmp = {};\n            var keys = Object.keys(val).sort(compareFunction);\n            for (i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                deterministicDecirc(val[key], key, i, stack, val, depth, options);\n                tmp[key] = val[key];\n            }\n            if (typeof parent !== \"undefined\") {\n                arr.push([parent, k, val]);\n                parent[k] = tmp;\n            }\n            else {\n                return tmp;\n            }\n        }\n        stack.pop();\n    }\n}\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues(replacer) {\n    replacer =\n        typeof replacer !== \"undefined\"\n            ? replacer\n            : function (k, v) {\n                return v;\n            };\n    return function (key, val) {\n        if (replacerStack.length > 0) {\n            for (var i = 0; i < replacerStack.length; i++) {\n                var part = replacerStack[i];\n                if (part[1] === key && part[0] === val) {\n                    val = part[2];\n                    replacerStack.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        return replacer.call(this, key, val);\n    };\n}\n","import * as uuid from \"uuid\";\nimport { AsyncCaller } from \"./utils/async_caller.js\";\nimport { convertLangChainMessageToExample, isLangChainMessage, } from \"./utils/messages.js\";\nimport { getEnvironmentVariable, getLangChainEnvVarsMetadata, getLangSmithEnvironmentVariable, getRuntimeEnvironment, } from \"./utils/env.js\";\nimport { __version__ } from \"./index.js\";\nimport { assertUuid } from \"./utils/_uuid.js\";\nimport { warnOnce } from \"./utils/warn.js\";\nimport { parsePromptIdentifier } from \"./utils/prompts.js\";\nimport { raiseForStatus } from \"./utils/error.js\";\nimport { _getFetchImplementation } from \"./singletons/fetch.js\";\nimport { serialize as serializePayloadForTracing } from \"./utils/fast-safe-stringify/index.js\";\nexport function mergeRuntimeEnvIntoRunCreate(run) {\n    const runtimeEnv = getRuntimeEnvironment();\n    const envVars = getLangChainEnvVarsMetadata();\n    const extra = run.extra ?? {};\n    const metadata = extra.metadata;\n    run.extra = {\n        ...extra,\n        runtime: {\n            ...runtimeEnv,\n            ...extra?.runtime,\n        },\n        metadata: {\n            ...envVars,\n            ...(envVars.revision_id || run.revision_id\n                ? { revision_id: run.revision_id ?? envVars.revision_id }\n                : {}),\n            ...metadata,\n        },\n    };\n    return run;\n}\nconst getTracingSamplingRate = () => {\n    const samplingRateStr = getLangSmithEnvironmentVariable(\"TRACING_SAMPLING_RATE\");\n    if (samplingRateStr === undefined) {\n        return undefined;\n    }\n    const samplingRate = parseFloat(samplingRateStr);\n    if (samplingRate < 0 || samplingRate > 1) {\n        throw new Error(`LANGSMITH_TRACING_SAMPLING_RATE must be between 0 and 1 if set. Got: ${samplingRate}`);\n    }\n    return samplingRate;\n};\n// utility functions\nconst isLocalhost = (url) => {\n    const strippedUrl = url.replace(\"http://\", \"\").replace(\"https://\", \"\");\n    const hostname = strippedUrl.split(\"/\")[0].split(\":\")[0];\n    return (hostname === \"localhost\" || hostname === \"127.0.0.1\" || hostname === \"::1\");\n};\nasync function toArray(iterable) {\n    const result = [];\n    for await (const item of iterable) {\n        result.push(item);\n    }\n    return result;\n}\nfunction trimQuotes(str) {\n    if (str === undefined) {\n        return undefined;\n    }\n    return str\n        .trim()\n        .replace(/^\"(.*)\"$/, \"$1\")\n        .replace(/^'(.*)'$/, \"$1\");\n}\nconst handle429 = async (response) => {\n    if (response?.status === 429) {\n        const retryAfter = parseInt(response.headers.get(\"retry-after\") ?? \"30\", 10) * 1000;\n        if (retryAfter > 0) {\n            await new Promise((resolve) => setTimeout(resolve, retryAfter));\n            // Return directly after calling this check\n            return true;\n        }\n    }\n    // Fall back to existing status checks\n    return false;\n};\nexport class AutoBatchQueue {\n    constructor() {\n        Object.defineProperty(this, \"items\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"sizeBytes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n    peek() {\n        return this.items[0];\n    }\n    push(item) {\n        let itemPromiseResolve;\n        const itemPromise = new Promise((resolve) => {\n            // Setting itemPromiseResolve is synchronous with promise creation:\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise\n            itemPromiseResolve = resolve;\n        });\n        const size = serializePayloadForTracing(item.item).length;\n        this.items.push({\n            action: item.action,\n            payload: item.item,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            itemPromiseResolve: itemPromiseResolve,\n            itemPromise,\n            size,\n        });\n        this.sizeBytes += size;\n        return itemPromise;\n    }\n    pop(upToSizeBytes) {\n        if (upToSizeBytes < 1) {\n            throw new Error(\"Number of bytes to pop off may not be less than 1.\");\n        }\n        const popped = [];\n        let poppedSizeBytes = 0;\n        // Pop items until we reach or exceed the size limit\n        while (poppedSizeBytes + (this.peek()?.size ?? 0) < upToSizeBytes &&\n            this.items.length > 0) {\n            const item = this.items.shift();\n            if (item) {\n                popped.push(item);\n                poppedSizeBytes += item.size;\n                this.sizeBytes -= item.size;\n            }\n        }\n        // If there is an item on the queue we were unable to pop,\n        // just return it as a single batch.\n        if (popped.length === 0 && this.items.length > 0) {\n            const item = this.items.shift();\n            popped.push(item);\n            poppedSizeBytes += item.size;\n            this.sizeBytes -= item.size;\n        }\n        return [\n            popped.map((it) => ({ action: it.action, item: it.payload })),\n            () => popped.forEach((it) => it.itemPromiseResolve()),\n        ];\n    }\n}\n// 20 MB\nexport const DEFAULT_BATCH_SIZE_LIMIT_BYTES = 20_971_520;\nconst SERVER_INFO_REQUEST_TIMEOUT = 2500;\nexport class Client {\n    constructor(config = {}) {\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"webUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchIngestCaller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout_ms\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_tenantId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"hideInputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"hideOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tracingSampleRate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filteredPostUuids\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Set()\n        });\n        Object.defineProperty(this, \"autoBatchTracing\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"autoBatchQueue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new AutoBatchQueue()\n        });\n        Object.defineProperty(this, \"autoBatchTimeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"autoBatchAggregationDelayMs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 250\n        });\n        Object.defineProperty(this, \"batchSizeBytesLimit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fetchOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"settings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"blockOnRootRunFinalization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: getEnvironmentVariable(\"LANGSMITH_TRACING_BACKGROUND\") === \"false\"\n        });\n        Object.defineProperty(this, \"traceBatchConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5\n        });\n        Object.defineProperty(this, \"_serverInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"_getServerInfoPromise\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"manualFlushMode\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        const defaultConfig = Client.getDefaultClientConfig();\n        this.tracingSampleRate = getTracingSamplingRate();\n        this.apiUrl = trimQuotes(config.apiUrl ?? defaultConfig.apiUrl) ?? \"\";\n        if (this.apiUrl.endsWith(\"/\")) {\n            this.apiUrl = this.apiUrl.slice(0, -1);\n        }\n        this.apiKey = trimQuotes(config.apiKey ?? defaultConfig.apiKey);\n        this.webUrl = trimQuotes(config.webUrl ?? defaultConfig.webUrl);\n        if (this.webUrl?.endsWith(\"/\")) {\n            this.webUrl = this.webUrl.slice(0, -1);\n        }\n        this.timeout_ms = config.timeout_ms ?? 90_000;\n        this.caller = new AsyncCaller(config.callerOptions ?? {});\n        this.traceBatchConcurrency =\n            config.traceBatchConcurrency ?? this.traceBatchConcurrency;\n        if (this.traceBatchConcurrency < 1) {\n            throw new Error(\"Trace batch concurrency must be positive.\");\n        }\n        this.batchIngestCaller = new AsyncCaller({\n            maxRetries: 2,\n            maxConcurrency: this.traceBatchConcurrency,\n            ...(config.callerOptions ?? {}),\n            onFailedResponseHook: handle429,\n        });\n        this.hideInputs =\n            config.hideInputs ?? config.anonymizer ?? defaultConfig.hideInputs;\n        this.hideOutputs =\n            config.hideOutputs ?? config.anonymizer ?? defaultConfig.hideOutputs;\n        this.autoBatchTracing = config.autoBatchTracing ?? this.autoBatchTracing;\n        this.blockOnRootRunFinalization =\n            config.blockOnRootRunFinalization ?? this.blockOnRootRunFinalization;\n        this.batchSizeBytesLimit = config.batchSizeBytesLimit;\n        this.fetchOptions = config.fetchOptions || {};\n        this.manualFlushMode = config.manualFlushMode ?? this.manualFlushMode;\n    }\n    static getDefaultClientConfig() {\n        const apiKey = getLangSmithEnvironmentVariable(\"API_KEY\");\n        const apiUrl = getLangSmithEnvironmentVariable(\"ENDPOINT\") ??\n            \"https://api.smith.langchain.com\";\n        const hideInputs = getLangSmithEnvironmentVariable(\"HIDE_INPUTS\") === \"true\";\n        const hideOutputs = getLangSmithEnvironmentVariable(\"HIDE_OUTPUTS\") === \"true\";\n        return {\n            apiUrl: apiUrl,\n            apiKey: apiKey,\n            webUrl: undefined,\n            hideInputs: hideInputs,\n            hideOutputs: hideOutputs,\n        };\n    }\n    getHostUrl() {\n        if (this.webUrl) {\n            return this.webUrl;\n        }\n        else if (isLocalhost(this.apiUrl)) {\n            this.webUrl = \"http://localhost:3000\";\n            return this.webUrl;\n        }\n        else if (this.apiUrl.endsWith(\"/api/v1\")) {\n            this.webUrl = this.apiUrl.replace(\"/api/v1\", \"\");\n            return this.webUrl;\n        }\n        else if (this.apiUrl.includes(\"/api\") &&\n            !this.apiUrl.split(\".\", 1)[0].endsWith(\"api\")) {\n            this.webUrl = this.apiUrl.replace(\"/api\", \"\");\n            return this.webUrl;\n        }\n        else if (this.apiUrl.split(\".\", 1)[0].includes(\"dev\")) {\n            this.webUrl = \"https://dev.smith.langchain.com\";\n            return this.webUrl;\n        }\n        else if (this.apiUrl.split(\".\", 1)[0].includes(\"eu\")) {\n            this.webUrl = \"https://eu.smith.langchain.com\";\n            return this.webUrl;\n        }\n        else if (this.apiUrl.split(\".\", 1)[0].includes(\"beta\")) {\n            this.webUrl = \"https://beta.smith.langchain.com\";\n            return this.webUrl;\n        }\n        else {\n            this.webUrl = \"https://smith.langchain.com\";\n            return this.webUrl;\n        }\n    }\n    get headers() {\n        const headers = {\n            \"User-Agent\": `langsmith-js/${__version__}`,\n        };\n        if (this.apiKey) {\n            headers[\"x-api-key\"] = `${this.apiKey}`;\n        }\n        return headers;\n    }\n    processInputs(inputs) {\n        if (this.hideInputs === false) {\n            return inputs;\n        }\n        if (this.hideInputs === true) {\n            return {};\n        }\n        if (typeof this.hideInputs === \"function\") {\n            return this.hideInputs(inputs);\n        }\n        return inputs;\n    }\n    processOutputs(outputs) {\n        if (this.hideOutputs === false) {\n            return outputs;\n        }\n        if (this.hideOutputs === true) {\n            return {};\n        }\n        if (typeof this.hideOutputs === \"function\") {\n            return this.hideOutputs(outputs);\n        }\n        return outputs;\n    }\n    prepareRunCreateOrUpdateInputs(run) {\n        const runParams = { ...run };\n        if (runParams.inputs !== undefined) {\n            runParams.inputs = this.processInputs(runParams.inputs);\n        }\n        if (runParams.outputs !== undefined) {\n            runParams.outputs = this.processOutputs(runParams.outputs);\n        }\n        return runParams;\n    }\n    async _getResponse(path, queryParams) {\n        const paramsString = queryParams?.toString() ?? \"\";\n        const url = `${this.apiUrl}${path}?${paramsString}`;\n        const response = await this.caller.call(_getFetchImplementation(), url, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `Failed to fetch ${path}`);\n        return response;\n    }\n    async _get(path, queryParams) {\n        const response = await this._getResponse(path, queryParams);\n        return response.json();\n    }\n    async *_getPaginated(path, queryParams = new URLSearchParams(), transform) {\n        let offset = Number(queryParams.get(\"offset\")) || 0;\n        const limit = Number(queryParams.get(\"limit\")) || 100;\n        while (true) {\n            queryParams.set(\"offset\", String(offset));\n            queryParams.set(\"limit\", String(limit));\n            const url = `${this.apiUrl}${path}?${queryParams}`;\n            const response = await this.caller.call(_getFetchImplementation(), url, {\n                method: \"GET\",\n                headers: this.headers,\n                signal: AbortSignal.timeout(this.timeout_ms),\n                ...this.fetchOptions,\n            });\n            await raiseForStatus(response, `Failed to fetch ${path}`);\n            const items = transform\n                ? transform(await response.json())\n                : await response.json();\n            if (items.length === 0) {\n                break;\n            }\n            yield items;\n            if (items.length < limit) {\n                break;\n            }\n            offset += items.length;\n        }\n    }\n    async *_getCursorPaginatedList(path, body = null, requestMethod = \"POST\", dataKey = \"runs\") {\n        const bodyParams = body ? { ...body } : {};\n        while (true) {\n            const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${path}`, {\n                method: requestMethod,\n                headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n                signal: AbortSignal.timeout(this.timeout_ms),\n                ...this.fetchOptions,\n                body: JSON.stringify(bodyParams),\n            });\n            const responseBody = await response.json();\n            if (!responseBody) {\n                break;\n            }\n            if (!responseBody[dataKey]) {\n                break;\n            }\n            yield responseBody[dataKey];\n            const cursors = responseBody.cursors;\n            if (!cursors) {\n                break;\n            }\n            if (!cursors.next) {\n                break;\n            }\n            bodyParams.cursor = cursors.next;\n        }\n    }\n    _filterForSampling(runs, patch = false) {\n        if (this.tracingSampleRate === undefined) {\n            return runs;\n        }\n        if (patch) {\n            const sampled = [];\n            for (const run of runs) {\n                if (!this.filteredPostUuids.has(run.id)) {\n                    sampled.push(run);\n                }\n                else {\n                    this.filteredPostUuids.delete(run.id);\n                }\n            }\n            return sampled;\n        }\n        else {\n            const sampled = [];\n            for (const run of runs) {\n                if ((run.id !== run.trace_id &&\n                    !this.filteredPostUuids.has(run.trace_id)) ||\n                    Math.random() < this.tracingSampleRate) {\n                    sampled.push(run);\n                }\n                else {\n                    this.filteredPostUuids.add(run.id);\n                }\n            }\n            return sampled;\n        }\n    }\n    async _getBatchSizeLimitBytes() {\n        const serverInfo = await this._ensureServerInfo();\n        return (this.batchSizeBytesLimit ??\n            serverInfo.batch_ingest_config?.size_limit_bytes ??\n            DEFAULT_BATCH_SIZE_LIMIT_BYTES);\n    }\n    async _getMultiPartSupport() {\n        const serverInfo = await this._ensureServerInfo();\n        return (serverInfo.instance_flags?.dataset_examples_multipart_enabled ?? false);\n    }\n    drainAutoBatchQueue(batchSizeLimit) {\n        const promises = [];\n        while (this.autoBatchQueue.items.length > 0) {\n            const [batch, done] = this.autoBatchQueue.pop(batchSizeLimit);\n            if (!batch.length) {\n                done();\n                break;\n            }\n            const batchPromise = this._processBatch(batch, done).catch(console.error);\n            promises.push(batchPromise);\n        }\n        return Promise.all(promises);\n    }\n    async _processBatch(batch, done) {\n        if (!batch.length) {\n            done();\n            return;\n        }\n        try {\n            const ingestParams = {\n                runCreates: batch\n                    .filter((item) => item.action === \"create\")\n                    .map((item) => item.item),\n                runUpdates: batch\n                    .filter((item) => item.action === \"update\")\n                    .map((item) => item.item),\n            };\n            const serverInfo = await this._ensureServerInfo();\n            if (serverInfo?.batch_ingest_config?.use_multipart_endpoint) {\n                await this.multipartIngestRuns(ingestParams);\n            }\n            else {\n                await this.batchIngestRuns(ingestParams);\n            }\n        }\n        finally {\n            done();\n        }\n    }\n    async processRunOperation(item) {\n        clearTimeout(this.autoBatchTimeout);\n        this.autoBatchTimeout = undefined;\n        if (item.action === \"create\") {\n            item.item = mergeRuntimeEnvIntoRunCreate(item.item);\n        }\n        const itemPromise = this.autoBatchQueue.push(item);\n        if (this.manualFlushMode) {\n            // Rely on manual flushing in serverless environments\n            return itemPromise;\n        }\n        const sizeLimitBytes = await this._getBatchSizeLimitBytes();\n        if (this.autoBatchQueue.sizeBytes > sizeLimitBytes) {\n            void this.drainAutoBatchQueue(sizeLimitBytes);\n        }\n        if (this.autoBatchQueue.items.length > 0) {\n            this.autoBatchTimeout = setTimeout(() => {\n                this.autoBatchTimeout = undefined;\n                void this.drainAutoBatchQueue(sizeLimitBytes);\n            }, this.autoBatchAggregationDelayMs);\n        }\n        return itemPromise;\n    }\n    async _getServerInfo() {\n        const response = await _getFetchImplementation()(`${this.apiUrl}/info`, {\n            method: \"GET\",\n            headers: { Accept: \"application/json\" },\n            signal: AbortSignal.timeout(SERVER_INFO_REQUEST_TIMEOUT),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"get server info\");\n        return response.json();\n    }\n    async _ensureServerInfo() {\n        if (this._getServerInfoPromise === undefined) {\n            this._getServerInfoPromise = (async () => {\n                if (this._serverInfo === undefined) {\n                    try {\n                        this._serverInfo = await this._getServerInfo();\n                    }\n                    catch (e) {\n                        console.warn(`[WARNING]: LangSmith failed to fetch info on supported operations. Falling back to batch operations and default limits.`);\n                    }\n                }\n                return this._serverInfo ?? {};\n            })();\n        }\n        return this._getServerInfoPromise.then((serverInfo) => {\n            if (this._serverInfo === undefined) {\n                this._getServerInfoPromise = undefined;\n            }\n            return serverInfo;\n        });\n    }\n    async _getSettings() {\n        if (!this.settings) {\n            this.settings = this._get(\"/settings\");\n        }\n        return await this.settings;\n    }\n    /**\n     * Flushes current queued traces.\n     */\n    async flush() {\n        const sizeLimitBytes = await this._getBatchSizeLimitBytes();\n        await this.drainAutoBatchQueue(sizeLimitBytes);\n    }\n    async createRun(run) {\n        if (!this._filterForSampling([run]).length) {\n            return;\n        }\n        const headers = { ...this.headers, \"Content-Type\": \"application/json\" };\n        const session_name = run.project_name;\n        delete run.project_name;\n        const runCreate = this.prepareRunCreateOrUpdateInputs({\n            session_name,\n            ...run,\n            start_time: run.start_time ?? Date.now(),\n        });\n        if (this.autoBatchTracing &&\n            runCreate.trace_id !== undefined &&\n            runCreate.dotted_order !== undefined) {\n            void this.processRunOperation({\n                action: \"create\",\n                item: runCreate,\n            }).catch(console.error);\n            return;\n        }\n        const mergedRunCreateParam = mergeRuntimeEnvIntoRunCreate(runCreate);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs`, {\n            method: \"POST\",\n            headers,\n            body: serializePayloadForTracing(mergedRunCreateParam),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create run\", true);\n    }\n    /**\n     * Batch ingest/upsert multiple runs in the Langsmith system.\n     * @param runs\n     */\n    async batchIngestRuns({ runCreates, runUpdates, }) {\n        if (runCreates === undefined && runUpdates === undefined) {\n            return;\n        }\n        let preparedCreateParams = runCreates?.map((create) => this.prepareRunCreateOrUpdateInputs(create)) ?? [];\n        let preparedUpdateParams = runUpdates?.map((update) => this.prepareRunCreateOrUpdateInputs(update)) ?? [];\n        if (preparedCreateParams.length > 0 && preparedUpdateParams.length > 0) {\n            const createById = preparedCreateParams.reduce((params, run) => {\n                if (!run.id) {\n                    return params;\n                }\n                params[run.id] = run;\n                return params;\n            }, {});\n            const standaloneUpdates = [];\n            for (const updateParam of preparedUpdateParams) {\n                if (updateParam.id !== undefined && createById[updateParam.id]) {\n                    createById[updateParam.id] = {\n                        ...createById[updateParam.id],\n                        ...updateParam,\n                    };\n                }\n                else {\n                    standaloneUpdates.push(updateParam);\n                }\n            }\n            preparedCreateParams = Object.values(createById);\n            preparedUpdateParams = standaloneUpdates;\n        }\n        const rawBatch = {\n            post: this._filterForSampling(preparedCreateParams),\n            patch: this._filterForSampling(preparedUpdateParams, true),\n        };\n        if (!rawBatch.post.length && !rawBatch.patch.length) {\n            return;\n        }\n        const batchChunks = {\n            post: [],\n            patch: [],\n        };\n        for (const k of [\"post\", \"patch\"]) {\n            const key = k;\n            const batchItems = rawBatch[key].reverse();\n            let batchItem = batchItems.pop();\n            while (batchItem !== undefined) {\n                batchChunks[key].push(batchItem);\n                batchItem = batchItems.pop();\n            }\n        }\n        if (batchChunks.post.length > 0 || batchChunks.patch.length > 0) {\n            await this._postBatchIngestRuns(serializePayloadForTracing(batchChunks));\n        }\n    }\n    async _postBatchIngestRuns(body) {\n        const headers = {\n            ...this.headers,\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        };\n        const response = await this.batchIngestCaller.call(_getFetchImplementation(), `${this.apiUrl}/runs/batch`, {\n            method: \"POST\",\n            headers,\n            body: body,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"batch create run\", true);\n    }\n    /**\n     * Batch ingest/upsert multiple runs in the Langsmith system.\n     * @param runs\n     */\n    async multipartIngestRuns({ runCreates, runUpdates, }) {\n        if (runCreates === undefined && runUpdates === undefined) {\n            return;\n        }\n        // transform and convert to dicts\n        const allAttachments = {};\n        let preparedCreateParams = [];\n        for (const create of runCreates ?? []) {\n            const preparedCreate = this.prepareRunCreateOrUpdateInputs(create);\n            if (preparedCreate.id !== undefined &&\n                preparedCreate.attachments !== undefined) {\n                allAttachments[preparedCreate.id] = preparedCreate.attachments;\n            }\n            delete preparedCreate.attachments;\n            preparedCreateParams.push(preparedCreate);\n        }\n        let preparedUpdateParams = [];\n        for (const update of runUpdates ?? []) {\n            preparedUpdateParams.push(this.prepareRunCreateOrUpdateInputs(update));\n        }\n        // require trace_id and dotted_order\n        const invalidRunCreate = preparedCreateParams.find((runCreate) => {\n            return (runCreate.trace_id === undefined || runCreate.dotted_order === undefined);\n        });\n        if (invalidRunCreate !== undefined) {\n            throw new Error(`Multipart ingest requires \"trace_id\" and \"dotted_order\" to be set when creating a run`);\n        }\n        const invalidRunUpdate = preparedUpdateParams.find((runUpdate) => {\n            return (runUpdate.trace_id === undefined || runUpdate.dotted_order === undefined);\n        });\n        if (invalidRunUpdate !== undefined) {\n            throw new Error(`Multipart ingest requires \"trace_id\" and \"dotted_order\" to be set when updating a run`);\n        }\n        // combine post and patch dicts where possible\n        if (preparedCreateParams.length > 0 && preparedUpdateParams.length > 0) {\n            const createById = preparedCreateParams.reduce((params, run) => {\n                if (!run.id) {\n                    return params;\n                }\n                params[run.id] = run;\n                return params;\n            }, {});\n            const standaloneUpdates = [];\n            for (const updateParam of preparedUpdateParams) {\n                if (updateParam.id !== undefined && createById[updateParam.id]) {\n                    createById[updateParam.id] = {\n                        ...createById[updateParam.id],\n                        ...updateParam,\n                    };\n                }\n                else {\n                    standaloneUpdates.push(updateParam);\n                }\n            }\n            preparedCreateParams = Object.values(createById);\n            preparedUpdateParams = standaloneUpdates;\n        }\n        if (preparedCreateParams.length === 0 &&\n            preparedUpdateParams.length === 0) {\n            return;\n        }\n        // send the runs in multipart requests\n        const accumulatedContext = [];\n        const accumulatedParts = [];\n        for (const [method, payloads] of [\n            [\"post\", preparedCreateParams],\n            [\"patch\", preparedUpdateParams],\n        ]) {\n            for (const originalPayload of payloads) {\n                // collect fields to be sent as separate parts\n                const { inputs, outputs, events, attachments, ...payload } = originalPayload;\n                const fields = { inputs, outputs, events };\n                // encode the main run payload\n                const stringifiedPayload = serializePayloadForTracing(payload);\n                accumulatedParts.push({\n                    name: `${method}.${payload.id}`,\n                    payload: new Blob([stringifiedPayload], {\n                        type: `application/json; length=${stringifiedPayload.length}`, // encoding=gzip\n                    }),\n                });\n                // encode the fields we collected\n                for (const [key, value] of Object.entries(fields)) {\n                    if (value === undefined) {\n                        continue;\n                    }\n                    const stringifiedValue = serializePayloadForTracing(value);\n                    accumulatedParts.push({\n                        name: `${method}.${payload.id}.${key}`,\n                        payload: new Blob([stringifiedValue], {\n                            type: `application/json; length=${stringifiedValue.length}`,\n                        }),\n                    });\n                }\n                // encode the attachments\n                if (payload.id !== undefined) {\n                    const attachments = allAttachments[payload.id];\n                    if (attachments) {\n                        delete allAttachments[payload.id];\n                        for (const [name, attachment] of Object.entries(attachments)) {\n                            let contentType;\n                            let content;\n                            if (Array.isArray(attachment)) {\n                                [contentType, content] = attachment;\n                            }\n                            else {\n                                contentType = attachment.mimeType;\n                                content = attachment.data;\n                            }\n                            // Validate that the attachment name doesn't contain a '.'\n                            if (name.includes(\".\")) {\n                                console.warn(`Skipping attachment '${name}' for run ${payload.id}: Invalid attachment name. ` +\n                                    `Attachment names must not contain periods ('.'). Please rename the attachment and try again.`);\n                                continue;\n                            }\n                            accumulatedParts.push({\n                                name: `attachment.${payload.id}.${name}`,\n                                payload: new Blob([content], {\n                                    type: `${contentType}; length=${content.byteLength}`,\n                                }),\n                            });\n                        }\n                    }\n                }\n                // compute context\n                accumulatedContext.push(`trace=${payload.trace_id},id=${payload.id}`);\n            }\n        }\n        await this._sendMultipartRequest(accumulatedParts, accumulatedContext.join(\"; \"));\n    }\n    async _sendMultipartRequest(parts, context) {\n        try {\n            // Create multipart form data manually using Blobs\n            const boundary = \"----LangSmithFormBoundary\" + Math.random().toString(36).slice(2);\n            const chunks = [];\n            for (const part of parts) {\n                // Add field boundary\n                chunks.push(new Blob([`--${boundary}\\r\\n`]));\n                chunks.push(new Blob([\n                    `Content-Disposition: form-data; name=\"${part.name}\"\\r\\n`,\n                    `Content-Type: ${part.payload.type}\\r\\n\\r\\n`,\n                ]));\n                chunks.push(part.payload);\n                chunks.push(new Blob([\"\\r\\n\"]));\n            }\n            // Add final boundary\n            chunks.push(new Blob([`--${boundary}--\\r\\n`]));\n            // Combine all chunks into a single Blob\n            const body = new Blob(chunks);\n            // Convert Blob to ArrayBuffer for compatibility\n            const arrayBuffer = await body.arrayBuffer();\n            const res = await this.batchIngestCaller.call(_getFetchImplementation(), `${this.apiUrl}/runs/multipart`, {\n                method: \"POST\",\n                headers: {\n                    ...this.headers,\n                    \"Content-Type\": `multipart/form-data; boundary=${boundary}`,\n                },\n                body: arrayBuffer,\n                signal: AbortSignal.timeout(this.timeout_ms),\n                ...this.fetchOptions,\n            });\n            await raiseForStatus(res, \"ingest multipart runs\", true);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (e) {\n            console.warn(`${e.message.trim()}\\n\\nContext: ${context}`);\n        }\n    }\n    async updateRun(runId, run) {\n        assertUuid(runId);\n        if (run.inputs) {\n            run.inputs = this.processInputs(run.inputs);\n        }\n        if (run.outputs) {\n            run.outputs = this.processOutputs(run.outputs);\n        }\n        // TODO: Untangle types\n        const data = { ...run, id: runId };\n        if (!this._filterForSampling([data], true).length) {\n            return;\n        }\n        if (this.autoBatchTracing &&\n            data.trace_id !== undefined &&\n            data.dotted_order !== undefined) {\n            if (run.end_time !== undefined &&\n                data.parent_run_id === undefined &&\n                this.blockOnRootRunFinalization &&\n                !this.manualFlushMode) {\n                // Trigger batches as soon as a root trace ends and wait to ensure trace finishes\n                // in serverless environments.\n                await this.processRunOperation({ action: \"update\", item: data }).catch(console.error);\n                return;\n            }\n            else {\n                void this.processRunOperation({ action: \"update\", item: data }).catch(console.error);\n            }\n            return;\n        }\n        const headers = { ...this.headers, \"Content-Type\": \"application/json\" };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}`, {\n            method: \"PATCH\",\n            headers,\n            body: serializePayloadForTracing(run),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update run\", true);\n    }\n    async readRun(runId, { loadChildRuns } = { loadChildRuns: false }) {\n        assertUuid(runId);\n        let run = await this._get(`/runs/${runId}`);\n        if (loadChildRuns && run.child_run_ids) {\n            run = await this._loadChildRuns(run);\n        }\n        return run;\n    }\n    async getRunUrl({ runId, run, projectOpts, }) {\n        if (run !== undefined) {\n            let sessionId;\n            if (run.session_id) {\n                sessionId = run.session_id;\n            }\n            else if (projectOpts?.projectName) {\n                sessionId = (await this.readProject({ projectName: projectOpts?.projectName })).id;\n            }\n            else if (projectOpts?.projectId) {\n                sessionId = projectOpts?.projectId;\n            }\n            else {\n                const project = await this.readProject({\n                    projectName: getLangSmithEnvironmentVariable(\"PROJECT\") || \"default\",\n                });\n                sessionId = project.id;\n            }\n            const tenantId = await this._getTenantId();\n            return `${this.getHostUrl()}/o/${tenantId}/projects/p/${sessionId}/r/${run.id}?poll=true`;\n        }\n        else if (runId !== undefined) {\n            const run_ = await this.readRun(runId);\n            if (!run_.app_path) {\n                throw new Error(`Run ${runId} has no app_path`);\n            }\n            const baseUrl = this.getHostUrl();\n            return `${baseUrl}${run_.app_path}`;\n        }\n        else {\n            throw new Error(\"Must provide either runId or run\");\n        }\n    }\n    async _loadChildRuns(run) {\n        const childRuns = await toArray(this.listRuns({ id: run.child_run_ids }));\n        const treemap = {};\n        const runs = {};\n        // TODO: make dotted order required when the migration finishes\n        childRuns.sort((a, b) => (a?.dotted_order ?? \"\").localeCompare(b?.dotted_order ?? \"\"));\n        for (const childRun of childRuns) {\n            if (childRun.parent_run_id === null ||\n                childRun.parent_run_id === undefined) {\n                throw new Error(`Child run ${childRun.id} has no parent`);\n            }\n            if (!(childRun.parent_run_id in treemap)) {\n                treemap[childRun.parent_run_id] = [];\n            }\n            treemap[childRun.parent_run_id].push(childRun);\n            runs[childRun.id] = childRun;\n        }\n        run.child_runs = treemap[run.id] || [];\n        for (const runId in treemap) {\n            if (runId !== run.id) {\n                runs[runId].child_runs = treemap[runId];\n            }\n        }\n        return run;\n    }\n    /**\n     * List runs from the LangSmith server.\n     * @param projectId - The ID of the project to filter by.\n     * @param projectName - The name of the project to filter by.\n     * @param parentRunId - The ID of the parent run to filter by.\n     * @param traceId - The ID of the trace to filter by.\n     * @param referenceExampleId - The ID of the reference example to filter by.\n     * @param startTime - The start time to filter by.\n     * @param isRoot - Indicates whether to only return root runs.\n     * @param runType - The run type to filter by.\n     * @param error - Indicates whether to filter by error runs.\n     * @param id - The ID of the run to filter by.\n     * @param query - The query string to filter by.\n     * @param filter - The filter string to apply to the run spans.\n     * @param traceFilter - The filter string to apply on the root run of the trace.\n     * @param limit - The maximum number of runs to retrieve.\n     * @returns {AsyncIterable<Run>} - The runs.\n     *\n     * @example\n     * // List all runs in a project\n     * const projectRuns = client.listRuns({ projectName: \"<your_project>\" });\n     *\n     * @example\n     * // List LLM and Chat runs in the last 24 hours\n     * const todaysLLMRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   start_time: new Date(Date.now() - 24 * 60 * 60 * 1000),\n     *   run_type: \"llm\",\n     * });\n     *\n     * @example\n     * // List traces in a project\n     * const rootRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   execution_order: 1,\n     * });\n     *\n     * @example\n     * // List runs without errors\n     * const correctRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   error: false,\n     * });\n     *\n     * @example\n     * // List runs by run ID\n     * const runIds = [\n     *   \"a36092d2-4ad5-4fb4-9c0d-0dba9a2ed836\",\n     *   \"9398e6be-964f-4aa4-8ae9-ad78cd4b7074\",\n     * ];\n     * const selectedRuns = client.listRuns({ run_ids: runIds });\n     *\n     * @example\n     * // List all \"chain\" type runs that took more than 10 seconds and had `total_tokens` greater than 5000\n     * const chainRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'and(eq(run_type, \"chain\"), gt(latency, 10), gt(total_tokens, 5000))',\n     * });\n     *\n     * @example\n     * // List all runs called \"extractor\" whose root of the trace was assigned feedback \"user_score\" score of 1\n     * const goodExtractorRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'eq(name, \"extractor\")',\n     *   traceFilter: 'and(eq(feedback_key, \"user_score\"), eq(feedback_score, 1))',\n     * });\n     *\n     * @example\n     * // List all runs that started after a specific timestamp and either have \"error\" not equal to null or a \"Correctness\" feedback score equal to 0\n     * const complexRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'and(gt(start_time, \"2023-07-15T12:34:56Z\"), or(neq(error, null), and(eq(feedback_key, \"Correctness\"), eq(feedback_score, 0.0))))',\n     * });\n     *\n     * @example\n     * // List all runs where `tags` include \"experimental\" or \"beta\" and `latency` is greater than 2 seconds\n     * const taggedRuns = client.listRuns({\n     *   projectName: \"<your_project>\",\n     *   filter: 'and(or(has(tags, \"experimental\"), has(tags, \"beta\")), gt(latency, 2))',\n     * });\n     */\n    async *listRuns(props) {\n        const { projectId, projectName, parentRunId, traceId, referenceExampleId, startTime, executionOrder, isRoot, runType, error, id, query, filter, traceFilter, treeFilter, limit, select, } = props;\n        let projectIds = [];\n        if (projectId) {\n            projectIds = Array.isArray(projectId) ? projectId : [projectId];\n        }\n        if (projectName) {\n            const projectNames = Array.isArray(projectName)\n                ? projectName\n                : [projectName];\n            const projectIds_ = await Promise.all(projectNames.map((name) => this.readProject({ projectName: name }).then((project) => project.id)));\n            projectIds.push(...projectIds_);\n        }\n        const default_select = [\n            \"app_path\",\n            \"child_run_ids\",\n            \"completion_cost\",\n            \"completion_tokens\",\n            \"dotted_order\",\n            \"end_time\",\n            \"error\",\n            \"events\",\n            \"extra\",\n            \"feedback_stats\",\n            \"first_token_time\",\n            \"id\",\n            \"inputs\",\n            \"name\",\n            \"outputs\",\n            \"parent_run_id\",\n            \"parent_run_ids\",\n            \"prompt_cost\",\n            \"prompt_tokens\",\n            \"reference_example_id\",\n            \"run_type\",\n            \"session_id\",\n            \"start_time\",\n            \"status\",\n            \"tags\",\n            \"total_cost\",\n            \"total_tokens\",\n            \"trace_id\",\n        ];\n        const body = {\n            session: projectIds.length ? projectIds : null,\n            run_type: runType,\n            reference_example: referenceExampleId,\n            query,\n            filter,\n            trace_filter: traceFilter,\n            tree_filter: treeFilter,\n            execution_order: executionOrder,\n            parent_run: parentRunId,\n            start_time: startTime ? startTime.toISOString() : null,\n            error,\n            id,\n            limit,\n            trace: traceId,\n            select: select ? select : default_select,\n            is_root: isRoot,\n        };\n        let runsYielded = 0;\n        for await (const runs of this._getCursorPaginatedList(\"/runs/query\", body)) {\n            if (limit) {\n                if (runsYielded >= limit) {\n                    break;\n                }\n                if (runs.length + runsYielded > limit) {\n                    const newRuns = runs.slice(0, limit - runsYielded);\n                    yield* newRuns;\n                    break;\n                }\n                runsYielded += runs.length;\n                yield* runs;\n            }\n            else {\n                yield* runs;\n            }\n        }\n    }\n    async getRunStats({ id, trace, parentRun, runType, projectNames, projectIds, referenceExampleIds, startTime, endTime, error, query, filter, traceFilter, treeFilter, isRoot, dataSourceType, }) {\n        let projectIds_ = projectIds || [];\n        if (projectNames) {\n            projectIds_ = [\n                ...(projectIds || []),\n                ...(await Promise.all(projectNames.map((name) => this.readProject({ projectName: name }).then((project) => project.id)))),\n            ];\n        }\n        const payload = {\n            id,\n            trace,\n            parent_run: parentRun,\n            run_type: runType,\n            session: projectIds_,\n            reference_example: referenceExampleIds,\n            start_time: startTime,\n            end_time: endTime,\n            error,\n            query,\n            filter,\n            trace_filter: traceFilter,\n            tree_filter: treeFilter,\n            is_root: isRoot,\n            data_source_type: dataSourceType,\n        };\n        // Remove undefined values from the payload\n        const filteredPayload = Object.fromEntries(Object.entries(payload).filter(([_, value]) => value !== undefined));\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/stats`, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(filteredPayload),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        return result;\n    }\n    async shareRun(runId, { shareId } = {}) {\n        const data = {\n            run_id: runId,\n            share_token: shareId || uuid.v4(),\n        };\n        assertUuid(runId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n            method: \"PUT\",\n            headers: this.headers,\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        if (result === null || !(\"share_token\" in result)) {\n            throw new Error(\"Invalid response from server\");\n        }\n        return `${this.getHostUrl()}/public/${result[\"share_token\"]}/r`;\n    }\n    async unshareRun(runId) {\n        assertUuid(runId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"unshare run\", true);\n    }\n    async readRunSharedLink(runId) {\n        assertUuid(runId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/runs/${runId}/share`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        if (result === null || !(\"share_token\" in result)) {\n            return undefined;\n        }\n        return `${this.getHostUrl()}/public/${result[\"share_token\"]}/r`;\n    }\n    async listSharedRuns(shareToken, { runIds, } = {}) {\n        const queryParams = new URLSearchParams({\n            share_token: shareToken,\n        });\n        if (runIds !== undefined) {\n            for (const runId of runIds) {\n                queryParams.append(\"id\", runId);\n            }\n        }\n        assertUuid(shareToken);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/runs${queryParams}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const runs = await response.json();\n        return runs;\n    }\n    async readDatasetSharedSchema(datasetId, datasetName) {\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Either datasetId or datasetName must be given\");\n        }\n        if (!datasetId) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId = dataset.id;\n        }\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const shareSchema = await response.json();\n        shareSchema.url = `${this.getHostUrl()}/public/${shareSchema.share_token}/d`;\n        return shareSchema;\n    }\n    async shareDataset(datasetId, datasetName) {\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Either datasetId or datasetName must be given\");\n        }\n        if (!datasetId) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId = dataset.id;\n        }\n        const data = {\n            dataset_id: datasetId,\n        };\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n            method: \"PUT\",\n            headers: this.headers,\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const shareSchema = await response.json();\n        shareSchema.url = `${this.getHostUrl()}/public/${shareSchema.share_token}/d`;\n        return shareSchema;\n    }\n    async unshareDataset(datasetId) {\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/share`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"unshare dataset\", true);\n    }\n    async readSharedDataset(shareToken) {\n        assertUuid(shareToken);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/datasets`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const dataset = await response.json();\n        return dataset;\n    }\n    /**\n     * Get shared examples.\n     *\n     * @param {string} shareToken The share token to get examples for. A share token is the UUID (or LangSmith URL, including UUID) generated when explicitly marking an example as public.\n     * @param {Object} [options] Additional options for listing the examples.\n     * @param {string[] | undefined} [options.exampleIds] A list of example IDs to filter by.\n     * @returns {Promise<Example[]>} The shared examples.\n     */\n    async listSharedExamples(shareToken, options) {\n        const params = {};\n        if (options?.exampleIds) {\n            params.id = options.exampleIds;\n        }\n        const urlParams = new URLSearchParams();\n        Object.entries(params).forEach(([key, value]) => {\n            if (Array.isArray(value)) {\n                value.forEach((v) => urlParams.append(key, v));\n            }\n            else {\n                urlParams.append(key, value);\n            }\n        });\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/public/${shareToken}/examples?${urlParams.toString()}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        if (!response.ok) {\n            if (\"detail\" in result) {\n                throw new Error(`Failed to list shared examples.\\nStatus: ${response.status}\\nMessage: ${result.detail.join(\"\\n\")}`);\n            }\n            throw new Error(`Failed to list shared examples: ${response.status} ${response.statusText}`);\n        }\n        return result.map((example) => ({\n            ...example,\n            _hostUrl: this.getHostUrl(),\n        }));\n    }\n    async createProject({ projectName, description = null, metadata = null, upsert = false, projectExtra = null, referenceDatasetId = null, }) {\n        const upsert_ = upsert ? `?upsert=true` : \"\";\n        const endpoint = `${this.apiUrl}/sessions${upsert_}`;\n        const extra = projectExtra || {};\n        if (metadata) {\n            extra[\"metadata\"] = metadata;\n        }\n        const body = {\n            name: projectName,\n            extra,\n            description,\n        };\n        if (referenceDatasetId !== null) {\n            body[\"reference_dataset_id\"] = referenceDatasetId;\n        }\n        const response = await this.caller.call(_getFetchImplementation(), endpoint, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create project\");\n        const result = await response.json();\n        return result;\n    }\n    async updateProject(projectId, { name = null, description = null, metadata = null, projectExtra = null, endTime = null, }) {\n        const endpoint = `${this.apiUrl}/sessions/${projectId}`;\n        let extra = projectExtra;\n        if (metadata) {\n            extra = { ...(extra || {}), metadata };\n        }\n        const body = {\n            name,\n            extra,\n            description,\n            end_time: endTime ? new Date(endTime).toISOString() : null,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), endpoint, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update project\");\n        const result = await response.json();\n        return result;\n    }\n    async hasProject({ projectId, projectName, }) {\n        // TODO: Add a head request\n        let path = \"/sessions\";\n        const params = new URLSearchParams();\n        if (projectId !== undefined && projectName !== undefined) {\n            throw new Error(\"Must provide either projectName or projectId, not both\");\n        }\n        else if (projectId !== undefined) {\n            assertUuid(projectId);\n            path += `/${projectId}`;\n        }\n        else if (projectName !== undefined) {\n            params.append(\"name\", projectName);\n        }\n        else {\n            throw new Error(\"Must provide projectName or projectId\");\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${path}?${params}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        // consume the response body to release the connection\n        // https://undici.nodejs.org/#/?id=garbage-collection\n        try {\n            const result = await response.json();\n            if (!response.ok) {\n                return false;\n            }\n            // If it's OK and we're querying by name, need to check the list is not empty\n            if (Array.isArray(result)) {\n                return result.length > 0;\n            }\n            // projectId querying\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    async readProject({ projectId, projectName, includeStats, }) {\n        let path = \"/sessions\";\n        const params = new URLSearchParams();\n        if (projectId !== undefined && projectName !== undefined) {\n            throw new Error(\"Must provide either projectName or projectId, not both\");\n        }\n        else if (projectId !== undefined) {\n            assertUuid(projectId);\n            path += `/${projectId}`;\n        }\n        else if (projectName !== undefined) {\n            params.append(\"name\", projectName);\n        }\n        else {\n            throw new Error(\"Must provide projectName or projectId\");\n        }\n        if (includeStats !== undefined) {\n            params.append(\"include_stats\", includeStats.toString());\n        }\n        const response = await this._get(path, params);\n        let result;\n        if (Array.isArray(response)) {\n            if (response.length === 0) {\n                throw new Error(`Project[id=${projectId}, name=${projectName}] not found`);\n            }\n            result = response[0];\n        }\n        else {\n            result = response;\n        }\n        return result;\n    }\n    async getProjectUrl({ projectId, projectName, }) {\n        if (projectId === undefined && projectName === undefined) {\n            throw new Error(\"Must provide either projectName or projectId\");\n        }\n        const project = await this.readProject({ projectId, projectName });\n        const tenantId = await this._getTenantId();\n        return `${this.getHostUrl()}/o/${tenantId}/projects/p/${project.id}`;\n    }\n    async getDatasetUrl({ datasetId, datasetName, }) {\n        if (datasetId === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        const dataset = await this.readDataset({ datasetId, datasetName });\n        const tenantId = await this._getTenantId();\n        return `${this.getHostUrl()}/o/${tenantId}/datasets/${dataset.id}`;\n    }\n    async _getTenantId() {\n        if (this._tenantId !== null) {\n            return this._tenantId;\n        }\n        const queryParams = new URLSearchParams({ limit: \"1\" });\n        for await (const projects of this._getPaginated(\"/sessions\", queryParams)) {\n            this._tenantId = projects[0].tenant_id;\n            return projects[0].tenant_id;\n        }\n        throw new Error(\"No projects found to resolve tenant.\");\n    }\n    async *listProjects({ projectIds, name, nameContains, referenceDatasetId, referenceDatasetName, referenceFree, metadata, } = {}) {\n        const params = new URLSearchParams();\n        if (projectIds !== undefined) {\n            for (const projectId of projectIds) {\n                params.append(\"id\", projectId);\n            }\n        }\n        if (name !== undefined) {\n            params.append(\"name\", name);\n        }\n        if (nameContains !== undefined) {\n            params.append(\"name_contains\", nameContains);\n        }\n        if (referenceDatasetId !== undefined) {\n            params.append(\"reference_dataset\", referenceDatasetId);\n        }\n        else if (referenceDatasetName !== undefined) {\n            const dataset = await this.readDataset({\n                datasetName: referenceDatasetName,\n            });\n            params.append(\"reference_dataset\", dataset.id);\n        }\n        if (referenceFree !== undefined) {\n            params.append(\"reference_free\", referenceFree.toString());\n        }\n        if (metadata !== undefined) {\n            params.append(\"metadata\", JSON.stringify(metadata));\n        }\n        for await (const projects of this._getPaginated(\"/sessions\", params)) {\n            yield* projects;\n        }\n    }\n    async deleteProject({ projectId, projectName, }) {\n        let projectId_;\n        if (projectId === undefined && projectName === undefined) {\n            throw new Error(\"Must provide projectName or projectId\");\n        }\n        else if (projectId !== undefined && projectName !== undefined) {\n            throw new Error(\"Must provide either projectName or projectId, not both\");\n        }\n        else if (projectId === undefined) {\n            projectId_ = (await this.readProject({ projectName })).id;\n        }\n        else {\n            projectId_ = projectId;\n        }\n        assertUuid(projectId_);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/sessions/${projectId_}`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete session ${projectId_} (${projectName})`, true);\n    }\n    async uploadCsv({ csvFile, fileName, inputKeys, outputKeys, description, dataType, name, }) {\n        const url = `${this.apiUrl}/datasets/upload`;\n        const formData = new FormData();\n        formData.append(\"file\", csvFile, fileName);\n        inputKeys.forEach((key) => {\n            formData.append(\"input_keys\", key);\n        });\n        outputKeys.forEach((key) => {\n            formData.append(\"output_keys\", key);\n        });\n        if (description) {\n            formData.append(\"description\", description);\n        }\n        if (dataType) {\n            formData.append(\"data_type\", dataType);\n        }\n        if (name) {\n            formData.append(\"name\", name);\n        }\n        const response = await this.caller.call(_getFetchImplementation(), url, {\n            method: \"POST\",\n            headers: this.headers,\n            body: formData,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"upload CSV\");\n        const result = await response.json();\n        return result;\n    }\n    async createDataset(name, { description, dataType, inputsSchema, outputsSchema, metadata, } = {}) {\n        const body = {\n            name,\n            description,\n            extra: metadata ? { metadata } : undefined,\n        };\n        if (dataType) {\n            body.data_type = dataType;\n        }\n        if (inputsSchema) {\n            body.inputs_schema_definition = inputsSchema;\n        }\n        if (outputsSchema) {\n            body.outputs_schema_definition = outputsSchema;\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create dataset\");\n        const result = await response.json();\n        return result;\n    }\n    async readDataset({ datasetId, datasetName, }) {\n        let path = \"/datasets\";\n        // limit to 1 result\n        const params = new URLSearchParams({ limit: \"1\" });\n        if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId !== undefined) {\n            assertUuid(datasetId);\n            path += `/${datasetId}`;\n        }\n        else if (datasetName !== undefined) {\n            params.append(\"name\", datasetName);\n        }\n        else {\n            throw new Error(\"Must provide datasetName or datasetId\");\n        }\n        const response = await this._get(path, params);\n        let result;\n        if (Array.isArray(response)) {\n            if (response.length === 0) {\n                throw new Error(`Dataset[id=${datasetId}, name=${datasetName}] not found`);\n            }\n            result = response[0];\n        }\n        else {\n            result = response;\n        }\n        return result;\n    }\n    async hasDataset({ datasetId, datasetName, }) {\n        try {\n            await this.readDataset({ datasetId, datasetName });\n            return true;\n        }\n        catch (e) {\n            if (\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            e instanceof Error &&\n                e.message.toLocaleLowerCase().includes(\"not found\")) {\n                return false;\n            }\n            throw e;\n        }\n    }\n    async diffDatasetVersions({ datasetId, datasetName, fromVersion, toVersion, }) {\n        let datasetId_ = datasetId;\n        if (datasetId_ === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId_ === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        const urlParams = new URLSearchParams({\n            from_version: typeof fromVersion === \"string\"\n                ? fromVersion\n                : fromVersion.toISOString(),\n            to_version: typeof toVersion === \"string\" ? toVersion : toVersion.toISOString(),\n        });\n        const response = await this._get(`/datasets/${datasetId_}/versions/diff`, urlParams);\n        return response;\n    }\n    async readDatasetOpenaiFinetuning({ datasetId, datasetName, }) {\n        const path = \"/datasets\";\n        if (datasetId !== undefined) {\n            // do nothing\n        }\n        else if (datasetName !== undefined) {\n            datasetId = (await this.readDataset({ datasetName })).id;\n        }\n        else {\n            throw new Error(\"Must provide datasetName or datasetId\");\n        }\n        const response = await this._getResponse(`${path}/${datasetId}/openai_ft`);\n        const datasetText = await response.text();\n        const dataset = datasetText\n            .trim()\n            .split(\"\\n\")\n            .map((line) => JSON.parse(line));\n        return dataset;\n    }\n    async *listDatasets({ limit = 100, offset = 0, datasetIds, datasetName, datasetNameContains, metadata, } = {}) {\n        const path = \"/datasets\";\n        const params = new URLSearchParams({\n            limit: limit.toString(),\n            offset: offset.toString(),\n        });\n        if (datasetIds !== undefined) {\n            for (const id_ of datasetIds) {\n                params.append(\"id\", id_);\n            }\n        }\n        if (datasetName !== undefined) {\n            params.append(\"name\", datasetName);\n        }\n        if (datasetNameContains !== undefined) {\n            params.append(\"name_contains\", datasetNameContains);\n        }\n        if (metadata !== undefined) {\n            params.append(\"metadata\", JSON.stringify(metadata));\n        }\n        for await (const datasets of this._getPaginated(path, params)) {\n            yield* datasets;\n        }\n    }\n    /**\n     * Update a dataset\n     * @param props The dataset details to update\n     * @returns The updated dataset\n     */\n    async updateDataset(props) {\n        const { datasetId, datasetName, ...update } = props;\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        const _datasetId = datasetId ?? (await this.readDataset({ datasetName })).id;\n        assertUuid(_datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${_datasetId}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(update),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update dataset\");\n        return (await response.json());\n    }\n    /**\n     * Updates a tag on a dataset.\n     *\n     * If the tag is already assigned to a different version of this dataset,\n     * the tag will be moved to the new version. The as_of parameter is used to\n     * determine which version of the dataset to apply the new tags to.\n     *\n     * It must be an exact version of the dataset to succeed. You can\n     * use the \"readDatasetVersion\" method to find the exact version\n     * to apply the tags to.\n     * @param params.datasetId The ID of the dataset to update. Must be provided if \"datasetName\" is not provided.\n     * @param params.datasetName The name of the dataset to update. Must be provided if \"datasetId\" is not provided.\n     * @param params.asOf The timestamp of the dataset to apply the new tags to.\n     * @param params.tag The new tag to apply to the dataset.\n     */\n    async updateDatasetTag(props) {\n        const { datasetId, datasetName, asOf, tag } = props;\n        if (!datasetId && !datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        const _datasetId = datasetId ?? (await this.readDataset({ datasetName })).id;\n        assertUuid(_datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${_datasetId}/tags`, {\n            method: \"PUT\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                as_of: typeof asOf === \"string\" ? asOf : asOf.toISOString(),\n                tag,\n            }),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update dataset tags\");\n    }\n    async deleteDataset({ datasetId, datasetName, }) {\n        let path = \"/datasets\";\n        let datasetId_ = datasetId;\n        if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetName !== undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        if (datasetId_ !== undefined) {\n            assertUuid(datasetId_);\n            path += `/${datasetId_}`;\n        }\n        else {\n            throw new Error(\"Must provide datasetName or datasetId\");\n        }\n        const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete ${path}`);\n        await response.json();\n    }\n    async indexDataset({ datasetId, datasetName, tag, }) {\n        let datasetId_ = datasetId;\n        if (!datasetId_ && !datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ && datasetName) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (!datasetId_) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        assertUuid(datasetId_);\n        const data = {\n            tag: tag,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId_}/index`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"index dataset\");\n        await response.json();\n    }\n    /**\n     * Lets you run a similarity search query on a dataset.\n     *\n     * Requires the dataset to be indexed. Please see the `indexDataset` method to set up indexing.\n     *\n     * @param inputs      The input on which to run the similarity search. Must have the\n     *                    same schema as the dataset.\n     *\n     * @param datasetId   The dataset to search for similar examples.\n     *\n     * @param limit       The maximum number of examples to return. Will return the top `limit` most\n     *                    similar examples in order of most similar to least similar. If no similar\n     *                    examples are found, random examples will be returned.\n     *\n     * @param filter      A filter string to apply to the search. Only examples will be returned that\n     *                    match the filter string. Some examples of filters\n     *\n     *                    - eq(metadata.mykey, \"value\")\n     *                    - and(neq(metadata.my.nested.key, \"value\"), neq(metadata.mykey, \"value\"))\n     *                    - or(eq(metadata.mykey, \"value\"), eq(metadata.mykey, \"othervalue\"))\n     *\n     * @returns           A list of similar examples.\n     *\n     *\n     * @example\n     * dataset_id = \"123e4567-e89b-12d3-a456-426614174000\"\n     * inputs = {\"text\": \"How many people live in Berlin?\"}\n     * limit = 5\n     * examples = await client.similarExamples(inputs, dataset_id, limit)\n     */\n    async similarExamples(inputs, datasetId, limit, { filter, } = {}) {\n        const data = {\n            limit: limit,\n            inputs: inputs,\n        };\n        if (filter !== undefined) {\n            data[\"filter\"] = filter;\n        }\n        assertUuid(datasetId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId}/search`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"fetch similar examples\");\n        const result = await response.json();\n        return result[\"examples\"];\n    }\n    async createExample(inputs, outputs, { datasetId, datasetName, createdAt, exampleId, metadata, split, sourceRunId, }) {\n        let datasetId_ = datasetId;\n        if (datasetId_ === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId_ === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        const createdAt_ = createdAt || new Date();\n        const data = {\n            dataset_id: datasetId_,\n            inputs,\n            outputs,\n            created_at: createdAt_?.toISOString(),\n            id: exampleId,\n            metadata,\n            split,\n            source_run_id: sourceRunId,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create example\");\n        const result = await response.json();\n        return result;\n    }\n    async createExamples(props) {\n        const { inputs, outputs, metadata, sourceRunIds, exampleIds, datasetId, datasetName, } = props;\n        let datasetId_ = datasetId;\n        if (datasetId_ === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId\");\n        }\n        else if (datasetId_ !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId_ === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        const formattedExamples = inputs.map((input, idx) => {\n            return {\n                dataset_id: datasetId_,\n                inputs: input,\n                outputs: outputs ? outputs[idx] : undefined,\n                metadata: metadata ? metadata[idx] : undefined,\n                split: props.splits ? props.splits[idx] : undefined,\n                id: exampleIds ? exampleIds[idx] : undefined,\n                source_run_id: sourceRunIds ? sourceRunIds[idx] : undefined,\n            };\n        });\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/bulk`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(formattedExamples),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create examples\");\n        const result = await response.json();\n        return result;\n    }\n    async createLLMExample(input, generation, options) {\n        return this.createExample({ input }, { output: generation }, options);\n    }\n    async createChatExample(input, generations, options) {\n        const finalInput = input.map((message) => {\n            if (isLangChainMessage(message)) {\n                return convertLangChainMessageToExample(message);\n            }\n            return message;\n        });\n        const finalOutput = isLangChainMessage(generations)\n            ? convertLangChainMessageToExample(generations)\n            : generations;\n        return this.createExample({ input: finalInput }, { output: finalOutput }, options);\n    }\n    async readExample(exampleId) {\n        assertUuid(exampleId);\n        const path = `/examples/${exampleId}`;\n        const rawExample = await this._get(path);\n        const { attachment_urls, ...rest } = rawExample;\n        const example = rest;\n        if (attachment_urls) {\n            // add attachments back to the example\n            example.attachments = Object.entries(attachment_urls).reduce((acc, [key, value]) => {\n                acc[key.slice(\"attachment.\".length)] = {\n                    presigned_url: value.presigned_url,\n                    mime_type: value.mime_type,\n                };\n                return acc;\n            }, {});\n        }\n        return example;\n    }\n    async *listExamples({ datasetId, datasetName, exampleIds, asOf, splits, inlineS3Urls, metadata, limit, offset, filter, includeAttachments, } = {}) {\n        let datasetId_;\n        if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId !== undefined) {\n            datasetId_ = datasetId;\n        }\n        else if (datasetName !== undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        else {\n            throw new Error(\"Must provide a datasetName or datasetId\");\n        }\n        const params = new URLSearchParams({ dataset: datasetId_ });\n        const dataset_version = asOf\n            ? typeof asOf === \"string\"\n                ? asOf\n                : asOf?.toISOString()\n            : undefined;\n        if (dataset_version) {\n            params.append(\"as_of\", dataset_version);\n        }\n        const inlineS3Urls_ = inlineS3Urls ?? true;\n        params.append(\"inline_s3_urls\", inlineS3Urls_.toString());\n        if (exampleIds !== undefined) {\n            for (const id_ of exampleIds) {\n                params.append(\"id\", id_);\n            }\n        }\n        if (splits !== undefined) {\n            for (const split of splits) {\n                params.append(\"splits\", split);\n            }\n        }\n        if (metadata !== undefined) {\n            const serializedMetadata = JSON.stringify(metadata);\n            params.append(\"metadata\", serializedMetadata);\n        }\n        if (limit !== undefined) {\n            params.append(\"limit\", limit.toString());\n        }\n        if (offset !== undefined) {\n            params.append(\"offset\", offset.toString());\n        }\n        if (filter !== undefined) {\n            params.append(\"filter\", filter);\n        }\n        if (includeAttachments === true) {\n            [\"attachment_urls\", \"outputs\", \"metadata\"].forEach((field) => params.append(\"select\", field));\n        }\n        let i = 0;\n        for await (const rawExamples of this._getPaginated(\"/examples\", params)) {\n            for (const rawExample of rawExamples) {\n                const { attachment_urls, ...rest } = rawExample;\n                const example = rest;\n                if (attachment_urls) {\n                    example.attachments = Object.entries(attachment_urls).reduce((acc, [key, value]) => {\n                        acc[key.slice(\"attachment.\".length)] = {\n                            presigned_url: value.presigned_url,\n                            mime_type: value.mime_type || undefined,\n                        };\n                        return acc;\n                    }, {});\n                }\n                yield example;\n                i++;\n            }\n            if (limit !== undefined && i >= limit) {\n                break;\n            }\n        }\n    }\n    async deleteExample(exampleId) {\n        assertUuid(exampleId);\n        const path = `/examples/${exampleId}`;\n        const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete ${path}`);\n        await response.json();\n    }\n    async updateExample(exampleId, update) {\n        assertUuid(exampleId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/${exampleId}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(update),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update example\");\n        const result = await response.json();\n        return result;\n    }\n    async updateExamples(update) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/examples/bulk`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(update),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update examples\");\n        const result = await response.json();\n        return result;\n    }\n    /**\n     * Get dataset version by closest date or exact tag.\n     *\n     * Use this to resolve the nearest version to a given timestamp or for a given tag.\n     *\n     * @param options The options for getting the dataset version\n     * @param options.datasetId The ID of the dataset\n     * @param options.datasetName The name of the dataset\n     * @param options.asOf The timestamp of the dataset to retrieve\n     * @param options.tag The tag of the dataset to retrieve\n     * @returns The dataset version\n     */\n    async readDatasetVersion({ datasetId, datasetName, asOf, tag, }) {\n        let resolvedDatasetId;\n        if (!datasetId) {\n            const dataset = await this.readDataset({ datasetName });\n            resolvedDatasetId = dataset.id;\n        }\n        else {\n            resolvedDatasetId = datasetId;\n        }\n        assertUuid(resolvedDatasetId);\n        if ((asOf && tag) || (!asOf && !tag)) {\n            throw new Error(\"Exactly one of asOf and tag must be specified.\");\n        }\n        const params = new URLSearchParams();\n        if (asOf !== undefined) {\n            params.append(\"as_of\", typeof asOf === \"string\" ? asOf : asOf.toISOString());\n        }\n        if (tag !== undefined) {\n            params.append(\"tag\", tag);\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${resolvedDatasetId}/version?${params.toString()}`, {\n            method: \"GET\",\n            headers: { ...this.headers },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"read dataset version\");\n        return await response.json();\n    }\n    async listDatasetSplits({ datasetId, datasetName, asOf, }) {\n        let datasetId_;\n        if (datasetId === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide dataset name or ID\");\n        }\n        else if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        else {\n            datasetId_ = datasetId;\n        }\n        assertUuid(datasetId_);\n        const params = new URLSearchParams();\n        const dataset_version = asOf\n            ? typeof asOf === \"string\"\n                ? asOf\n                : asOf?.toISOString()\n            : undefined;\n        if (dataset_version) {\n            params.append(\"as_of\", dataset_version);\n        }\n        const response = await this._get(`/datasets/${datasetId_}/splits`, params);\n        return response;\n    }\n    async updateDatasetSplits({ datasetId, datasetName, splitName, exampleIds, remove = false, }) {\n        let datasetId_;\n        if (datasetId === undefined && datasetName === undefined) {\n            throw new Error(\"Must provide dataset name or ID\");\n        }\n        else if (datasetId !== undefined && datasetName !== undefined) {\n            throw new Error(\"Must provide either datasetName or datasetId, not both\");\n        }\n        else if (datasetId === undefined) {\n            const dataset = await this.readDataset({ datasetName });\n            datasetId_ = dataset.id;\n        }\n        else {\n            datasetId_ = datasetId;\n        }\n        assertUuid(datasetId_);\n        const data = {\n            split_name: splitName,\n            examples: exampleIds.map((id) => {\n                assertUuid(id);\n                return id;\n            }),\n            remove,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/${datasetId_}/splits`, {\n            method: \"PUT\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update dataset splits\", true);\n    }\n    /**\n     * @deprecated This method is deprecated and will be removed in future LangSmith versions, use `evaluate` from `langsmith/evaluation` instead.\n     */\n    async evaluateRun(run, evaluator, { sourceInfo, loadChildRuns, referenceExample, } = { loadChildRuns: false }) {\n        warnOnce(\"This method is deprecated and will be removed in future LangSmith versions, use `evaluate` from `langsmith/evaluation` instead.\");\n        let run_;\n        if (typeof run === \"string\") {\n            run_ = await this.readRun(run, { loadChildRuns });\n        }\n        else if (typeof run === \"object\" && \"id\" in run) {\n            run_ = run;\n        }\n        else {\n            throw new Error(`Invalid run type: ${typeof run}`);\n        }\n        if (run_.reference_example_id !== null &&\n            run_.reference_example_id !== undefined) {\n            referenceExample = await this.readExample(run_.reference_example_id);\n        }\n        const feedbackResult = await evaluator.evaluateRun(run_, referenceExample);\n        const [_, feedbacks] = await this._logEvaluationFeedback(feedbackResult, run_, sourceInfo);\n        return feedbacks[0];\n    }\n    async createFeedback(runId, key, { score, value, correction, comment, sourceInfo, feedbackSourceType = \"api\", sourceRunId, feedbackId, feedbackConfig, projectId, comparativeExperimentId, }) {\n        if (!runId && !projectId) {\n            throw new Error(\"One of runId or projectId must be provided\");\n        }\n        if (runId && projectId) {\n            throw new Error(\"Only one of runId or projectId can be provided\");\n        }\n        const feedback_source = {\n            type: feedbackSourceType ?? \"api\",\n            metadata: sourceInfo ?? {},\n        };\n        if (sourceRunId !== undefined &&\n            feedback_source?.metadata !== undefined &&\n            !feedback_source.metadata[\"__run\"]) {\n            feedback_source.metadata[\"__run\"] = { run_id: sourceRunId };\n        }\n        if (feedback_source?.metadata !== undefined &&\n            feedback_source.metadata[\"__run\"]?.run_id !== undefined) {\n            assertUuid(feedback_source.metadata[\"__run\"].run_id);\n        }\n        const feedback = {\n            id: feedbackId ?? uuid.v4(),\n            run_id: runId,\n            key,\n            score,\n            value,\n            correction,\n            comment,\n            feedback_source: feedback_source,\n            comparative_experiment_id: comparativeExperimentId,\n            feedbackConfig,\n            session_id: projectId,\n        };\n        const url = `${this.apiUrl}/feedback`;\n        const response = await this.caller.call(_getFetchImplementation(), url, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(feedback),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create feedback\", true);\n        return feedback;\n    }\n    async updateFeedback(feedbackId, { score, value, correction, comment, }) {\n        const feedbackUpdate = {};\n        if (score !== undefined && score !== null) {\n            feedbackUpdate[\"score\"] = score;\n        }\n        if (value !== undefined && value !== null) {\n            feedbackUpdate[\"value\"] = value;\n        }\n        if (correction !== undefined && correction !== null) {\n            feedbackUpdate[\"correction\"] = correction;\n        }\n        if (comment !== undefined && comment !== null) {\n            feedbackUpdate[\"comment\"] = comment;\n        }\n        assertUuid(feedbackId);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/feedback/${feedbackId}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(feedbackUpdate),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update feedback\", true);\n    }\n    async readFeedback(feedbackId) {\n        assertUuid(feedbackId);\n        const path = `/feedback/${feedbackId}`;\n        const response = await this._get(path);\n        return response;\n    }\n    async deleteFeedback(feedbackId) {\n        assertUuid(feedbackId);\n        const path = `/feedback/${feedbackId}`;\n        const response = await this.caller.call(_getFetchImplementation(), this.apiUrl + path, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `delete ${path}`);\n        await response.json();\n    }\n    async *listFeedback({ runIds, feedbackKeys, feedbackSourceTypes, } = {}) {\n        const queryParams = new URLSearchParams();\n        if (runIds) {\n            queryParams.append(\"run\", runIds.join(\",\"));\n        }\n        if (feedbackKeys) {\n            for (const key of feedbackKeys) {\n                queryParams.append(\"key\", key);\n            }\n        }\n        if (feedbackSourceTypes) {\n            for (const type of feedbackSourceTypes) {\n                queryParams.append(\"source\", type);\n            }\n        }\n        for await (const feedbacks of this._getPaginated(\"/feedback\", queryParams)) {\n            yield* feedbacks;\n        }\n    }\n    /**\n     * Creates a presigned feedback token and URL.\n     *\n     * The token can be used to authorize feedback metrics without\n     * needing an API key. This is useful for giving browser-based\n     * applications the ability to submit feedback without needing\n     * to expose an API key.\n     *\n     * @param runId - The ID of the run.\n     * @param feedbackKey - The feedback key.\n     * @param options - Additional options for the token.\n     * @param options.expiration - The expiration time for the token.\n     *\n     * @returns A promise that resolves to a FeedbackIngestToken.\n     */\n    async createPresignedFeedbackToken(runId, feedbackKey, { expiration, feedbackConfig, } = {}) {\n        const body = {\n            run_id: runId,\n            feedback_key: feedbackKey,\n            feedback_config: feedbackConfig,\n        };\n        if (expiration) {\n            if (typeof expiration === \"string\") {\n                body[\"expires_at\"] = expiration;\n            }\n            else if (expiration?.hours || expiration?.minutes || expiration?.days) {\n                body[\"expires_in\"] = expiration;\n            }\n        }\n        else {\n            body[\"expires_in\"] = {\n                hours: 3,\n            };\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/feedback/tokens`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const result = await response.json();\n        return result;\n    }\n    async createComparativeExperiment({ name, experimentIds, referenceDatasetId, createdAt, description, metadata, id, }) {\n        if (experimentIds.length === 0) {\n            throw new Error(\"At least one experiment is required\");\n        }\n        if (!referenceDatasetId) {\n            referenceDatasetId = (await this.readProject({\n                projectId: experimentIds[0],\n            })).reference_dataset_id;\n        }\n        if (!referenceDatasetId == null) {\n            throw new Error(\"A reference dataset is required\");\n        }\n        const body = {\n            id,\n            name,\n            experiment_ids: experimentIds,\n            reference_dataset_id: referenceDatasetId,\n            description,\n            created_at: (createdAt ?? new Date())?.toISOString(),\n            extra: {},\n        };\n        if (metadata)\n            body.extra[\"metadata\"] = metadata;\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/datasets/comparative`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(body),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        return await response.json();\n    }\n    /**\n     * Retrieves a list of presigned feedback tokens for a given run ID.\n     * @param runId The ID of the run.\n     * @returns An async iterable of FeedbackIngestToken objects.\n     */\n    async *listPresignedFeedbackTokens(runId) {\n        assertUuid(runId);\n        const params = new URLSearchParams({ run_id: runId });\n        for await (const tokens of this._getPaginated(\"/feedback/tokens\", params)) {\n            yield* tokens;\n        }\n    }\n    _selectEvalResults(results) {\n        let results_;\n        if (\"results\" in results) {\n            results_ = results.results;\n        }\n        else {\n            results_ = [results];\n        }\n        return results_;\n    }\n    async _logEvaluationFeedback(evaluatorResponse, run, sourceInfo) {\n        const evalResults = this._selectEvalResults(evaluatorResponse);\n        const feedbacks = [];\n        for (const res of evalResults) {\n            let sourceInfo_ = sourceInfo || {};\n            if (res.evaluatorInfo) {\n                sourceInfo_ = { ...res.evaluatorInfo, ...sourceInfo_ };\n            }\n            let runId_ = null;\n            if (res.targetRunId) {\n                runId_ = res.targetRunId;\n            }\n            else if (run) {\n                runId_ = run.id;\n            }\n            feedbacks.push(await this.createFeedback(runId_, res.key, {\n                score: res.score,\n                value: res.value,\n                comment: res.comment,\n                correction: res.correction,\n                sourceInfo: sourceInfo_,\n                sourceRunId: res.sourceRunId,\n                feedbackConfig: res.feedbackConfig,\n                feedbackSourceType: \"model\",\n            }));\n        }\n        return [evalResults, feedbacks];\n    }\n    async logEvaluationFeedback(evaluatorResponse, run, sourceInfo) {\n        const [results] = await this._logEvaluationFeedback(evaluatorResponse, run, sourceInfo);\n        return results;\n    }\n    /**\n     * API for managing annotation queues\n     */\n    /**\n     * List the annotation queues on the LangSmith API.\n     * @param options - The options for listing annotation queues\n     * @param options.queueIds - The IDs of the queues to filter by\n     * @param options.name - The name of the queue to filter by\n     * @param options.nameContains - The substring that the queue name should contain\n     * @param options.limit - The maximum number of queues to return\n     * @returns An iterator of AnnotationQueue objects\n     */\n    async *listAnnotationQueues(options = {}) {\n        const { queueIds, name, nameContains, limit } = options;\n        const params = new URLSearchParams();\n        if (queueIds) {\n            queueIds.forEach((id, i) => {\n                assertUuid(id, `queueIds[${i}]`);\n                params.append(\"ids\", id);\n            });\n        }\n        if (name)\n            params.append(\"name\", name);\n        if (nameContains)\n            params.append(\"name_contains\", nameContains);\n        params.append(\"limit\", (limit !== undefined ? Math.min(limit, 100) : 100).toString());\n        let count = 0;\n        for await (const queues of this._getPaginated(\"/annotation-queues\", params)) {\n            yield* queues;\n            count++;\n            if (limit !== undefined && count >= limit)\n                break;\n        }\n    }\n    /**\n     * Create an annotation queue on the LangSmith API.\n     * @param options - The options for creating an annotation queue\n     * @param options.name - The name of the annotation queue\n     * @param options.description - The description of the annotation queue\n     * @param options.queueId - The ID of the annotation queue\n     * @returns The created AnnotationQueue object\n     */\n    async createAnnotationQueue(options) {\n        const { name, description, queueId } = options;\n        const body = {\n            name,\n            description,\n            id: queueId || uuid.v4(),\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(Object.fromEntries(Object.entries(body).filter(([_, v]) => v !== undefined))),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create annotation queue\");\n        const data = await response.json();\n        return data;\n    }\n    /**\n     * Read an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue to read\n     * @returns The AnnotationQueue object\n     */\n    async readAnnotationQueue(queueId) {\n        // TODO: Replace when actual endpoint is added\n        const queueIteratorResult = await this.listAnnotationQueues({\n            queueIds: [queueId],\n        }).next();\n        if (queueIteratorResult.done) {\n            throw new Error(`Annotation queue with ID ${queueId} not found`);\n        }\n        return queueIteratorResult.value;\n    }\n    /**\n     * Update an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue to update\n     * @param options - The options for updating the annotation queue\n     * @param options.name - The new name for the annotation queue\n     * @param options.description - The new description for the annotation queue\n     */\n    async updateAnnotationQueue(queueId, options) {\n        const { name, description } = options;\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}`, {\n            method: \"PATCH\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ name, description }),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update annotation queue\");\n    }\n    /**\n     * Delete an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue to delete\n     */\n    async deleteAnnotationQueue(queueId) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}`, {\n            method: \"DELETE\",\n            headers: { ...this.headers, Accept: \"application/json\" },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"delete annotation queue\");\n    }\n    /**\n     * Add runs to an annotation queue with the specified queue ID.\n     * @param queueId - The ID of the annotation queue\n     * @param runIds - The IDs of the runs to be added to the annotation queue\n     */\n    async addRunsToAnnotationQueue(queueId, runIds) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}/runs`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(runIds.map((id, i) => assertUuid(id, `runIds[${i}]`).toString())),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"add runs to annotation queue\");\n    }\n    /**\n     * Get a run from an annotation queue at the specified index.\n     * @param queueId - The ID of the annotation queue\n     * @param index - The index of the run to retrieve\n     * @returns A Promise that resolves to a RunWithAnnotationQueueInfo object\n     * @throws {Error} If the run is not found at the given index or for other API-related errors\n     */\n    async getRunFromAnnotationQueue(queueId, index) {\n        const baseUrl = `/annotation-queues/${assertUuid(queueId, \"queueId\")}/run`;\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}${baseUrl}/${index}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"get run from annotation queue\");\n        return await response.json();\n    }\n    /**\n     * Delete a run from an an annotation queue.\n     * @param queueId - The ID of the annotation queue to delete the run from\n     * @param queueRunId - The ID of the run to delete from the annotation queue\n     */\n    async deleteRunFromAnnotationQueue(queueId, queueRunId) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}/runs/${assertUuid(queueRunId, \"queueRunId\")}`, {\n            method: \"DELETE\",\n            headers: { ...this.headers, Accept: \"application/json\" },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"delete run from annotation queue\");\n    }\n    /**\n     * Get the size of an annotation queue.\n     * @param queueId - The ID of the annotation queue\n     */\n    async getSizeFromAnnotationQueue(queueId) {\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/annotation-queues/${assertUuid(queueId, \"queueId\")}/size`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"get size from annotation queue\");\n        return await response.json();\n    }\n    async _currentTenantIsOwner(owner) {\n        const settings = await this._getSettings();\n        return owner == \"-\" || settings.tenant_handle === owner;\n    }\n    async _ownerConflictError(action, owner) {\n        const settings = await this._getSettings();\n        return new Error(`Cannot ${action} for another tenant.\\n\n      Current tenant: ${settings.tenant_handle}\\n\n      Requested tenant: ${owner}`);\n    }\n    async _getLatestCommitHash(promptOwnerAndName) {\n        const res = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${promptOwnerAndName}/?limit=${1}&offset=${0}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        const json = await res.json();\n        if (!res.ok) {\n            const detail = typeof json.detail === \"string\"\n                ? json.detail\n                : JSON.stringify(json.detail);\n            const error = new Error(`Error ${res.status}: ${res.statusText}\\n${detail}`);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            error.statusCode = res.status;\n            throw error;\n        }\n        if (json.commits.length === 0) {\n            return undefined;\n        }\n        return json.commits[0].commit_hash;\n    }\n    async _likeOrUnlikePrompt(promptIdentifier, like) {\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/likes/${owner}/${promptName}`, {\n            method: \"POST\",\n            body: JSON.stringify({ like: like }),\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, `${like ? \"like\" : \"unlike\"} prompt`);\n        return await response.json();\n    }\n    async _getPromptUrl(promptIdentifier) {\n        const [owner, promptName, commitHash] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            if (commitHash !== \"latest\") {\n                return `${this.getHostUrl()}/hub/${owner}/${promptName}/${commitHash.substring(0, 8)}`;\n            }\n            else {\n                return `${this.getHostUrl()}/hub/${owner}/${promptName}`;\n            }\n        }\n        else {\n            const settings = await this._getSettings();\n            if (commitHash !== \"latest\") {\n                return `${this.getHostUrl()}/prompts/${promptName}/${commitHash.substring(0, 8)}?organizationId=${settings.id}`;\n            }\n            else {\n                return `${this.getHostUrl()}/prompts/${promptName}?organizationId=${settings.id}`;\n            }\n        }\n    }\n    async promptExists(promptIdentifier) {\n        const prompt = await this.getPrompt(promptIdentifier);\n        return !!prompt;\n    }\n    async likePrompt(promptIdentifier) {\n        return this._likeOrUnlikePrompt(promptIdentifier, true);\n    }\n    async unlikePrompt(promptIdentifier) {\n        return this._likeOrUnlikePrompt(promptIdentifier, false);\n    }\n    async *listCommits(promptOwnerAndName) {\n        for await (const commits of this._getPaginated(`/commits/${promptOwnerAndName}/`, new URLSearchParams(), (res) => res.commits)) {\n            yield* commits;\n        }\n    }\n    async *listPrompts(options) {\n        const params = new URLSearchParams();\n        params.append(\"sort_field\", options?.sortField ?? \"updated_at\");\n        params.append(\"sort_direction\", \"desc\");\n        params.append(\"is_archived\", (!!options?.isArchived).toString());\n        if (options?.isPublic !== undefined) {\n            params.append(\"is_public\", options.isPublic.toString());\n        }\n        if (options?.query) {\n            params.append(\"query\", options.query);\n        }\n        for await (const prompts of this._getPaginated(\"/repos\", params, (res) => res.repos)) {\n            yield* prompts;\n        }\n    }\n    async getPrompt(promptIdentifier) {\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        if (response.status === 404) {\n            return null;\n        }\n        await raiseForStatus(response, \"get prompt\");\n        const result = await response.json();\n        if (result.repo) {\n            return result.repo;\n        }\n        else {\n            return null;\n        }\n    }\n    async createPrompt(promptIdentifier, options) {\n        const settings = await this._getSettings();\n        if (options?.isPublic && !settings.tenant_handle) {\n            throw new Error(`Cannot create a public prompt without first\\n\n        creating a LangChain Hub handle. \n        You can add a handle by creating a public prompt at:\\n\n        https://smith.langchain.com/prompts`);\n        }\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            throw await this._ownerConflictError(\"create a prompt\", owner);\n        }\n        const data = {\n            repo_handle: promptName,\n            ...(options?.description && { description: options.description }),\n            ...(options?.readme && { readme: options.readme }),\n            ...(options?.tags && { tags: options.tags }),\n            is_public: !!options?.isPublic,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create prompt\");\n        const { repo } = await response.json();\n        return repo;\n    }\n    async createCommit(promptIdentifier, object, options) {\n        if (!(await this.promptExists(promptIdentifier))) {\n            throw new Error(\"Prompt does not exist, you must create it first.\");\n        }\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        const resolvedParentCommitHash = options?.parentCommitHash === \"latest\" || !options?.parentCommitHash\n            ? await this._getLatestCommitHash(`${owner}/${promptName}`)\n            : options?.parentCommitHash;\n        const payload = {\n            manifest: JSON.parse(JSON.stringify(object)),\n            parent_commit: resolvedParentCommitHash,\n        };\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${owner}/${promptName}`, {\n            method: \"POST\",\n            headers: { ...this.headers, \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(payload),\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"create commit\");\n        const result = await response.json();\n        return this._getPromptUrl(`${owner}/${promptName}${result.commit_hash ? `:${result.commit_hash}` : \"\"}`);\n    }\n    /**\n     * Update examples with attachments using multipart form data.\n     * @param updates List of ExampleUpdateWithAttachments objects to upsert\n     * @returns Promise with the update response\n     */\n    async updateExamplesMultipart(datasetId, updates = []) {\n        if (!(await this._getMultiPartSupport())) {\n            throw new Error(\"Your LangSmith version does not allow using the multipart examples endpoint, please update to the latest version.\");\n        }\n        const formData = new FormData();\n        for (const example of updates) {\n            const exampleId = example.id;\n            // Prepare the main example body\n            const exampleBody = {\n                ...(example.metadata && { metadata: example.metadata }),\n                ...(example.split && { split: example.split }),\n            };\n            // Add main example data\n            const stringifiedExample = serializePayloadForTracing(exampleBody);\n            const exampleBlob = new Blob([stringifiedExample], {\n                type: \"application/json\",\n            });\n            formData.append(exampleId, exampleBlob);\n            // Add inputs\n            if (example.inputs) {\n                const stringifiedInputs = serializePayloadForTracing(example.inputs);\n                const inputsBlob = new Blob([stringifiedInputs], {\n                    type: \"application/json\",\n                });\n                formData.append(`${exampleId}.inputs`, inputsBlob);\n            }\n            // Add outputs if present\n            if (example.outputs) {\n                const stringifiedOutputs = serializePayloadForTracing(example.outputs);\n                const outputsBlob = new Blob([stringifiedOutputs], {\n                    type: \"application/json\",\n                });\n                formData.append(`${exampleId}.outputs`, outputsBlob);\n            }\n            // Add attachments if present\n            if (example.attachments) {\n                for (const [name, attachment] of Object.entries(example.attachments)) {\n                    let mimeType;\n                    let data;\n                    if (Array.isArray(attachment)) {\n                        [mimeType, data] = attachment;\n                    }\n                    else {\n                        mimeType = attachment.mimeType;\n                        data = attachment.data;\n                    }\n                    const attachmentBlob = new Blob([data], {\n                        type: `${mimeType}; length=${data.byteLength}`,\n                    });\n                    formData.append(`${exampleId}.attachment.${name}`, attachmentBlob);\n                }\n            }\n            if (example.attachments_operations) {\n                const stringifiedAttachmentsOperations = serializePayloadForTracing(example.attachments_operations);\n                const attachmentsOperationsBlob = new Blob([stringifiedAttachmentsOperations], {\n                    type: \"application/json\",\n                });\n                formData.append(`${exampleId}.attachments_operations`, attachmentsOperationsBlob);\n            }\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/v1/platform/datasets/${datasetId}/examples`, {\n            method: \"PATCH\",\n            headers: this.headers,\n            body: formData,\n        });\n        const result = await response.json();\n        return result;\n    }\n    /**\n     * Upload examples with attachments using multipart form data.\n     * @param uploads List of ExampleUploadWithAttachments objects to upload\n     * @returns Promise with the upload response\n     */\n    async uploadExamplesMultipart(datasetId, uploads = []) {\n        if (!(await this._getMultiPartSupport())) {\n            throw new Error(\"Your LangSmith version does not allow using the multipart examples endpoint, please update to the latest version.\");\n        }\n        const formData = new FormData();\n        for (const example of uploads) {\n            const exampleId = (example.id ?? uuid.v4()).toString();\n            // Prepare the main example body\n            const exampleBody = {\n                created_at: example.created_at,\n                ...(example.metadata && { metadata: example.metadata }),\n                ...(example.split && { split: example.split }),\n            };\n            // Add main example data\n            const stringifiedExample = serializePayloadForTracing(exampleBody);\n            const exampleBlob = new Blob([stringifiedExample], {\n                type: \"application/json\",\n            });\n            formData.append(exampleId, exampleBlob);\n            // Add inputs\n            const stringifiedInputs = serializePayloadForTracing(example.inputs);\n            const inputsBlob = new Blob([stringifiedInputs], {\n                type: \"application/json\",\n            });\n            formData.append(`${exampleId}.inputs`, inputsBlob);\n            // Add outputs if present\n            if (example.outputs) {\n                const stringifiedOutputs = serializePayloadForTracing(example.outputs);\n                const outputsBlob = new Blob([stringifiedOutputs], {\n                    type: \"application/json\",\n                });\n                formData.append(`${exampleId}.outputs`, outputsBlob);\n            }\n            // Add attachments if present\n            if (example.attachments) {\n                for (const [name, attachment] of Object.entries(example.attachments)) {\n                    let mimeType;\n                    let data;\n                    if (Array.isArray(attachment)) {\n                        [mimeType, data] = attachment;\n                    }\n                    else {\n                        mimeType = attachment.mimeType;\n                        data = attachment.data;\n                    }\n                    const attachmentBlob = new Blob([data], {\n                        type: `${mimeType}; length=${data.byteLength}`,\n                    });\n                    formData.append(`${exampleId}.attachment.${name}`, attachmentBlob);\n                }\n            }\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/v1/platform/datasets/${datasetId}/examples`, {\n            method: \"POST\",\n            headers: this.headers,\n            body: formData,\n        });\n        const result = await response.json();\n        return result;\n    }\n    async updatePrompt(promptIdentifier, options) {\n        if (!(await this.promptExists(promptIdentifier))) {\n            throw new Error(\"Prompt does not exist, you must create it first.\");\n        }\n        const [owner, promptName] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            throw await this._ownerConflictError(\"update a prompt\", owner);\n        }\n        const payload = {};\n        if (options?.description !== undefined)\n            payload.description = options.description;\n        if (options?.readme !== undefined)\n            payload.readme = options.readme;\n        if (options?.tags !== undefined)\n            payload.tags = options.tags;\n        if (options?.isPublic !== undefined)\n            payload.is_public = options.isPublic;\n        if (options?.isArchived !== undefined)\n            payload.is_archived = options.isArchived;\n        // Check if payload is empty\n        if (Object.keys(payload).length === 0) {\n            throw new Error(\"No valid update options provided\");\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n            method: \"PATCH\",\n            body: JSON.stringify(payload),\n            headers: {\n                ...this.headers,\n                \"Content-Type\": \"application/json\",\n            },\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"update prompt\");\n        return response.json();\n    }\n    async deletePrompt(promptIdentifier) {\n        if (!(await this.promptExists(promptIdentifier))) {\n            throw new Error(\"Prompt does not exist, you must create it first.\");\n        }\n        const [owner, promptName, _] = parsePromptIdentifier(promptIdentifier);\n        if (!(await this._currentTenantIsOwner(owner))) {\n            throw await this._ownerConflictError(\"delete a prompt\", owner);\n        }\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/repos/${owner}/${promptName}`, {\n            method: \"DELETE\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        return await response.json();\n    }\n    async pullPromptCommit(promptIdentifier, options) {\n        const [owner, promptName, commitHash] = parsePromptIdentifier(promptIdentifier);\n        const response = await this.caller.call(_getFetchImplementation(), `${this.apiUrl}/commits/${owner}/${promptName}/${commitHash}${options?.includeModel ? \"?include_model=true\" : \"\"}`, {\n            method: \"GET\",\n            headers: this.headers,\n            signal: AbortSignal.timeout(this.timeout_ms),\n            ...this.fetchOptions,\n        });\n        await raiseForStatus(response, \"pull prompt commit\");\n        const result = await response.json();\n        return {\n            owner,\n            repo: promptName,\n            commit_hash: result.commit_hash,\n            manifest: result.manifest,\n            examples: result.examples,\n        };\n    }\n    /**\n     * This method should not be used directly, use `import { pull } from \"langchain/hub\"` instead.\n     * Using this method directly returns the JSON string of the prompt rather than a LangChain object.\n     * @private\n     */\n    async _pullPrompt(promptIdentifier, options) {\n        const promptObject = await this.pullPromptCommit(promptIdentifier, {\n            includeModel: options?.includeModel,\n        });\n        const prompt = JSON.stringify(promptObject.manifest);\n        return prompt;\n    }\n    async pushPrompt(promptIdentifier, options) {\n        // Create or update prompt metadata\n        if (await this.promptExists(promptIdentifier)) {\n            if (options && Object.keys(options).some((key) => key !== \"object\")) {\n                await this.updatePrompt(promptIdentifier, {\n                    description: options?.description,\n                    readme: options?.readme,\n                    tags: options?.tags,\n                    isPublic: options?.isPublic,\n                });\n            }\n        }\n        else {\n            await this.createPrompt(promptIdentifier, {\n                description: options?.description,\n                readme: options?.readme,\n                tags: options?.tags,\n                isPublic: options?.isPublic,\n            });\n        }\n        if (!options?.object) {\n            return await this._getPromptUrl(promptIdentifier);\n        }\n        // Create a commit with the new manifest\n        const url = await this.createCommit(promptIdentifier, options?.object, {\n            parentCommitHash: options?.parentCommitHash,\n        });\n        return url;\n    }\n    /**\n     * Clone a public dataset to your own langsmith tenant.\n     * This operation is idempotent. If you already have a dataset with the given name,\n     * this function will do nothing.\n  \n     * @param {string} tokenOrUrl The token of the public dataset to clone.\n     * @param {Object} [options] Additional options for cloning the dataset.\n     * @param {string} [options.sourceApiUrl] The URL of the langsmith server where the data is hosted. Defaults to the API URL of your current client.\n     * @param {string} [options.datasetName] The name of the dataset to create in your tenant. Defaults to the name of the public dataset.\n     * @returns {Promise<void>}\n     */\n    async clonePublicDataset(tokenOrUrl, options = {}) {\n        const { sourceApiUrl = this.apiUrl, datasetName } = options;\n        const [parsedApiUrl, tokenUuid] = this.parseTokenOrUrl(tokenOrUrl, sourceApiUrl);\n        const sourceClient = new Client({\n            apiUrl: parsedApiUrl,\n            // Placeholder API key not needed anymore in most cases, but\n            // some private deployments may have API key-based rate limiting\n            // that would cause this to fail if we provide no value.\n            apiKey: \"placeholder\",\n        });\n        const ds = await sourceClient.readSharedDataset(tokenUuid);\n        const finalDatasetName = datasetName || ds.name;\n        try {\n            if (await this.hasDataset({ datasetId: finalDatasetName })) {\n                console.log(`Dataset ${finalDatasetName} already exists in your tenant. Skipping.`);\n                return;\n            }\n        }\n        catch (_) {\n            // `.hasDataset` will throw an error if the dataset does not exist.\n            // no-op in that case\n        }\n        // Fetch examples first, then create the dataset\n        const examples = await sourceClient.listSharedExamples(tokenUuid);\n        const dataset = await this.createDataset(finalDatasetName, {\n            description: ds.description,\n            dataType: ds.data_type || \"kv\",\n            inputsSchema: ds.inputs_schema_definition ?? undefined,\n            outputsSchema: ds.outputs_schema_definition ?? undefined,\n        });\n        try {\n            await this.createExamples({\n                inputs: examples.map((e) => e.inputs),\n                outputs: examples.flatMap((e) => (e.outputs ? [e.outputs] : [])),\n                datasetId: dataset.id,\n            });\n        }\n        catch (e) {\n            console.error(`An error occurred while creating dataset ${finalDatasetName}. ` +\n                \"You should delete it manually.\");\n            throw e;\n        }\n    }\n    parseTokenOrUrl(urlOrToken, apiUrl, numParts = 2, kind = \"dataset\") {\n        // Try parsing as UUID\n        try {\n            assertUuid(urlOrToken); // Will throw if it's not a UUID.\n            return [apiUrl, urlOrToken];\n        }\n        catch (_) {\n            // no-op if it's not a uuid\n        }\n        // Parse as URL\n        try {\n            const parsedUrl = new URL(urlOrToken);\n            const pathParts = parsedUrl.pathname\n                .split(\"/\")\n                .filter((part) => part !== \"\");\n            if (pathParts.length >= numParts) {\n                const tokenUuid = pathParts[pathParts.length - numParts];\n                return [apiUrl, tokenUuid];\n            }\n            else {\n                throw new Error(`Invalid public ${kind} URL: ${urlOrToken}`);\n            }\n        }\n        catch (error) {\n            throw new Error(`Invalid public ${kind} URL or token: ${urlOrToken}`);\n        }\n    }\n    /**\n     * Awaits all pending trace batches. Useful for environments where\n     * you need to be sure that all tracing requests finish before execution ends,\n     * such as serverless environments.\n     *\n     * @example\n     * ```\n     * import { Client } from \"langsmith\";\n     *\n     * const client = new Client();\n     *\n     * try {\n     *   // Tracing happens here\n     *   ...\n     * } finally {\n     *   await client.awaitPendingTraceBatches();\n     * }\n     * ```\n     *\n     * @returns A promise that resolves once all currently pending traces have sent.\n     */\n    awaitPendingTraceBatches() {\n        if (this.manualFlushMode) {\n            console.warn(\"[WARNING]: When tracing in manual flush mode, you must call `await client.flush()` manually to submit trace batches.\");\n            return Promise.resolve();\n        }\n        return Promise.all([\n            ...this.autoBatchQueue.items.map(({ itemPromise }) => itemPromise),\n            this.batchIngestCaller.queue.onIdle(),\n        ]);\n    }\n}\n","export { Client, } from \"./client.js\";\nexport { RunTree } from \"./run_trees.js\";\nexport { overrideFetchImplementation } from \"./singletons/fetch.js\";\n// Update using yarn bump-version\nexport const __version__ = \"0.3.7\";\n","import { getLangSmithEnvironmentVariable } from \"./utils/env.js\";\nexport const isTracingEnabled = (tracingEnabled) => {\n    if (tracingEnabled !== undefined) {\n        return tracingEnabled;\n    }\n    const envVars = [\"TRACING_V2\", \"TRACING\"];\n    return !!envVars.find((envVar) => getLangSmithEnvironmentVariable(envVar) === \"true\");\n};\n","export const _LC_CONTEXT_VARIABLES_KEY = Symbol.for(\"lc:context_variables\");\n","import * as uuid from \"uuid\";\nimport { getEnvironmentVariable, getLangSmithEnvironmentVariable, getRuntimeEnvironment, } from \"./utils/env.js\";\nimport { Client } from \"./client.js\";\nimport { isTracingEnabled } from \"./env.js\";\nimport { warnOnce } from \"./utils/warn.js\";\nimport { _LC_CONTEXT_VARIABLES_KEY } from \"./singletons/constants.js\";\nfunction stripNonAlphanumeric(input) {\n    return input.replace(/[-:.]/g, \"\");\n}\nexport function convertToDottedOrderFormat(epoch, runId, executionOrder = 1) {\n    // Date only has millisecond precision, so we use the microseconds to break\n    // possible ties, avoiding incorrect run order\n    const paddedOrder = executionOrder.toFixed(0).slice(0, 3).padStart(3, \"0\");\n    return (stripNonAlphanumeric(`${new Date(epoch).toISOString().slice(0, -1)}${paddedOrder}Z`) + runId);\n}\n/**\n * Baggage header information\n */\nclass Baggage {\n    constructor(metadata, tags) {\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.metadata = metadata;\n        this.tags = tags;\n    }\n    static fromHeader(value) {\n        const items = value.split(\",\");\n        let metadata = {};\n        let tags = [];\n        for (const item of items) {\n            const [key, uriValue] = item.split(\"=\");\n            const value = decodeURIComponent(uriValue);\n            if (key === \"langsmith-metadata\") {\n                metadata = JSON.parse(value);\n            }\n            else if (key === \"langsmith-tags\") {\n                tags = value.split(\",\");\n            }\n        }\n        return new Baggage(metadata, tags);\n    }\n    toHeader() {\n        const items = [];\n        if (this.metadata && Object.keys(this.metadata).length > 0) {\n            items.push(`langsmith-metadata=${encodeURIComponent(JSON.stringify(this.metadata))}`);\n        }\n        if (this.tags && this.tags.length > 0) {\n            items.push(`langsmith-tags=${encodeURIComponent(this.tags.join(\",\"))}`);\n        }\n        return items.join(\",\");\n    }\n}\nexport class RunTree {\n    constructor(originalConfig) {\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"run_type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"project_name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"parent_run\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"child_runs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"start_time\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"end_time\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"extra\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"error\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"serialized\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"reference_example_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"events\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"trace_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"dotted_order\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tracingEnabled\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"execution_order\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"child_execution_order\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Attachments associated with the run.\n         * Each entry is a tuple of [mime_type, bytes]\n         */\n        Object.defineProperty(this, \"attachments\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // If you pass in a run tree directly, return a shallow clone\n        if (isRunTree(originalConfig)) {\n            Object.assign(this, { ...originalConfig });\n            return;\n        }\n        const defaultConfig = RunTree.getDefaultConfig();\n        const { metadata, ...config } = originalConfig;\n        const client = config.client ?? RunTree.getSharedClient();\n        const dedupedMetadata = {\n            ...metadata,\n            ...config?.extra?.metadata,\n        };\n        config.extra = { ...config.extra, metadata: dedupedMetadata };\n        Object.assign(this, { ...defaultConfig, ...config, client });\n        if (!this.trace_id) {\n            if (this.parent_run) {\n                this.trace_id = this.parent_run.trace_id ?? this.id;\n            }\n            else {\n                this.trace_id = this.id;\n            }\n        }\n        this.execution_order ??= 1;\n        this.child_execution_order ??= 1;\n        if (!this.dotted_order) {\n            const currentDottedOrder = convertToDottedOrderFormat(this.start_time, this.id, this.execution_order);\n            if (this.parent_run) {\n                this.dotted_order =\n                    this.parent_run.dotted_order + \".\" + currentDottedOrder;\n            }\n            else {\n                this.dotted_order = currentDottedOrder;\n            }\n        }\n    }\n    static getDefaultConfig() {\n        return {\n            id: uuid.v4(),\n            run_type: \"chain\",\n            project_name: getLangSmithEnvironmentVariable(\"PROJECT\") ??\n                getEnvironmentVariable(\"LANGCHAIN_SESSION\") ?? // TODO: Deprecate\n                \"default\",\n            child_runs: [],\n            api_url: getEnvironmentVariable(\"LANGCHAIN_ENDPOINT\") ?? \"http://localhost:1984\",\n            api_key: getEnvironmentVariable(\"LANGCHAIN_API_KEY\"),\n            caller_options: {},\n            start_time: Date.now(),\n            serialized: {},\n            inputs: {},\n            extra: {},\n        };\n    }\n    static getSharedClient() {\n        if (!RunTree.sharedClient) {\n            RunTree.sharedClient = new Client();\n        }\n        return RunTree.sharedClient;\n    }\n    createChild(config) {\n        const child_execution_order = this.child_execution_order + 1;\n        const child = new RunTree({\n            ...config,\n            parent_run: this,\n            project_name: this.project_name,\n            client: this.client,\n            tracingEnabled: this.tracingEnabled,\n            execution_order: child_execution_order,\n            child_execution_order: child_execution_order,\n        });\n        // Copy context vars over into the new run tree.\n        if (_LC_CONTEXT_VARIABLES_KEY in this) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            child[_LC_CONTEXT_VARIABLES_KEY] =\n                this[_LC_CONTEXT_VARIABLES_KEY];\n        }\n        const LC_CHILD = Symbol.for(\"lc:child_config\");\n        const presentConfig = config.extra?.[LC_CHILD] ??\n            this.extra[LC_CHILD];\n        // tracing for LangChain is defined by the _parentRunId and runMap of the tracer\n        if (isRunnableConfigLike(presentConfig)) {\n            const newConfig = { ...presentConfig };\n            const callbacks = isCallbackManagerLike(newConfig.callbacks)\n                ? newConfig.callbacks.copy?.()\n                : undefined;\n            if (callbacks) {\n                // update the parent run id\n                Object.assign(callbacks, { _parentRunId: child.id });\n                // only populate if we're in a newer LC.JS version\n                callbacks.handlers\n                    ?.find(isLangChainTracerLike)\n                    ?.updateFromRunTree?.(child);\n                newConfig.callbacks = callbacks;\n            }\n            child.extra[LC_CHILD] = newConfig;\n        }\n        // propagate child_execution_order upwards\n        const visited = new Set();\n        let current = this;\n        while (current != null && !visited.has(current.id)) {\n            visited.add(current.id);\n            current.child_execution_order = Math.max(current.child_execution_order, child_execution_order);\n            current = current.parent_run;\n        }\n        this.child_runs.push(child);\n        return child;\n    }\n    async end(outputs, error, endTime = Date.now(), metadata) {\n        this.outputs = this.outputs ?? outputs;\n        this.error = this.error ?? error;\n        this.end_time = this.end_time ?? endTime;\n        if (metadata && Object.keys(metadata).length > 0) {\n            this.extra = this.extra\n                ? { ...this.extra, metadata: { ...this.extra.metadata, ...metadata } }\n                : { metadata };\n        }\n    }\n    _convertToCreate(run, runtimeEnv, excludeChildRuns = true) {\n        const runExtra = run.extra ?? {};\n        if (!runExtra.runtime) {\n            runExtra.runtime = {};\n        }\n        if (runtimeEnv) {\n            for (const [k, v] of Object.entries(runtimeEnv)) {\n                if (!runExtra.runtime[k]) {\n                    runExtra.runtime[k] = v;\n                }\n            }\n        }\n        let child_runs;\n        let parent_run_id;\n        if (!excludeChildRuns) {\n            child_runs = run.child_runs.map((child_run) => this._convertToCreate(child_run, runtimeEnv, excludeChildRuns));\n            parent_run_id = undefined;\n        }\n        else {\n            parent_run_id = run.parent_run?.id;\n            child_runs = [];\n        }\n        const persistedRun = {\n            id: run.id,\n            name: run.name,\n            start_time: run.start_time,\n            end_time: run.end_time,\n            run_type: run.run_type,\n            reference_example_id: run.reference_example_id,\n            extra: runExtra,\n            serialized: run.serialized,\n            error: run.error,\n            inputs: run.inputs,\n            outputs: run.outputs,\n            session_name: run.project_name,\n            child_runs: child_runs,\n            parent_run_id: parent_run_id,\n            trace_id: run.trace_id,\n            dotted_order: run.dotted_order,\n            tags: run.tags,\n            attachments: run.attachments,\n        };\n        return persistedRun;\n    }\n    async postRun(excludeChildRuns = true) {\n        try {\n            const runtimeEnv = getRuntimeEnvironment();\n            const runCreate = await this._convertToCreate(this, runtimeEnv, true);\n            await this.client.createRun(runCreate);\n            if (!excludeChildRuns) {\n                warnOnce(\"Posting with excludeChildRuns=false is deprecated and will be removed in a future version.\");\n                for (const childRun of this.child_runs) {\n                    await childRun.postRun(false);\n                }\n            }\n        }\n        catch (error) {\n            console.error(`Error in postRun for run ${this.id}:`, error);\n        }\n    }\n    async patchRun() {\n        try {\n            const runUpdate = {\n                end_time: this.end_time,\n                error: this.error,\n                inputs: this.inputs,\n                outputs: this.outputs,\n                parent_run_id: this.parent_run?.id,\n                reference_example_id: this.reference_example_id,\n                extra: this.extra,\n                events: this.events,\n                dotted_order: this.dotted_order,\n                trace_id: this.trace_id,\n                tags: this.tags,\n                attachments: this.attachments,\n            };\n            await this.client.updateRun(this.id, runUpdate);\n        }\n        catch (error) {\n            console.error(`Error in patchRun for run ${this.id}`, error);\n        }\n    }\n    toJSON() {\n        return this._convertToCreate(this, undefined, false);\n    }\n    static fromRunnableConfig(parentConfig, props) {\n        // We only handle the callback manager case for now\n        const callbackManager = parentConfig?.callbacks;\n        let parentRun;\n        let projectName;\n        let client;\n        let tracingEnabled = isTracingEnabled();\n        if (callbackManager) {\n            const parentRunId = callbackManager?.getParentRunId?.() ?? \"\";\n            const langChainTracer = callbackManager?.handlers?.find((handler) => handler?.name == \"langchain_tracer\");\n            parentRun = langChainTracer?.getRun?.(parentRunId);\n            projectName = langChainTracer?.projectName;\n            client = langChainTracer?.client;\n            tracingEnabled = tracingEnabled || !!langChainTracer;\n        }\n        if (!parentRun) {\n            return new RunTree({\n                ...props,\n                client,\n                tracingEnabled,\n                project_name: projectName,\n            });\n        }\n        const parentRunTree = new RunTree({\n            name: parentRun.name,\n            id: parentRun.id,\n            trace_id: parentRun.trace_id,\n            dotted_order: parentRun.dotted_order,\n            client,\n            tracingEnabled,\n            project_name: projectName,\n            tags: [\n                ...new Set((parentRun?.tags ?? []).concat(parentConfig?.tags ?? [])),\n            ],\n            extra: {\n                metadata: {\n                    ...parentRun?.extra?.metadata,\n                    ...parentConfig?.metadata,\n                },\n            },\n        });\n        return parentRunTree.createChild(props);\n    }\n    static fromDottedOrder(dottedOrder) {\n        return this.fromHeaders({ \"langsmith-trace\": dottedOrder });\n    }\n    static fromHeaders(headers, inheritArgs) {\n        const rawHeaders = \"get\" in headers && typeof headers.get === \"function\"\n            ? {\n                \"langsmith-trace\": headers.get(\"langsmith-trace\"),\n                baggage: headers.get(\"baggage\"),\n            }\n            : headers;\n        const headerTrace = rawHeaders[\"langsmith-trace\"];\n        if (!headerTrace || typeof headerTrace !== \"string\")\n            return undefined;\n        const parentDottedOrder = headerTrace.trim();\n        const parsedDottedOrder = parentDottedOrder.split(\".\").map((part) => {\n            const [strTime, uuid] = part.split(\"Z\");\n            return { strTime, time: Date.parse(strTime + \"Z\"), uuid };\n        });\n        const traceId = parsedDottedOrder[0].uuid;\n        const config = {\n            ...inheritArgs,\n            name: inheritArgs?.[\"name\"] ?? \"parent\",\n            run_type: inheritArgs?.[\"run_type\"] ?? \"chain\",\n            start_time: inheritArgs?.[\"start_time\"] ?? Date.now(),\n            id: parsedDottedOrder.at(-1)?.uuid,\n            trace_id: traceId,\n            dotted_order: parentDottedOrder,\n        };\n        if (rawHeaders[\"baggage\"] && typeof rawHeaders[\"baggage\"] === \"string\") {\n            const baggage = Baggage.fromHeader(rawHeaders[\"baggage\"]);\n            config.metadata = baggage.metadata;\n            config.tags = baggage.tags;\n        }\n        return new RunTree(config);\n    }\n    toHeaders(headers) {\n        const result = {\n            \"langsmith-trace\": this.dotted_order,\n            baggage: new Baggage(this.extra?.metadata, this.tags).toHeader(),\n        };\n        if (headers) {\n            for (const [key, value] of Object.entries(result)) {\n                headers.set(key, value);\n            }\n        }\n        return result;\n    }\n}\nObject.defineProperty(RunTree, \"sharedClient\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: null\n});\nexport function isRunTree(x) {\n    return (x !== undefined &&\n        typeof x.createChild === \"function\" &&\n        typeof x.postRun === \"function\");\n}\nfunction isLangChainTracerLike(x) {\n    return (typeof x === \"object\" &&\n        x != null &&\n        typeof x.name === \"string\" &&\n        x.name === \"langchain_tracer\");\n}\nfunction containsLangChainTracerLike(x) {\n    return (Array.isArray(x) && x.some((callback) => isLangChainTracerLike(callback)));\n}\nfunction isCallbackManagerLike(x) {\n    return (typeof x === \"object\" &&\n        x != null &&\n        Array.isArray(x.handlers));\n}\nexport function isRunnableConfigLike(x) {\n    // Check that it's an object with a callbacks arg\n    // that has either a CallbackManagerLike object with a langchain tracer within it\n    // or an array with a LangChainTracerLike object within it\n    return (x !== undefined &&\n        typeof x.callbacks === \"object\" &&\n        // Callback manager with a langchain tracer\n        (containsLangChainTracerLike(x.callbacks?.handlers) ||\n            // Or it's an array with a LangChainTracerLike object within it\n            containsLangChainTracerLike(x.callbacks)));\n}\n","import { isRunTree } from \"../run_trees.js\";\nclass MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_, callback) {\n        return callback();\n    }\n}\nconst TRACING_ALS_KEY = Symbol.for(\"ls:tracing_async_local_storage\");\nconst mockAsyncLocalStorage = new MockAsyncLocalStorage();\nclass AsyncLocalStorageProvider {\n    getInstance() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return globalThis[TRACING_ALS_KEY] ?? mockAsyncLocalStorage;\n    }\n    initializeGlobalInstance(instance) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (globalThis[TRACING_ALS_KEY] === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            globalThis[TRACING_ALS_KEY] = instance;\n        }\n    }\n}\nexport const AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\n/**\n * Return the current run tree from within a traceable-wrapped function.\n * Will throw an error if called outside of a traceable function.\n *\n * @returns The run tree for the given context.\n */\nexport const getCurrentRunTree = () => {\n    const runTree = AsyncLocalStorageProviderSingleton.getInstance().getStore();\n    if (!isRunTree(runTree)) {\n        throw new Error([\n            \"Could not get the current run tree.\",\n            \"\",\n            \"Please make sure you are calling this method within a traceable function and that tracing is enabled.\",\n        ].join(\"\\n\"));\n    }\n    return runTree;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function withRunTree(runTree, fn) {\n    const storage = AsyncLocalStorageProviderSingleton.getInstance();\n    return new Promise((resolve, reject) => {\n        storage.run(runTree, () => void Promise.resolve(fn()).then(resolve).catch(reject));\n    });\n}\nexport const ROOT = Symbol.for(\"langsmith:traceable:root\");\nexport function isTraceableFunction(x\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    return typeof x === \"function\" && \"langsmith:traceable\" in x;\n}\n","export function isPromiseMethod(x) {\n    if (x === \"then\" || x === \"catch\" || x === \"finally\") {\n        return true;\n    }\n    return false;\n}\nexport function isKVMap(x) {\n    if (typeof x !== \"object\" || x == null) {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(x);\n    return ((prototype === null ||\n        prototype === Object.prototype ||\n        Object.getPrototypeOf(prototype) === null) &&\n        !(Symbol.toStringTag in x) &&\n        !(Symbol.iterator in x));\n}\nexport const isAsyncIterable = (x) => x != null &&\n    typeof x === \"object\" &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof x[Symbol.asyncIterator] === \"function\";\nexport const isIteratorLike = (x) => x != null &&\n    typeof x === \"object\" &&\n    \"next\" in x &&\n    typeof x.next === \"function\";\nconst GeneratorFunction = function* () { }.constructor;\nexport const isGenerator = (x) => \n// eslint-disable-next-line no-instanceof/no-instanceof\nx != null && typeof x === \"function\" && x instanceof GeneratorFunction;\nexport const isThenable = (x) => x != null &&\n    typeof x === \"object\" &&\n    \"then\" in x &&\n    typeof x.then === \"function\";\nexport const isReadableStream = (x) => x != null &&\n    typeof x === \"object\" &&\n    \"getReader\" in x &&\n    typeof x.getReader === \"function\";\n","import { AsyncLocalStorage } from \"node:async_hooks\";\nimport { RunTree, isRunTree, isRunnableConfigLike, } from \"./run_trees.js\";\nimport { isTracingEnabled } from \"./env.js\";\nimport { ROOT, AsyncLocalStorageProviderSingleton, } from \"./singletons/traceable.js\";\nimport { _LC_CONTEXT_VARIABLES_KEY } from \"./singletons/constants.js\";\nimport { isKVMap, isReadableStream, isAsyncIterable, isIteratorLike, isThenable, isGenerator, isPromiseMethod, } from \"./utils/asserts.js\";\nAsyncLocalStorageProviderSingleton.initializeGlobalInstance(new AsyncLocalStorage());\nconst runInputsToMap = (rawInputs) => {\n    const firstInput = rawInputs[0];\n    let inputs;\n    if (firstInput == null) {\n        inputs = {};\n    }\n    else if (rawInputs.length > 1) {\n        inputs = { args: rawInputs };\n    }\n    else if (isKVMap(firstInput)) {\n        inputs = firstInput;\n    }\n    else {\n        inputs = { input: firstInput };\n    }\n    return inputs;\n};\nconst handleRunInputs = (inputs, processInputs) => {\n    try {\n        return processInputs(inputs);\n    }\n    catch (e) {\n        console.error(\"Error occurred during processInputs. Sending raw inputs:\", e);\n        return inputs;\n    }\n};\nconst handleRunOutputs = (rawOutputs, processOutputs) => {\n    let outputs;\n    if (isKVMap(rawOutputs)) {\n        outputs = rawOutputs;\n    }\n    else {\n        outputs = { outputs: rawOutputs };\n    }\n    try {\n        return processOutputs(outputs);\n    }\n    catch (e) {\n        console.error(\"Error occurred during processOutputs. Sending raw outputs:\", e);\n        return outputs;\n    }\n};\nconst handleRunAttachments = (rawInputs, extractAttachments) => {\n    if (!extractAttachments) {\n        return [undefined, rawInputs];\n    }\n    try {\n        const [attachments, remainingArgs] = extractAttachments(...rawInputs);\n        return [attachments, remainingArgs];\n    }\n    catch (e) {\n        console.error(\"Error occurred during extractAttachments:\", e);\n        return [undefined, rawInputs];\n    }\n};\nconst getTracingRunTree = (runTree, inputs, getInvocationParams, processInputs, extractAttachments) => {\n    if (!isTracingEnabled(runTree.tracingEnabled)) {\n        return undefined;\n    }\n    const [attached, args] = handleRunAttachments(inputs, extractAttachments);\n    runTree.attachments = attached;\n    runTree.inputs = handleRunInputs(args, processInputs);\n    const invocationParams = getInvocationParams?.(...inputs);\n    if (invocationParams != null) {\n        runTree.extra ??= {};\n        runTree.extra.metadata = {\n            ...invocationParams,\n            ...runTree.extra.metadata,\n        };\n    }\n    return runTree;\n};\n// idea: store the state of the promise outside\n// but only when the promise is \"consumed\"\nconst getSerializablePromise = (arg) => {\n    const proxyState = { current: undefined };\n    const promiseProxy = new Proxy(arg, {\n        get(target, prop, receiver) {\n            if (prop === \"then\") {\n                const boundThen = arg[prop].bind(arg);\n                return (resolve, reject = (x) => {\n                    throw x;\n                }) => {\n                    return boundThen((value) => {\n                        proxyState.current = [\"resolve\", value];\n                        return resolve(value);\n                    }, (error) => {\n                        proxyState.current = [\"reject\", error];\n                        return reject(error);\n                    });\n                };\n            }\n            if (prop === \"catch\") {\n                const boundCatch = arg[prop].bind(arg);\n                return (reject) => {\n                    return boundCatch((error) => {\n                        proxyState.current = [\"reject\", error];\n                        return reject(error);\n                    });\n                };\n            }\n            if (prop === \"toJSON\") {\n                return () => {\n                    if (!proxyState.current)\n                        return undefined;\n                    const [type, value] = proxyState.current ?? [];\n                    if (type === \"resolve\")\n                        return value;\n                    return { error: value };\n                };\n            }\n            return Reflect.get(target, prop, receiver);\n        },\n    });\n    return promiseProxy;\n};\nconst convertSerializableArg = (arg) => {\n    if (isReadableStream(arg)) {\n        const proxyState = [];\n        const transform = new TransformStream({\n            start: () => void 0,\n            transform: (chunk, controller) => {\n                proxyState.push(chunk);\n                controller.enqueue(chunk);\n            },\n            flush: () => void 0,\n        });\n        const pipeThrough = arg.pipeThrough(transform);\n        Object.assign(pipeThrough, { toJSON: () => proxyState });\n        return pipeThrough;\n    }\n    if (isAsyncIterable(arg)) {\n        const proxyState = { current: [] };\n        return new Proxy(arg, {\n            get(target, prop, receiver) {\n                if (prop === Symbol.asyncIterator) {\n                    return () => {\n                        const boundIterator = arg[Symbol.asyncIterator].bind(arg);\n                        const iterator = boundIterator();\n                        return new Proxy(iterator, {\n                            get(target, prop, receiver) {\n                                if (prop === \"next\" || prop === \"return\" || prop === \"throw\") {\n                                    const bound = iterator.next.bind(iterator);\n                                    return (...args) => {\n                                        // @ts-expect-error TS cannot infer the argument types for the bound function\n                                        const wrapped = getSerializablePromise(bound(...args));\n                                        proxyState.current.push(wrapped);\n                                        return wrapped;\n                                    };\n                                }\n                                if (prop === \"return\" || prop === \"throw\") {\n                                    return iterator.next.bind(iterator);\n                                }\n                                return Reflect.get(target, prop, receiver);\n                            },\n                        });\n                    };\n                }\n                if (prop === \"toJSON\") {\n                    return () => {\n                        const onlyNexts = proxyState.current;\n                        const serialized = onlyNexts.map((next) => next.toJSON());\n                        const chunks = serialized.reduce((memo, next) => {\n                            if (next?.value)\n                                memo.push(next.value);\n                            return memo;\n                        }, []);\n                        return chunks;\n                    };\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n        });\n    }\n    if (!Array.isArray(arg) && isIteratorLike(arg)) {\n        const proxyState = [];\n        return new Proxy(arg, {\n            get(target, prop, receiver) {\n                if (prop === \"next\" || prop === \"return\" || prop === \"throw\") {\n                    const bound = arg[prop]?.bind(arg);\n                    return (...args) => {\n                        // @ts-expect-error TS cannot infer the argument types for the bound function\n                        const next = bound?.(...args);\n                        if (next != null)\n                            proxyState.push(next);\n                        return next;\n                    };\n                }\n                if (prop === \"toJSON\") {\n                    return () => {\n                        const chunks = proxyState.reduce((memo, next) => {\n                            if (next.value)\n                                memo.push(next.value);\n                            return memo;\n                        }, []);\n                        return chunks;\n                    };\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n        });\n    }\n    if (isThenable(arg)) {\n        return getSerializablePromise(arg);\n    }\n    return arg;\n};\n/**\n * Higher-order function that takes function as input and returns a\n * \"TraceableFunction\" - a wrapped version of the input that\n * automatically handles tracing. If the returned traceable function calls any\n * traceable functions, those are automatically traced as well.\n *\n * The returned TraceableFunction can accept a run tree or run tree config as\n * its first argument. If omitted, it will default to the caller's run tree,\n * or will be treated as a root run.\n *\n * @param wrappedFunc Targeted function to be traced\n * @param config Additional metadata such as name, tags or providing\n *     a custom LangSmith client instance\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function traceable(wrappedFunc, config) {\n    const { aggregator, argsConfigPath, __finalTracedIteratorKey, processInputs, processOutputs, extractAttachments, ...runTreeConfig } = config ?? {};\n    const processInputsFn = processInputs ?? ((x) => x);\n    const processOutputsFn = processOutputs ?? ((x) => x);\n    const extractAttachmentsFn = extractAttachments ?? ((...x) => [undefined, runInputsToMap(x)]);\n    const traceableFunc = (...args) => {\n        let ensuredConfig;\n        try {\n            let runtimeConfig;\n            if (argsConfigPath) {\n                const [index, path] = argsConfigPath;\n                if (index === args.length - 1 && !path) {\n                    runtimeConfig = args.pop();\n                }\n                else if (index <= args.length &&\n                    typeof args[index] === \"object\" &&\n                    args[index] !== null) {\n                    if (path) {\n                        const { [path]: extracted, ...rest } = args[index];\n                        runtimeConfig = extracted;\n                        args[index] = rest;\n                    }\n                    else {\n                        runtimeConfig = args[index];\n                        args.splice(index, 1);\n                    }\n                }\n            }\n            ensuredConfig = {\n                name: wrappedFunc.name || \"<lambda>\",\n                ...runTreeConfig,\n                ...runtimeConfig,\n                tags: [\n                    ...new Set([\n                        ...(runTreeConfig?.tags ?? []),\n                        ...(runtimeConfig?.tags ?? []),\n                    ]),\n                ],\n                metadata: {\n                    ...runTreeConfig?.metadata,\n                    ...runtimeConfig?.metadata,\n                },\n            };\n        }\n        catch (err) {\n            console.warn(`Failed to extract runtime config from args for ${runTreeConfig?.name ?? wrappedFunc.name}`, err);\n            ensuredConfig = {\n                name: wrappedFunc.name || \"<lambda>\",\n                ...runTreeConfig,\n            };\n        }\n        const asyncLocalStorage = AsyncLocalStorageProviderSingleton.getInstance();\n        // TODO: deal with possible nested promises and async iterables\n        const processedArgs = args;\n        for (let i = 0; i < processedArgs.length; i++) {\n            processedArgs[i] = convertSerializableArg(processedArgs[i]);\n        }\n        const [currentRunTree, rawInputs] = (() => {\n            const [firstArg, ...restArgs] = processedArgs;\n            // used for handoff between LangChain.JS and traceable functions\n            if (isRunnableConfigLike(firstArg)) {\n                return [\n                    getTracingRunTree(RunTree.fromRunnableConfig(firstArg, ensuredConfig), restArgs, config?.getInvocationParams, processInputsFn, extractAttachmentsFn),\n                    restArgs,\n                ];\n            }\n            // deprecated: legacy CallbackManagerRunTree used in runOnDataset\n            // override ALS and do not pass-through the run tree\n            if (isRunTree(firstArg) &&\n                \"callbackManager\" in firstArg &&\n                firstArg.callbackManager != null) {\n                return [firstArg, restArgs];\n            }\n            // when ALS is unreliable, users can manually\n            // pass in the run tree\n            if (firstArg === ROOT || isRunTree(firstArg)) {\n                const currentRunTree = getTracingRunTree(firstArg === ROOT\n                    ? new RunTree(ensuredConfig)\n                    : firstArg.createChild(ensuredConfig), restArgs, config?.getInvocationParams, processInputsFn, extractAttachmentsFn);\n                return [currentRunTree, [currentRunTree, ...restArgs]];\n            }\n            // Node.JS uses AsyncLocalStorage (ALS) and AsyncResource\n            // to allow storing context\n            const prevRunFromStore = asyncLocalStorage.getStore();\n            if (isRunTree(prevRunFromStore)) {\n                return [\n                    getTracingRunTree(prevRunFromStore.createChild(ensuredConfig), processedArgs, config?.getInvocationParams, processInputsFn, extractAttachmentsFn),\n                    processedArgs,\n                ];\n            }\n            const currentRunTree = getTracingRunTree(new RunTree(ensuredConfig), processedArgs, config?.getInvocationParams, processInputsFn, extractAttachmentsFn);\n            // If a context var is set by LangChain outside of a traceable,\n            // it will be an object with a single property and we should copy\n            // context vars over into the new run tree.\n            if (prevRunFromStore !== undefined &&\n                _LC_CONTEXT_VARIABLES_KEY in prevRunFromStore) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                currentRunTree[_LC_CONTEXT_VARIABLES_KEY] =\n                    prevRunFromStore[_LC_CONTEXT_VARIABLES_KEY];\n            }\n            return [currentRunTree, processedArgs];\n        })();\n        return asyncLocalStorage.run(currentRunTree, () => {\n            const postRunPromise = currentRunTree?.postRun();\n            async function handleChunks(chunks) {\n                if (aggregator !== undefined) {\n                    try {\n                        return await aggregator(chunks);\n                    }\n                    catch (e) {\n                        console.error(`[ERROR]: LangSmith aggregation failed: `, e);\n                    }\n                }\n                return chunks;\n            }\n            function tapReadableStreamForTracing(stream, snapshot) {\n                const reader = stream.getReader();\n                let finished = false;\n                const chunks = [];\n                const tappedStream = new ReadableStream({\n                    async start(controller) {\n                        // eslint-disable-next-line no-constant-condition\n                        while (true) {\n                            const result = await (snapshot\n                                ? snapshot(() => reader.read())\n                                : reader.read());\n                            if (result.done) {\n                                finished = true;\n                                await currentRunTree?.end(handleRunOutputs(await handleChunks(chunks), processOutputsFn));\n                                await handleEnd();\n                                controller.close();\n                                break;\n                            }\n                            chunks.push(result.value);\n                            controller.enqueue(result.value);\n                        }\n                    },\n                    async cancel(reason) {\n                        if (!finished)\n                            await currentRunTree?.end(undefined, \"Cancelled\");\n                        await currentRunTree?.end(handleRunOutputs(await handleChunks(chunks), processOutputsFn));\n                        await handleEnd();\n                        return reader.cancel(reason);\n                    },\n                });\n                return tappedStream;\n            }\n            async function* wrapAsyncIteratorForTracing(iterator, snapshot) {\n                let finished = false;\n                const chunks = [];\n                try {\n                    while (true) {\n                        const { value, done } = await (snapshot\n                            ? snapshot(() => iterator.next())\n                            : iterator.next());\n                        if (done) {\n                            finished = true;\n                            break;\n                        }\n                        chunks.push(value);\n                        yield value;\n                    }\n                }\n                catch (e) {\n                    await currentRunTree?.end(undefined, String(e));\n                    throw e;\n                }\n                finally {\n                    if (!finished)\n                        await currentRunTree?.end(undefined, \"Cancelled\");\n                    await currentRunTree?.end(handleRunOutputs(await handleChunks(chunks), processOutputsFn));\n                    await handleEnd();\n                }\n            }\n            function wrapAsyncGeneratorForTracing(iterable, snapshot) {\n                if (isReadableStream(iterable)) {\n                    return tapReadableStreamForTracing(iterable, snapshot);\n                }\n                const iterator = iterable[Symbol.asyncIterator]();\n                const wrappedIterator = wrapAsyncIteratorForTracing(iterator, snapshot);\n                iterable[Symbol.asyncIterator] = () => wrappedIterator;\n                return iterable;\n            }\n            async function handleEnd() {\n                const onEnd = config?.on_end;\n                if (onEnd) {\n                    if (!currentRunTree) {\n                        console.warn(\"Can not call 'on_end' if currentRunTree is undefined\");\n                    }\n                    else {\n                        onEnd(currentRunTree);\n                    }\n                }\n                await postRunPromise;\n                await currentRunTree?.patchRun();\n            }\n            function gatherAll(iterator) {\n                const chunks = [];\n                // eslint-disable-next-line no-constant-condition\n                while (true) {\n                    const next = iterator.next();\n                    chunks.push(next);\n                    if (next.done)\n                        break;\n                }\n                return chunks;\n            }\n            let returnValue;\n            try {\n                returnValue = wrappedFunc(...rawInputs);\n            }\n            catch (err) {\n                returnValue = Promise.reject(err);\n            }\n            if (isAsyncIterable(returnValue)) {\n                const snapshot = AsyncLocalStorage.snapshot();\n                return wrapAsyncGeneratorForTracing(returnValue, snapshot);\n            }\n            if (!Array.isArray(returnValue) &&\n                typeof returnValue === \"object\" &&\n                returnValue != null &&\n                __finalTracedIteratorKey !== undefined &&\n                isAsyncIterable(returnValue[__finalTracedIteratorKey])) {\n                const snapshot = AsyncLocalStorage.snapshot();\n                return {\n                    ...returnValue,\n                    [__finalTracedIteratorKey]: wrapAsyncGeneratorForTracing(returnValue[__finalTracedIteratorKey], snapshot),\n                };\n            }\n            const tracedPromise = new Promise((resolve, reject) => {\n                Promise.resolve(returnValue)\n                    .then(async (rawOutput) => {\n                    if (isAsyncIterable(rawOutput)) {\n                        const snapshot = AsyncLocalStorage.snapshot();\n                        return resolve(wrapAsyncGeneratorForTracing(rawOutput, snapshot));\n                    }\n                    if (!Array.isArray(rawOutput) &&\n                        typeof rawOutput === \"object\" &&\n                        rawOutput != null &&\n                        __finalTracedIteratorKey !== undefined &&\n                        isAsyncIterable(rawOutput[__finalTracedIteratorKey])) {\n                        const snapshot = AsyncLocalStorage.snapshot();\n                        return {\n                            ...rawOutput,\n                            [__finalTracedIteratorKey]: wrapAsyncGeneratorForTracing(rawOutput[__finalTracedIteratorKey], snapshot),\n                        };\n                    }\n                    if (isGenerator(wrappedFunc) && isIteratorLike(rawOutput)) {\n                        const chunks = gatherAll(rawOutput);\n                        try {\n                            await currentRunTree?.end(handleRunOutputs(await handleChunks(chunks.reduce((memo, { value, done }) => {\n                                if (!done || typeof value !== \"undefined\") {\n                                    memo.push(value);\n                                }\n                                return memo;\n                            }, [])), processOutputsFn));\n                            await handleEnd();\n                        }\n                        catch (e) {\n                            console.error(\"Error occurred during handleEnd:\", e);\n                        }\n                        return (function* () {\n                            for (const ret of chunks) {\n                                if (ret.done)\n                                    return ret.value;\n                                yield ret.value;\n                            }\n                        })();\n                    }\n                    try {\n                        await currentRunTree?.end(handleRunOutputs(rawOutput, processOutputsFn));\n                        await handleEnd();\n                    }\n                    finally {\n                        // eslint-disable-next-line no-unsafe-finally\n                        return rawOutput;\n                    }\n                }, async (error) => {\n                    await currentRunTree?.end(undefined, String(error));\n                    await handleEnd();\n                    throw error;\n                })\n                    .then(resolve, reject);\n            });\n            if (typeof returnValue !== \"object\" || returnValue === null) {\n                return tracedPromise;\n            }\n            return new Proxy(returnValue, {\n                get(target, prop, receiver) {\n                    if (isPromiseMethod(prop)) {\n                        return tracedPromise[prop].bind(tracedPromise);\n                    }\n                    return Reflect.get(target, prop, receiver);\n                },\n            });\n        });\n    };\n    Object.defineProperty(traceableFunc, \"langsmith:traceable\", {\n        value: runTreeConfig,\n    });\n    return traceableFunc;\n}\nexport { getCurrentRunTree, isTraceableFunction, withRunTree, ROOT, } from \"./singletons/traceable.js\";\n","import { isTraceableFunction, traceable } from \"../traceable.js\";\nfunction _combineChatCompletionChoices(choices\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    const reversedChoices = choices.slice().reverse();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const message = {\n        role: \"assistant\",\n        content: \"\",\n    };\n    for (const c of reversedChoices) {\n        if (c.delta.role) {\n            message[\"role\"] = c.delta.role;\n            break;\n        }\n    }\n    const toolCalls = {};\n    for (const c of choices) {\n        if (c.delta.content) {\n            message.content = message.content.concat(c.delta.content);\n        }\n        if (c.delta.function_call) {\n            if (!message.function_call) {\n                message.function_call = { name: \"\", arguments: \"\" };\n            }\n            if (c.delta.function_call.name) {\n                message.function_call.name += c.delta.function_call.name;\n            }\n            if (c.delta.function_call.arguments) {\n                message.function_call.arguments += c.delta.function_call.arguments;\n            }\n        }\n        if (c.delta.tool_calls) {\n            for (const tool_call of c.delta.tool_calls) {\n                if (!toolCalls[c.index]) {\n                    toolCalls[c.index] = [];\n                }\n                toolCalls[c.index].push(tool_call);\n            }\n        }\n    }\n    if (Object.keys(toolCalls).length > 0) {\n        message.tool_calls = [...Array(Object.keys(toolCalls).length)];\n        for (const [index, toolCallChunks] of Object.entries(toolCalls)) {\n            const idx = parseInt(index);\n            message.tool_calls[idx] = {\n                index: idx,\n                id: toolCallChunks.find((c) => c.id)?.id || null,\n                type: toolCallChunks.find((c) => c.type)?.type || null,\n            };\n            for (const chunk of toolCallChunks) {\n                if (chunk.function) {\n                    if (!message.tool_calls[idx].function) {\n                        message.tool_calls[idx].function = {\n                            name: \"\",\n                            arguments: \"\",\n                        };\n                    }\n                    if (chunk.function.name) {\n                        message.tool_calls[idx].function.name += chunk.function.name;\n                    }\n                    if (chunk.function.arguments) {\n                        message.tool_calls[idx].function.arguments +=\n                            chunk.function.arguments;\n                    }\n                }\n            }\n        }\n    }\n    return {\n        index: choices[0].index,\n        finish_reason: reversedChoices.find((c) => c.finish_reason) || null,\n        message: message,\n    };\n}\nconst chatAggregator = (chunks) => {\n    if (!chunks || chunks.length === 0) {\n        return { choices: [{ message: { role: \"assistant\", content: \"\" } }] };\n    }\n    const choicesByIndex = {};\n    for (const chunk of chunks) {\n        for (const choice of chunk.choices) {\n            if (choicesByIndex[choice.index] === undefined) {\n                choicesByIndex[choice.index] = [];\n            }\n            choicesByIndex[choice.index].push(choice);\n        }\n    }\n    const aggregatedOutput = chunks[chunks.length - 1];\n    aggregatedOutput.choices = Object.values(choicesByIndex).map((choices) => _combineChatCompletionChoices(choices));\n    return aggregatedOutput;\n};\nconst textAggregator = (allChunks\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => {\n    if (allChunks.length === 0) {\n        return { choices: [{ text: \"\" }] };\n    }\n    const allContent = [];\n    for (const chunk of allChunks) {\n        const content = chunk.choices[0].text;\n        if (content != null) {\n            allContent.push(content);\n        }\n    }\n    const content = allContent.join(\"\");\n    const aggregatedOutput = allChunks[allChunks.length - 1];\n    aggregatedOutput.choices = [\n        { ...aggregatedOutput.choices[0], text: content },\n    ];\n    return aggregatedOutput;\n};\nfunction processChatCompletion(outputs) {\n    const chatCompletion = outputs;\n    // copy the original object, minus usage\n    const result = { ...chatCompletion };\n    const usage = chatCompletion.usage;\n    if (usage) {\n        const inputTokenDetails = {\n            ...(usage.prompt_tokens_details?.audio_tokens !== null && {\n                audio: usage.prompt_tokens_details?.audio_tokens,\n            }),\n            ...(usage.prompt_tokens_details?.cached_tokens !== null && {\n                cache_read: usage.prompt_tokens_details?.cached_tokens,\n            }),\n        };\n        const outputTokenDetails = {\n            ...(usage.completion_tokens_details?.audio_tokens !== null && {\n                audio: usage.completion_tokens_details?.audio_tokens,\n            }),\n            ...(usage.completion_tokens_details?.reasoning_tokens !== null && {\n                reasoning: usage.completion_tokens_details?.reasoning_tokens,\n            }),\n        };\n        result.usage_metadata = {\n            input_tokens: usage.prompt_tokens ?? 0,\n            output_tokens: usage.completion_tokens ?? 0,\n            total_tokens: usage.total_tokens ?? 0,\n            ...(Object.keys(inputTokenDetails).length > 0 && {\n                input_token_details: inputTokenDetails,\n            }),\n            ...(Object.keys(outputTokenDetails).length > 0 && {\n                output_token_details: outputTokenDetails,\n            }),\n        };\n    }\n    delete result.usage;\n    return result;\n}\n/**\n * Wraps an OpenAI client's completion methods, enabling automatic LangSmith\n * tracing. Method signatures are unchanged, with the exception that you can pass\n * an additional and optional \"langsmithExtra\" field within the second parameter.\n * @param openai An OpenAI client instance.\n * @param options LangSmith options.\n * @example\n * ```ts\n * import { OpenAI } from \"openai\";\n * import { wrapOpenAI } from \"langsmith/wrappers/openai\";\n *\n * const patchedClient = wrapOpenAI(new OpenAI());\n *\n * const patchedStream = await patchedClient.chat.completions.create(\n *   {\n *     messages: [{ role: \"user\", content: `Say 'foo'` }],\n *     model: \"gpt-3.5-turbo\",\n *     stream: true,\n *   },\n *   {\n *     langsmithExtra: {\n *       metadata: {\n *         additional_data: \"bar\",\n *       },\n *     },\n *   },\n * );\n * ```\n */\nexport const wrapOpenAI = (openai, options) => {\n    if (isTraceableFunction(openai.chat.completions.create) ||\n        isTraceableFunction(openai.completions.create)) {\n        throw new Error(\"This instance of OpenAI client has been already wrapped once.\");\n    }\n    // Some internal OpenAI methods call each other, so we need to preserve original\n    // OpenAI methods.\n    const tracedOpenAIClient = { ...openai };\n    if (openai.beta &&\n        openai.beta.chat &&\n        openai.beta.chat.completions &&\n        typeof openai.beta.chat.completions.parse === \"function\") {\n        tracedOpenAIClient.beta = {\n            ...openai.beta,\n            chat: {\n                ...openai.beta.chat,\n                completions: {\n                    ...openai.beta.chat.completions,\n                    parse: traceable(openai.beta.chat.completions.parse.bind(openai.beta.chat.completions), {\n                        name: \"ChatOpenAI\",\n                        run_type: \"llm\",\n                        aggregator: chatAggregator,\n                        argsConfigPath: [1, \"langsmithExtra\"],\n                        getInvocationParams: (payload) => {\n                            if (typeof payload !== \"object\" || payload == null)\n                                return undefined;\n                            // we can safely do so, as the types are not exported in TSC\n                            const params = payload;\n                            const ls_stop = (typeof params.stop === \"string\"\n                                ? [params.stop]\n                                : params.stop) ?? undefined;\n                            return {\n                                ls_provider: \"openai\",\n                                ls_model_type: \"chat\",\n                                ls_model_name: params.model,\n                                ls_max_tokens: params.max_tokens ?? undefined,\n                                ls_temperature: params.temperature ?? undefined,\n                                ls_stop,\n                            };\n                        },\n                        ...options,\n                    }),\n                },\n            },\n        };\n    }\n    tracedOpenAIClient.chat = {\n        ...openai.chat,\n        completions: {\n            ...openai.chat.completions,\n            create: traceable(openai.chat.completions.create.bind(openai.chat.completions), {\n                name: \"ChatOpenAI\",\n                run_type: \"llm\",\n                aggregator: chatAggregator,\n                argsConfigPath: [1, \"langsmithExtra\"],\n                getInvocationParams: (payload) => {\n                    if (typeof payload !== \"object\" || payload == null)\n                        return undefined;\n                    // we can safely do so, as the types are not exported in TSC\n                    const params = payload;\n                    const ls_stop = (typeof params.stop === \"string\" ? [params.stop] : params.stop) ??\n                        undefined;\n                    return {\n                        ls_provider: \"openai\",\n                        ls_model_type: \"chat\",\n                        ls_model_name: params.model,\n                        ls_max_tokens: params.max_tokens ?? undefined,\n                        ls_temperature: params.temperature ?? undefined,\n                        ls_stop,\n                    };\n                },\n                processOutputs: processChatCompletion,\n                ...options,\n            }),\n        },\n    };\n    tracedOpenAIClient.completions = {\n        ...openai.completions,\n        create: traceable(openai.completions.create.bind(openai.completions), {\n            name: \"OpenAI\",\n            run_type: \"llm\",\n            aggregator: textAggregator,\n            argsConfigPath: [1, \"langsmithExtra\"],\n            getInvocationParams: (payload) => {\n                if (typeof payload !== \"object\" || payload == null)\n                    return undefined;\n                // we can safely do so, as the types are not exported in TSC\n                const params = payload;\n                const ls_stop = (typeof params.stop === \"string\" ? [params.stop] : params.stop) ??\n                    undefined;\n                return {\n                    ls_provider: \"openai\",\n                    ls_model_type: \"llm\",\n                    ls_model_name: params.model,\n                    ls_max_tokens: params.max_tokens ?? undefined,\n                    ls_temperature: params.temperature ?? undefined,\n                    ls_stop,\n                };\n            },\n            ...options,\n        }),\n    };\n    return tracedOpenAIClient;\n};\n"],"names":["r","fetch","Symbol","globalThis","Object","Error","a","Promise","w","console","TextEncoder","JSON","Number","o","Array","String","e","parseInt","setTimeout","Set","parseFloat","AbortSignal","URLSearchParams","Math","clearTimeout","Date","Blob","s","FormData","i","d","p","f","t","URL","window","Deno","navigator","decodeURIComponent","encodeURIComponent","Proxy","Reflect","TransformStream","ReadableStream"],"mappings":"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"}