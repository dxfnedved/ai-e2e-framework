{"version":3,"file":"static/js/async/173.9cf6b074.js","sources":["webpack://playground/../../node_modules/.pnpm/@silvia-odwyer+photon-node@0.3.3/node_modules/@silvia-odwyer/photon-node/photon_rs.js"],"sourcesContent":["let imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextEncoder, TextDecoder } = require(`util`);\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* Crop an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to crop an image at (0, 0) to (500, 800)\n* use photon_rs::native::{open_image};\n* use photon_rs::transform::crop;\n* use photon_rs::PhotonImage;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let cropped_img: PhotonImage = crop(&mut img, 0_u32, 0_u32, 500_u32, 800_u32);\n* // Write the contents of this image in JPG format.\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} x1\n* @param {number} y1\n* @param {number} x2\n* @param {number} y2\n* @returns {PhotonImage}\n*/\nmodule.exports.crop = function(photon_image, x1, y1, x2, y2) {\n    _assertClass(photon_image, PhotonImage);\n    var ret = wasm.crop(photon_image.ptr, x1, y1, x2, y2);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* @param {HTMLCanvasElement} source_canvas\n* @param {number} width\n* @param {number} height\n* @param {number} left\n* @param {number} top\n* @returns {HTMLCanvasElement}\n*/\nmodule.exports.crop_img_browser = function(source_canvas, width, height, left, top) {\n    var ret = wasm.crop_img_browser(addHeapObject(source_canvas), width, height, left, top);\n    return takeObject(ret);\n};\n\n/**\n* Flip an image horizontally.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to flip an image horizontally:\n* use photon_rs::native::open_image;\n* use photon_rs::transform::fliph;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* fliph(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.fliph = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.fliph(photon_image.ptr);\n};\n\n/**\n* Flip an image vertically.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to flip an image vertically:\n* use photon_rs::native::open_image;\n* use photon_rs::transform::flipv;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* flipv(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.flipv = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.flipv(photon_image.ptr);\n};\n\n/**\n* Resize an image on the web.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `width` - New width.\n* * `height` - New height.\n* * `sampling_filter` - Nearest = 1, Triangle = 2, CatmullRom = 3, Gaussian = 4, Lanczos3 = 5\n* @param {PhotonImage} photon_img\n* @param {number} width\n* @param {number} height\n* @param {number} sampling_filter\n* @returns {HTMLCanvasElement}\n*/\nmodule.exports.resize_img_browser = function(photon_img, width, height, sampling_filter) {\n    _assertClass(photon_img, PhotonImage);\n    var ret = wasm.resize_img_browser(photon_img.ptr, width, height, sampling_filter);\n    return takeObject(ret);\n};\n\n/**\n* Resize an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `width` - New width.\n* * `height` - New height.\n* * `sampling_filter` - Nearest = 1, Triangle = 2, CatmullRom = 3, Gaussian = 4, Lanczos3 = 5\n* @param {PhotonImage} photon_img\n* @param {number} width\n* @param {number} height\n* @param {number} sampling_filter\n* @returns {PhotonImage}\n*/\nmodule.exports.resize = function(photon_img, width, height, sampling_filter) {\n    _assertClass(photon_img, PhotonImage);\n    var ret = wasm.resize(photon_img.ptr, width, height, sampling_filter);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Resize image using seam carver.\n* Resize only if new dimensions are smaller, than original image.\n* # NOTE: This is still experimental feature, and pretty slow.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `width` - New width.\n* * `height` - New height.\n*\n* # Example\n*\n* ```no_run\n* // For example, resize image using seam carver:\n* use photon_rs::native::open_image;\n* use photon_rs::transform::seam_carve;\n* use photon_rs::PhotonImage;\n*\n* let img = open_image(\"img.jpg\").expect(\"File should open\");\n* let result: PhotonImage = seam_carve(&img, 100_u32, 100_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} width\n* @param {number} height\n* @returns {PhotonImage}\n*/\nmodule.exports.seam_carve = function(img, width, height) {\n    _assertClass(img, PhotonImage);\n    var ret = wasm.seam_carve(img.ptr, width, height);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Apply uniform padding around the PhotonImage\n* A padded PhotonImage is returned.\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `padding` - The amount of padding to be applied to the PhotonImage.\n* * `padding_rgba` - Tuple containing the RGBA code for padding color.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a padding of 10 pixels around a PhotonImage:\n* use photon_rs::transform::padding_uniform;\n* use photon_rs::native::open_image;\n* use photon_rs::Rgba;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let rgba = Rgba::new(200_u8, 100_u8, 150_u8, 255_u8);\n* padding_uniform(&img, 10_u32, rgba);\n* ```\n* @param {PhotonImage} img\n* @param {number} padding\n* @param {Rgba} padding_rgba\n* @returns {PhotonImage}\n*/\nmodule.exports.padding_uniform = function(img, padding, padding_rgba) {\n    _assertClass(img, PhotonImage);\n    _assertClass(padding_rgba, Rgba);\n    var ptr0 = padding_rgba.ptr;\n    padding_rgba.ptr = 0;\n    var ret = wasm.padding_uniform(img.ptr, padding, ptr0);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Apply padding on the left side of the PhotonImage\n* A padded PhotonImage is returned.\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `padding` - The amount of padding to be applied to the PhotonImage.\n* * `padding_rgba` - Tuple containing the RGBA code for padding color.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a padding of 10 pixels on the left side of a PhotonImage:\n* use photon_rs::transform::padding_left;\n* use photon_rs::native::open_image;\n* use photon_rs::Rgba;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let rgba = Rgba::new(200_u8, 100_u8, 150_u8, 255_u8);\n* padding_left(&img, 10_u32, rgba);\n* ```\n* @param {PhotonImage} img\n* @param {number} padding\n* @param {Rgba} padding_rgba\n* @returns {PhotonImage}\n*/\nmodule.exports.padding_left = function(img, padding, padding_rgba) {\n    _assertClass(img, PhotonImage);\n    _assertClass(padding_rgba, Rgba);\n    var ptr0 = padding_rgba.ptr;\n    padding_rgba.ptr = 0;\n    var ret = wasm.padding_left(img.ptr, padding, ptr0);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Apply padding on the left side of the PhotonImage\n* A padded PhotonImage is returned.\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `padding` - The amount of padding to be applied to the PhotonImage.\n* * `padding_rgba` - Tuple containing the RGBA code for padding color.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a padding of 10 pixels on the right side of a PhotonImage:\n* use photon_rs::transform::padding_right;\n* use photon_rs::native::open_image;\n* use photon_rs::Rgba;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let rgba = Rgba::new(200_u8, 100_u8, 150_u8, 255_u8);\n* padding_right(&img, 10_u32, rgba);\n* ```\n* @param {PhotonImage} img\n* @param {number} padding\n* @param {Rgba} padding_rgba\n* @returns {PhotonImage}\n*/\nmodule.exports.padding_right = function(img, padding, padding_rgba) {\n    _assertClass(img, PhotonImage);\n    _assertClass(padding_rgba, Rgba);\n    var ptr0 = padding_rgba.ptr;\n    padding_rgba.ptr = 0;\n    var ret = wasm.padding_right(img.ptr, padding, ptr0);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Apply padding on the left side of the PhotonImage\n* A padded PhotonImage is returned.\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `padding` - The amount of padding to be applied to the PhotonImage.\n* * `padding_rgba` - Tuple containing the RGBA code for padding color.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a padding of 10 pixels on the top of a PhotonImage:\n* use photon_rs::transform::padding_top;\n* use photon_rs::native::open_image;\n* use photon_rs::Rgba;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let rgba = Rgba::new(200_u8, 100_u8, 150_u8, 255_u8);\n* padding_top(&img, 10_u32, rgba);\n* ```\n* @param {PhotonImage} img\n* @param {number} padding\n* @param {Rgba} padding_rgba\n* @returns {PhotonImage}\n*/\nmodule.exports.padding_top = function(img, padding, padding_rgba) {\n    _assertClass(img, PhotonImage);\n    _assertClass(padding_rgba, Rgba);\n    var ptr0 = padding_rgba.ptr;\n    padding_rgba.ptr = 0;\n    var ret = wasm.padding_top(img.ptr, padding, ptr0);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Apply padding on the left side of the PhotonImage\n* A padded PhotonImage is returned.\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `padding` - The amount of padding to be applied to the PhotonImage.\n* * `padding_rgba` - Tuple containing the RGBA code for padding color.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a padding of 10 pixels on the bottom of a PhotonImage:\n* use photon_rs::transform::padding_bottom;\n* use photon_rs::native::open_image;\n* use photon_rs::Rgba;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let rgba = Rgba::new(200_u8, 100_u8, 150_u8, 255_u8);\n* padding_bottom(&img, 10_u32, rgba);\n* ```\n* @param {PhotonImage} img\n* @param {number} padding\n* @param {Rgba} padding_rgba\n* @returns {PhotonImage}\n*/\nmodule.exports.padding_bottom = function(img, padding, padding_rgba) {\n    _assertClass(img, PhotonImage);\n    _assertClass(padding_rgba, Rgba);\n    var ptr0 = padding_rgba.ptr;\n    padding_rgba.ptr = 0;\n    var ret = wasm.padding_bottom(img.ptr, padding, ptr0);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Rotate the PhotonImage on an arbitrary angle\n* A rotated PhotonImage is returned.\n* # NOTE: This is a naive implementation. Paeth rotation should be faster.\n*\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `angle` - Rotation angle in degrees.\n*\n* # Example\n*\n* ```no_run\n* // For example, to rotate a PhotonImage by 30 degrees:\n* use photon_rs::native::open_image;\n* use photon_rs::transform::rotate;\n*\n* let img = open_image(\"img.jpg\").expect(\"File should open\");\n* let rotated_img = rotate(&img, 30);\n* ```\n* @param {PhotonImage} img\n* @param {number} angle\n* @returns {PhotonImage}\n*/\nmodule.exports.rotate = function(img, angle) {\n    _assertClass(img, PhotonImage);\n    var ret = wasm.rotate(img.ptr, angle);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Resample the PhotonImage.\n*\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `dst_width` - Target width.\n* * `dst_height` - Target height.\n*\n* # Example\n*\n* ```no_run\n* // For example, to resample a PhotonImage to 1920x1080 size:\n* use photon_rs::native::open_image;\n* use photon_rs::transform::resample;\n*\n* let img = open_image(\"img.jpg\").expect(\"File should open\");\n* let rotated_img = resample(&img, 1920, 1080);\n* ```\n* @param {PhotonImage} img\n* @param {number} dst_width\n* @param {number} dst_height\n* @returns {PhotonImage}\n*/\nmodule.exports.resample = function(img, dst_width, dst_height) {\n    _assertClass(img, PhotonImage);\n    var ret = wasm.resample(img.ptr, dst_width, dst_height);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Add bordered-text to an image.\n* The only font available as of now is Roboto.\n* Note: A graphic design/text-drawing library is currently being developed, so stay tuned.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `text` - Text string to be drawn to the image.\n* * `x` - x-coordinate of where first letter's 1st pixel should be drawn.\n* * `y` - y-coordinate of where first letter's 1st pixel should be drawn.\n*\n* # Example\n*\n* ```no_run\n* // For example to draw the string \"Welcome to Photon!\" at 10, 10:\n* use photon_rs::native::open_image;\n* use photon_rs::text::draw_text_with_border;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* draw_text_with_border(&mut img, \"Welcome to Photon!\", 10_u32, 10_u32);\n* ```\n* @param {PhotonImage} photon_img\n* @param {string} text\n* @param {number} x\n* @param {number} y\n*/\nmodule.exports.draw_text_with_border = function(photon_img, text, x, y) {\n    _assertClass(photon_img, PhotonImage);\n    var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.draw_text_with_border(photon_img.ptr, ptr0, len0, x, y);\n};\n\n/**\n* Add text to an image.\n* The only font available as of now is Roboto.\n* Note: A graphic design/text-drawing library is currently being developed, so stay tuned.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `text` - Text string to be drawn to the image.\n* * `x` - x-coordinate of where first letter's 1st pixel should be drawn.\n* * `y` - y-coordinate of where first letter's 1st pixel should be drawn.\n*\n* # Example\n*\n* ```no_run\n* // For example to draw the string \"Welcome to Photon!\" at 10, 10:\n* use photon_rs::native::open_image;\n* use photon_rs::text::draw_text;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* draw_text(&mut img, \"Welcome to Photon!\", 10_u32, 10_u32);\n* ```\n* @param {PhotonImage} photon_img\n* @param {string} text\n* @param {number} x\n* @param {number} y\n*/\nmodule.exports.draw_text = function(photon_img, text, x, y) {\n    _assertClass(photon_img, PhotonImage);\n    var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.draw_text(photon_img.ptr, ptr0, len0, x, y);\n};\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*! [temp] Check if WASM is supported.\n*/\nmodule.exports.run = function() {\n    wasm.run();\n};\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n/**\n* Get the ImageData from a 2D canvas context\n* @param {HTMLCanvasElement} canvas\n* @param {CanvasRenderingContext2D} ctx\n* @returns {ImageData}\n*/\nmodule.exports.get_image_data = function(canvas, ctx) {\n    try {\n        var ret = wasm.get_image_data(addBorrowedObject(canvas), addBorrowedObject(ctx));\n        return takeObject(ret);\n    } finally {\n        heap[stack_pointer++] = undefined;\n        heap[stack_pointer++] = undefined;\n    }\n};\n\n/**\n* Place a PhotonImage onto a 2D canvas.\n* @param {HTMLCanvasElement} canvas\n* @param {CanvasRenderingContext2D} ctx\n* @param {PhotonImage} new_image\n*/\nmodule.exports.putImageData = function(canvas, ctx, new_image) {\n    _assertClass(new_image, PhotonImage);\n    var ptr0 = new_image.ptr;\n    new_image.ptr = 0;\n    wasm.putImageData(addHeapObject(canvas), addHeapObject(ctx), ptr0);\n};\n\n/**\n* Convert a HTML5 Canvas Element to a PhotonImage.\n*\n* This converts the ImageData found in the canvas context to a PhotonImage,\n* which can then have effects or filters applied to it.\n* @param {HTMLCanvasElement} canvas\n* @param {CanvasRenderingContext2D} ctx\n* @returns {PhotonImage}\n*/\nmodule.exports.open_image = function(canvas, ctx) {\n    var ret = wasm.open_image(addHeapObject(canvas), addHeapObject(ctx));\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Convert ImageData to a raw pixel vec of u8s.\n* @param {ImageData} imgdata\n* @returns {Uint8Array}\n*/\nmodule.exports.to_raw_pixels = function(imgdata) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.to_raw_pixels(retptr, addHeapObject(imgdata));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\n/**\n* Convert a base64 string to a PhotonImage.\n* @param {string} base64\n* @returns {PhotonImage}\n*/\nmodule.exports.base64_to_image = function(base64) {\n    var ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.base64_to_image(ptr0, len0);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Convert a base64 string to a Vec of u8s.\n* @param {string} base64\n* @returns {Uint8Array}\n*/\nmodule.exports.base64_to_vec = function(base64) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.base64_to_vec(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n};\n\n/**\n* Convert a PhotonImage to JS-compatible ImageData.\n* @param {PhotonImage} photon_image\n* @returns {ImageData}\n*/\nmodule.exports.to_image_data = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = photon_image.ptr;\n    photon_image.ptr = 0;\n    var ret = wasm.to_image_data(ptr0);\n    return takeObject(ret);\n};\n\n/**\n* Alter a select channel by incrementing or decrementing its value by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel` - The channel you wish to alter, it should be either 0, 1 or 2,\n* representing R, G, or B respectively. (O=Red, 1=Green, 2=Blue)\n* * `amount` - The amount to increment/decrement the channel's value by for that pixel.\n* A positive value will increment/decrement the channel's value, a negative value will decrement the channel's value.\n*\n* ## Example\n*\n* ```no_run\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon_rs::channels::alter_channel;\n* use photon_rs::native::{open_image};\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* alter_channel(&mut img, 0_usize, 10_i16);\n* ```\n*\n* Adds a constant to a select R, G, or B channel's value.\n*\n* ### Decrease a channel's value\n* // For example, to decrease the Green channel for all pixels by 20:\n* ```no_run\n* use photon_rs::channels::alter_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* alter_channel(&mut img, 1_usize, -20_i16);\n* ```\n* **Note**: Note the use of a minus symbol when decreasing the channel.\n* @param {PhotonImage} img\n* @param {number} channel\n* @param {number} amt\n*/\nmodule.exports.alter_channel = function(img, channel, amt) {\n    _assertClass(img, PhotonImage);\n    wasm.alter_channel(img.ptr, channel, amt);\n};\n\n/**\n* Increment or decrement every pixel's Red channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `amt` - The amount to increment or decrement the channel's value by for that pixel.\n*\n* # Example\n*\n* ```no_run\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon_rs::channels::alter_red_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* alter_red_channel(&mut img, 10_i16);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} amt\n*/\nmodule.exports.alter_red_channel = function(photon_image, amt) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.alter_red_channel(photon_image.ptr, amt);\n};\n\n/**\n* Increment or decrement every pixel's Green channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `amt` - The amount to increment/decrement the channel's value by for that pixel.\n*\n* # Example\n*\n* ```no_run\n* // For example, to increase the Green channel for all pixels by 20:\n* use photon_rs::channels::alter_green_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* alter_green_channel(&mut img, 20_i16);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n*/\nmodule.exports.alter_green_channel = function(img, amt) {\n    _assertClass(img, PhotonImage);\n    wasm.alter_green_channel(img.ptr, amt);\n};\n\n/**\n* Increment or decrement every pixel's Blue channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `amt` - The amount to increment or decrement the channel's value by for that pixel.\n*\n* # Example\n*\n* ```no_run\n* // For example, to increase the Blue channel for all pixels by 10:\n* use photon_rs::channels::alter_blue_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* alter_blue_channel(&mut img, 10_i16);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n*/\nmodule.exports.alter_blue_channel = function(img, amt) {\n    _assertClass(img, PhotonImage);\n    wasm.alter_blue_channel(img.ptr, amt);\n};\n\n/**\n* Increment/decrement two channels' values simultaneously by adding an amt to each channel per pixel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel1` - A usize from 0 to 2 that represents either the R, G or B channels.\n* * `amt1` - The amount to increment/decrement the channel's value by for that pixel.\n* * `channel2` -A usize from 0 to 2 that represents either the R, G or B channels.\n* * `amt2` - The amount to increment/decrement the channel's value by for that pixel.\n*\n* # Example\n*\n* ```no_run\n* // For example, to increase the values of the Red and Blue channels per pixel:\n* use photon_rs::channels::alter_two_channels;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* alter_two_channels(&mut img, 0_usize, 10_i16, 2_usize, 20_i16);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel1\n* @param {number} amt1\n* @param {number} channel2\n* @param {number} amt2\n*/\nmodule.exports.alter_two_channels = function(img, channel1, amt1, channel2, amt2) {\n    _assertClass(img, PhotonImage);\n    wasm.alter_two_channels(img.ptr, channel1, amt1, channel2, amt2);\n};\n\n/**\n* Increment all 3 channels' values by adding an amt to each channel per pixel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `r_amt` - The amount to increment/decrement the Red channel by.\n* * `g_amt` - The amount to increment/decrement the Green channel by.\n* * `b_amt` - The amount to increment/decrement the Blue channel by.\n*\n* # Example\n*\n* ```no_run\n* // For example, to increase the values of the Red channel by 10, the Green channel by 20,\n* // and the Blue channel by 50:\n* use photon_rs::channels::alter_channels;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* alter_channels(&mut img, 10_i16, 20_i16, 50_i16);\n* ```\n* @param {PhotonImage} img\n* @param {number} r_amt\n* @param {number} g_amt\n* @param {number} b_amt\n*/\nmodule.exports.alter_channels = function(img, r_amt, g_amt, b_amt) {\n    _assertClass(img, PhotonImage);\n    wasm.alter_channels(img.ptr, r_amt, g_amt, b_amt);\n};\n\n/**\n* Set a certain channel to zero, thus removing the channel's influence in the pixels' final rendered colour.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel` - The channel to be removed; must be a usize from 0 to 2, with 0 representing Red, 1 representing Green, and 2 representing Blue.\n* * `min_filter` - Minimum filter. Value between 0 and 255. Only remove the channel if the current pixel's channel value is less than this minimum filter. To completely\n* remove the channel, set this value to 255, to leave the channel as is, set to 0, and to set a channel to zero for a pixel whose red value is greater than 50,\n* then channel would be 0 and min_filter would be 50.\n*\n* # Example\n*\n* ```no_run\n* // For example, to remove the Red channel with a min_filter of 100:\n* use photon_rs::channels::remove_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* remove_channel(&mut img, 0_usize, 100_u8);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel\n* @param {number} min_filter\n*/\nmodule.exports.remove_channel = function(img, channel, min_filter) {\n    _assertClass(img, PhotonImage);\n    wasm.remove_channel(img.ptr, channel, min_filter);\n};\n\n/**\n* Remove the Red channel's influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel's channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```no_run\n* // For example, to remove the red channel for red channel pixel values less than 50:\n* use photon_rs::channels::remove_red_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* remove_red_channel(&mut img, 50_u8);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n*/\nmodule.exports.remove_red_channel = function(img, min_filter) {\n    _assertClass(img, PhotonImage);\n    wasm.remove_red_channel(img.ptr, min_filter);\n};\n\n/**\n* Remove the Green channel's influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel's channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```no_run\n* // For example, to remove the green channel for green channel pixel values less than 50:\n* use photon_rs::channels::remove_green_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* remove_green_channel(&mut img, 50_u8);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n*/\nmodule.exports.remove_green_channel = function(img, min_filter) {\n    _assertClass(img, PhotonImage);\n    wasm.remove_green_channel(img.ptr, min_filter);\n};\n\n/**\n* Remove the Blue channel's influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel's channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```no_run\n* // For example, to remove the blue channel for blue channel pixel values less than 50:\n* use photon_rs::channels::remove_blue_channel;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* remove_blue_channel(&mut img, 50_u8);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n*/\nmodule.exports.remove_blue_channel = function(img, min_filter) {\n    _assertClass(img, PhotonImage);\n    wasm.remove_blue_channel(img.ptr, min_filter);\n};\n\n/**\n* Swap two channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel1` - An index from 0 to 2, representing the Red, Green or Blue channels respectively. Red would be represented by 0, Green by 1, and Blue by 2.\n* * `channel2` - An index from 0 to 2, representing the Red, Green or Blue channels respectively. Same as above.\n*\n* # Example\n*\n* ```no_run\n* // For example, to swap the values of the Red channel with the values of the Blue channel:\n* use photon_rs::channels::swap_channels;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* swap_channels(&mut img, 0_usize, 2_usize);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel1\n* @param {number} channel2\n*/\nmodule.exports.swap_channels = function(img, channel1, channel2) {\n    _assertClass(img, PhotonImage);\n    wasm.swap_channels(img.ptr, channel1, channel2);\n};\n\n/**\n* Invert RGB value of an image.\n*\n* # Arguments\n* * `photon_image` - A DynamicImage that contains a view into the image.\n* # Example\n*\n* ```no_run\n* use photon_rs::channels::invert;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* invert(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.invert = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.invert(photon_image.ptr);\n};\n\n/**\n* Selective hue rotation.\n*\n* Only rotate the hue of a pixel if its RGB values are within a specified range.\n* This function only rotates a pixel's hue to another  if it is visually similar to the colour specified.\n* For example, if a user wishes all pixels that are blue to be changed to red, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `degrees` - The amount of degrees to hue rotate by.\n*\n* # Example\n*\n* ```no_run\n* // For example, to only rotate the pixels that are of RGB value RGB{20, 40, 60}:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_hue_rotate;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(20_u8, 40_u8, 60_u8);\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* selective_hue_rotate(&mut img, ref_color, 180_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n* @param {number} degrees\n*/\nmodule.exports.selective_hue_rotate = function(photon_image, ref_color, degrees) {\n    _assertClass(photon_image, PhotonImage);\n    _assertClass(ref_color, Rgb);\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_hue_rotate(photon_image.ptr, ptr0, degrees);\n};\n\n/**\n* Selectively change pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only changes the color of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, with this function, a user can change the color of all blue pixels by mixing them with red by 10%.\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `new_color` - The `RGB` value of the new color (to be mixed with the matched pixels)\n* * `fraction` - The amount of mixing the new colour with the matched pixels\n*\n* # Example\n*\n* ```no_run\n* // For example, to only change the color of pixels that are similar to the RGB value RGB{200, 120, 30} by mixing RGB{30, 120, 200} with 25%:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_color_convert;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(200, 120, 30);\n* let new_color = Rgb::new(30, 120, 200);\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* selective_color_convert(&mut img, ref_color, new_color, 0.25);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n* @param {Rgb} new_color\n* @param {number} fraction\n*/\nmodule.exports.selective_color_convert = function(photon_image, ref_color, new_color, fraction) {\n    _assertClass(photon_image, PhotonImage);\n    _assertClass(ref_color, Rgb);\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    _assertClass(new_color, Rgb);\n    var ptr1 = new_color.ptr;\n    new_color.ptr = 0;\n    wasm.selective_color_convert(photon_image.ptr, ptr0, ptr1, fraction);\n};\n\n/**\n* Selectively lighten an image.\n*\n* Only lighten the hue of a pixel if its colour matches or is similar to the RGB colour specified.\n* For example, if a user wishes all pixels that are blue to be lightened, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The level from 0 to 1 to lighten the hue by. Increasing by 10% would have an `amt` of 0.1\n*\n* # Example\n*\n* ```no_run\n* // For example, to only lighten the pixels that are of or similar to RGB value RGB{20, 40, 60}:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_lighten;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(20_u8, 40_u8, 60_u8);\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* selective_lighten(&mut img, ref_color, 0.2_f32);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n*/\nmodule.exports.selective_lighten = function(img, ref_color, amt) {\n    _assertClass(img, PhotonImage);\n    _assertClass(ref_color, Rgb);\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_lighten(img.ptr, ptr0, amt);\n};\n\n/**\n* Selectively desaturate pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only desaturates the hue of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, if a user wishes all pixels that are blue to be desaturated by 0.1, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The amount of desaturate the colour by.\n*\n* # Example\n*\n* ```no_run\n* // For example, to only desaturate the pixels that are similar to the RGB value RGB{20, 40, 60}:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_desaturate;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(20_u8, 40_u8, 60_u8);\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* selective_desaturate(&mut img, ref_color, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n*/\nmodule.exports.selective_desaturate = function(img, ref_color, amt) {\n    _assertClass(img, PhotonImage);\n    _assertClass(ref_color, Rgb);\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_desaturate(img.ptr, ptr0, amt);\n};\n\n/**\n* Selectively saturate pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only saturates the hue of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, if a user wishes all pixels that are blue to have an increase in saturation by 10%, they can selectively specify only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The amount of saturate the colour by.\n*\n* # Example\n*\n* ```no_run\n* // For example, to only increase the saturation of pixels that are similar to the RGB value RGB{20, 40, 60}:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_saturate;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(20_u8, 40_u8, 60_u8);\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* selective_saturate(&mut img, ref_color, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n*/\nmodule.exports.selective_saturate = function(img, ref_color, amt) {\n    _assertClass(img, PhotonImage);\n    _assertClass(ref_color, Rgb);\n    var ptr0 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_saturate(img.ptr, ptr0, amt);\n};\n\n/**\n* Selectively changes a pixel to greyscale if it is *not* visually similar or close to the colour specified.\n* Only changes the colour of a pixel if its RGB values are within a specified range.\n*\n* (Similarity between two colours is calculated via the CIE76 formula.)\n* For example, if a user wishes all pixels that are *NOT* blue to be displayed in greyscale, they can selectively specify only the blue pixels to be\n* kept in the photo.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n*\n* # Example\n*\n* ```no_run\n* // For example, to greyscale all pixels that are *not* visually similar to the RGB colour RGB{20, 40, 60}:\n* use photon_rs::Rgb;\n* use photon_rs::channels::selective_greyscale;\n* use photon_rs::native::open_image;\n*\n* let ref_color = Rgb::new(20_u8, 40_u8, 60_u8);\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* selective_greyscale(img, ref_color);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n*/\nmodule.exports.selective_greyscale = function(photon_image, ref_color) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = photon_image.ptr;\n    photon_image.ptr = 0;\n    _assertClass(ref_color, Rgb);\n    var ptr1 = ref_color.ptr;\n    ref_color.ptr = 0;\n    wasm.selective_greyscale(ptr0, ptr1);\n};\n\n/**\n* Apply a monochrome effect of a certain colour.\n*\n* It does so by averaging the R, G, and B values of a pixel, and then adding a\n* separate value to that averaged value for each channel to produce a tint.\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `r_offset` - The value to add to the Red channel per pixel.\n* * `g_offset` - The value to add to the Green channel per pixel.\n* * `b_offset` - The value to add to the Blue channel per pixel.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a monochrome effect to an image:\n* use photon_rs::monochrome::monochrome;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* monochrome(&mut img, 40_u32, 50_u32, 100_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} r_offset\n* @param {number} g_offset\n* @param {number} b_offset\n*/\nmodule.exports.monochrome = function(img, r_offset, g_offset, b_offset) {\n    _assertClass(img, PhotonImage);\n    wasm.monochrome(img.ptr, r_offset, g_offset, b_offset);\n};\n\n/**\n* Convert an image to sepia.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* // For example, to sepia an image of type `PhotonImage`:\n* use photon_rs::monochrome::sepia;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* sepia(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.sepia = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.sepia(img.ptr);\n};\n\n/**\n* Convert an image to grayscale using the conventional averaging algorithm.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* // For example, to convert an image of type `PhotonImage` to grayscale:\n* use photon_rs::monochrome::grayscale;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* grayscale(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.grayscale = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.grayscale(img.ptr);\n};\n\n/**\n* Convert an image to grayscale with a human corrected factor, to account for human vision.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* // For example, to convert an image of type `PhotonImage` to grayscale with a human corrected factor:\n* use photon_rs::monochrome::grayscale_human_corrected;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* grayscale_human_corrected(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.grayscale_human_corrected = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.grayscale_human_corrected(img.ptr);\n};\n\n/**\n* Desaturate an image by getting the min/max of each pixel's RGB values.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* // For example, to desaturate an image:\n* use photon_rs::monochrome::desaturate;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* desaturate(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.desaturate = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.desaturate(img.ptr);\n};\n\n/**\n* Uses a min. decomposition algorithm to convert an image to greyscale.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* // For example, to decompose an image with min decomposition:\n* use photon_rs::monochrome::decompose_min;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* decompose_min(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.decompose_min = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.decompose_min(img.ptr);\n};\n\n/**\n* Uses a max. decomposition algorithm to convert an image to greyscale.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* // For example, to decompose an image with max decomposition:\n* use photon_rs::monochrome::decompose_max;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* decompose_max(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.decompose_max = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.decompose_max(img.ptr);\n};\n\n/**\n* Employ only a limited number of gray shades in an image.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `num_shades` - The number of grayscale shades to be displayed in the image.\n* # Example\n*\n* ```no_run\n* // For example, to limit an image to four shades of gray only:\n* use photon_rs::monochrome::grayscale_shades;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* grayscale_shades(&mut img, 4_u8);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} num_shades\n*/\nmodule.exports.grayscale_shades = function(photon_image, num_shades) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.grayscale_shades(photon_image.ptr, num_shades);\n};\n\n/**\n* Convert an image to grayscale by setting a pixel's 3 RGB values to the Red channel's value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::monochrome::r_grayscale;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* r_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.r_grayscale = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.r_grayscale(photon_image.ptr);\n};\n\n/**\n* Convert an image to grayscale by setting a pixel's 3 RGB values to the Green channel's value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::monochrome::g_grayscale;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* g_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.g_grayscale = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.g_grayscale(photon_image.ptr);\n};\n\n/**\n* Convert an image to grayscale by setting a pixel's 3 RGB values to the Blue channel's value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::monochrome::b_grayscale;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* b_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.b_grayscale = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.b_grayscale(photon_image.ptr);\n};\n\n/**\n* Convert an image to grayscale by setting a pixel's 3 RGB values to a chosen channel's value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `channel` - A usize representing the channel from 0 to 2. O represents the Red channel, 1 the Green channel, and 2 the Blue channel.\n* # Example\n* To grayscale using only values from the Red channel:\n* ```no_run\n* use photon_rs::monochrome::single_channel_grayscale;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* single_channel_grayscale(&mut img, 0_usize);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel\n*/\nmodule.exports.single_channel_grayscale = function(photon_image, channel) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.single_channel_grayscale(photon_image.ptr, channel);\n};\n\n/**\n* Threshold an image using a standard thresholding algorithm.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `threshold` - The amount the image should be thresholded by from 0 to 255.\n* # Example\n*\n* ```no_run\n* // For example, to threshold an image of type `PhotonImage`:\n* use photon_rs::monochrome::threshold;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* threshold(&mut img, 30_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} threshold\n*/\nmodule.exports.threshold = function(img, threshold) {\n    _assertClass(img, PhotonImage);\n    wasm.threshold(img.ptr, threshold);\n};\n\n/**\n* Adds an offset to the image by a certain number of pixels.\n*\n* This creates an RGB shift effect.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `channel_index`: The index of the channel to increment. 0 for red, 1 for green and 2 for blue.\n* * `offset` - The offset is added to the pixels in the image.\n* # Example\n*\n* ```no_run\n* // For example, to offset pixels by 30 pixels on the red channel:\n* use photon_rs::effects::offset;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* offset(&mut img, 0_usize, 30_u32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel_index\n* @param {number} offset\n*/\nmodule.exports.offset = function(photon_image, channel_index, offset) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.offset(photon_image.ptr, channel_index, offset);\n};\n\n/**\n* Adds an offset to the red channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset you want to move the red channel by.\n* # Example\n*\n* ```no_run\n* // For example, to add an offset to the red channel by 30 pixels.\n* use photon_rs::effects::offset_red;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* offset_red(&mut img, 30_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n*/\nmodule.exports.offset_red = function(img, offset_amt) {\n    _assertClass(img, PhotonImage);\n    wasm.offset_red(img.ptr, offset_amt);\n};\n\n/**\n* Adds an offset to the green channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset you want to move the green channel by.\n* # Example\n*\n* ```no_run\n* // For example, to add an offset to the green channel by 30 pixels.\n* use photon_rs::effects::offset_green;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* offset_green(&mut img, 30_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n*/\nmodule.exports.offset_green = function(img, offset_amt) {\n    _assertClass(img, PhotonImage);\n    wasm.offset_green(img.ptr, offset_amt);\n};\n\n/**\n* Adds an offset to the blue channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset_amt` - The offset you want to move the blue channel by.\n* # Example\n* // For example, to add an offset to the green channel by 40 pixels.\n*\n* ```no_run\n* use photon_rs::effects::offset_blue;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* offset_blue(&mut img, 40_u32);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n*/\nmodule.exports.offset_blue = function(img, offset_amt) {\n    _assertClass(img, PhotonImage);\n    wasm.offset_blue(img.ptr, offset_amt);\n};\n\n/**\n* Adds multiple offsets to the image by a certain number of pixels (on two channels).\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset is added to the pixels in the image.\n* # Example\n*\n* ```no_run\n* // For example, to add a 30-pixel offset to both the red and blue channels:\n* use photon_rs::effects::multiple_offsets;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* multiple_offsets(&mut img, 30_u32, 0_usize, 2_usize);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} offset\n* @param {number} channel_index\n* @param {number} channel_index2\n*/\nmodule.exports.multiple_offsets = function(photon_image, offset, channel_index, channel_index2) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.multiple_offsets(photon_image.ptr, offset, channel_index, channel_index2);\n};\n\n/**\n* Reduces an image to the primary colours.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```no_run\n* // For example, to add a primary colour effect to an image of type `DynamicImage`:\n* use photon_rs::effects::primary;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* primary(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.primary = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.primary(img.ptr);\n};\n\n/**\n* Colorizes the green channels of the image.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```no_run\n* // For example, to colorize an image of type `PhotonImage`:\n* use photon_rs::effects::colorize;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* colorize(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.colorize = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.colorize(photon_image.ptr);\n};\n\n/**\n* Applies a solarizing effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```no_run\n* // For example, to colorize an image of type `PhotonImage`:\n* use photon_rs::effects::solarize;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* solarize(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.solarize = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.solarize(photon_image.ptr);\n};\n\n/**\n* Applies a solarizing effect to an image and returns the resulting PhotonImage.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```no_run\n* // For example, to solarize \"retimg\" an image of type `PhotonImage`:\n* use photon_rs::effects::solarize_retimg;\n* use photon_rs::native::open_image;\n* use photon_rs::PhotonImage;\n*\n* let img = open_image(\"img.jpg\").expect(\"File should open\");\n* let result: PhotonImage = solarize_retimg(&img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {PhotonImage}\n*/\nmodule.exports.solarize_retimg = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    var ret = wasm.solarize_retimg(photon_image.ptr);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Increase the brightness of an image by a factor.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `brightness` - A u8 to add to the brightness.\n* # Example\n*\n* ```no_run\n* use photon_rs::effects::inc_brightness;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* inc_brightness(&mut img, 10_u8);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} brightness\n*/\nmodule.exports.inc_brightness = function(photon_image, brightness) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.inc_brightness(photon_image.ptr, brightness);\n};\n\n/**\n* Adjust the contrast of an image by a factor.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage that contains a view into the image.\n* * `contrast` - An f32 factor used to adjust contrast. Between [-255.0, 255.0]. The algorithm will\n* clamp results if passed factor is out of range.\n* # Example\n*\n* ```no_run\n* use photon_rs::effects::adjust_contrast;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* adjust_contrast(&mut img, 30_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} contrast\n*/\nmodule.exports.adjust_contrast = function(photon_image, contrast) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.adjust_contrast(photon_image.ptr, contrast);\n};\n\n/**\n* Tint an image by adding an offset to averaged RGB channel values.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `r_offset` - The amount the R channel should be incremented by.\n* * `g_offset` - The amount the G channel should be incremented by.\n* * `b_offset` - The amount the B channel should be incremented by.\n* # Example\n*\n* ```no_run\n* // For example, to tint an image of type `PhotonImage`:\n* use photon_rs::effects::tint;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* tint(&mut img, 10_u32, 20_u32, 15_u32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} r_offset\n* @param {number} g_offset\n* @param {number} b_offset\n*/\nmodule.exports.tint = function(photon_image, r_offset, g_offset, b_offset) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.tint(photon_image.ptr, r_offset, g_offset, b_offset);\n};\n\n/**\n* Horizontal strips. Divide an image into a series of equal-height strips, for an artistic effect.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `num_strips` - The number of strips\n* # Example\n*\n* ```no_run\n* // For example, to draw horizontal strips on a `PhotonImage`:\n* use photon_rs::effects::horizontal_strips;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* horizontal_strips(&mut img, 8u8);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n*/\nmodule.exports.horizontal_strips = function(photon_image, num_strips) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.horizontal_strips(photon_image.ptr, num_strips);\n};\n\n/**\n* Horizontal strips. Divide an image into a series of equal-width strips, for an artistic effect. Sepcify a color as well.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `num_strips` - The numbder of strips\n* * `color` - Color of strips.\n* # Example\n*\n* ```no_run\n* // For example, to draw blue horizontal strips on a `PhotonImage`:\n* use photon_rs::effects::color_horizontal_strips;\n* use photon_rs::native::open_image;\n* use photon_rs::Rgb;\n*\n* let color = Rgb::new(255u8, 0u8, 0u8);\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* color_horizontal_strips(&mut img, 8u8, color);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n* @param {Rgb} color\n*/\nmodule.exports.color_horizontal_strips = function(photon_image, num_strips, color) {\n    _assertClass(photon_image, PhotonImage);\n    _assertClass(color, Rgb);\n    var ptr0 = color.ptr;\n    color.ptr = 0;\n    wasm.color_horizontal_strips(photon_image.ptr, num_strips, ptr0);\n};\n\n/**\n* Vertical strips. Divide an image into a series of equal-width strips, for an artistic effect.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `num_strips` - The numbder of strips\n* # Example\n*\n* ```no_run\n* // For example, to draw vertical strips on a `PhotonImage`:\n* use photon_rs::effects::vertical_strips;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* vertical_strips(&mut img, 8u8);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n*/\nmodule.exports.vertical_strips = function(photon_image, num_strips) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.vertical_strips(photon_image.ptr, num_strips);\n};\n\n/**\n* Vertical strips. Divide an image into a series of equal-width strips, for an artistic effect. Sepcify a color as well.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `num_strips` - The numbder of strips\n* * `color` - Color of strips.\n* # Example\n*\n* ```no_run\n* // For example, to draw red vertical strips on a `PhotonImage`:\n* use photon_rs::effects::color_vertical_strips;\n* use photon_rs::native::open_image;\n* use photon_rs::Rgb;\n*\n* let color = Rgb::new(255u8, 0u8, 0u8);\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* color_vertical_strips(&mut img, 8u8, color);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n* @param {Rgb} color\n*/\nmodule.exports.color_vertical_strips = function(photon_image, num_strips, color) {\n    _assertClass(photon_image, PhotonImage);\n    _assertClass(color, Rgb);\n    var ptr0 = color.ptr;\n    color.ptr = 0;\n    wasm.color_vertical_strips(photon_image.ptr, num_strips, ptr0);\n};\n\n/**\n* Turn an image into an oil painting\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `radius` - Radius of each paint particle\n* * `intesnity` - How artsy an Image should be\n* # Example\n*\n* ```no_run\n* // For example, to oil an image of type `PhotonImage`:\n* use photon_rs::effects::oil;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* oil(&mut img, 4i32, 55.0);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} radius\n* @param {number} intensity\n*/\nmodule.exports.oil = function(photon_image, radius, intensity) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.oil(photon_image.ptr, radius, intensity);\n};\n\n/**\n* Turn an image into an frosted glass see through\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```no_run\n* // For example, to turn an image of type `PhotonImage` into frosted glass see through:\n* use photon_rs::effects::frosted_glass;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* frosted_glass(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.frosted_glass = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.frosted_glass(photon_image.ptr);\n};\n\n/**\n* Pixelize an image.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage that contains a view into the image.\n* * `pixel_size` - Targeted pixel size of generated image.\n* # Example\n*\n* ```no_run\n* // For example, to turn an image of type `PhotonImage` into a pixelized image with 50 pixels blocks:\n* use photon_rs::effects::pixelize;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* pixelize(&mut img, 50);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} pixel_size\n*/\nmodule.exports.pixelize = function(photon_image, pixel_size) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.pixelize(photon_image.ptr, pixel_size);\n};\n\n/**\n* Normalizes an image by remapping its range of pixels values. Only RGB\n* channels are processed and each channel is stretched to \\[0, 255\\] range\n* independently. This process is also known as contrast stretching.\n* # Arguments\n* * `photon_image` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```no_run\n* // For example, to turn an image of type `PhotonImage` into a normalized image:\n* use photon_rs::effects::normalize;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* normalize(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.normalize = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.normalize(photon_image.ptr);\n};\n\n/**\n* Applies Floyd-Steinberg dithering to an image.\n* Only RGB channels are processed, alpha remains unchanged.\n* # Arguments\n* * `photon_image` - A PhotonImage that contains a view into the image.\n* * `depth` - bits per channel. Clamped between 1 and 8.\n* # Example\n*\n* ```no_run\n* // For example, to turn an image of type `PhotonImage` into a dithered image:\n* use photon_rs::effects::dither;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let depth = 1;\n* dither(&mut img, depth);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} depth\n*/\nmodule.exports.dither = function(photon_image, depth) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.dither(photon_image.ptr, depth);\n};\n\n/**\n* @param {PhotonImage} photon_image\n* @param {Rgb} color_a\n* @param {Rgb} color_b\n*/\nmodule.exports.duotone = function(photon_image, color_a, color_b) {\n    _assertClass(photon_image, PhotonImage);\n    _assertClass(color_a, Rgb);\n    var ptr0 = color_a.ptr;\n    color_a.ptr = 0;\n    _assertClass(color_b, Rgb);\n    var ptr1 = color_b.ptr;\n    color_b.ptr = 0;\n    wasm.duotone(photon_image.ptr, ptr0, ptr1);\n};\n\n/**\n* Solarization on the Blue channel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::neue;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* neue(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.neue = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.neue(photon_image.ptr);\n};\n\n/**\n* Solarization on the Red and Green channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::lix;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* lix(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.lix = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.lix(photon_image.ptr);\n};\n\n/**\n* Solarization on the Red and Blue channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::ryo;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* ryo(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.ryo = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.ryo(photon_image.ptr);\n};\n\n/**\n* Apply a filter to an image. Over 20 filters are available.\n* The filters are as follows:\n* * **oceanic**: Add an aquamarine-tinted hue to an image.\n* * **islands**: Aquamarine tint.\n* * **marine**: Add a green/blue mixed hue to an image.\n* * **seagreen**: Dark green hue, with tones of blue.\n* * **flagblue**: Royal blue tint\n* * **liquid**: Blue-inspired tint.\n* * **diamante**: Custom filter with a blue/turquoise tint.\n* * **radio**: Fallout-style radio effect.\n* * **twenties**: Slight-blue tinted historical effect.\n* * **rosetint**: Rose-tinted filter.\n* * **mauve**: Purple-infused filter.\n* * **bluechrome**: Blue monochrome effect.\n* * **vintage**: Vintage filter with a red tint.\n* * **perfume**: Increase the blue channel, with moderate increases in the Red and Green channels.\n* * **serenity**: Custom filter with an increase in the Blue channel's values.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `filter_name` - The filter's name. Choose from the selection above, eg: \"oceanic\"\n* # Example\n*\n* ```no_run\n* // For example, to add a filter called \"vintage\" to an image:\n* use photon_rs::filters::filter;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* filter(&mut img, \"vintage\");\n* ```\n* @param {PhotonImage} img\n* @param {string} filter_name\n*/\nmodule.exports.filter = function(img, filter_name) {\n    _assertClass(img, PhotonImage);\n    var ptr0 = passStringToWasm0(filter_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.filter(img.ptr, ptr0, len0);\n};\n\n/**\n* Apply a lofi effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::lofi;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* lofi(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.lofi = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.lofi(img.ptr);\n};\n\n/**\n* Apply a rose tint to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::pastel_pink;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* pastel_pink(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.pastel_pink = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.pastel_pink(img.ptr);\n};\n\n/**\n* Apply a vintage, golden hue to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::golden;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* golden(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.golden = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.golden(img.ptr);\n};\n\n/**\n* Increased contrast filter effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::cali;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* cali(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.cali = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.cali(img.ptr);\n};\n\n/**\n* Greyscale effect with increased contrast.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::dramatic;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* dramatic(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.dramatic = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.dramatic(img.ptr);\n};\n\n/**\n* Monochrome tint effect with increased contrast\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `rgb_color` - RGB color\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::monochrome_tint;\n* use photon_rs::native::open_image;\n* use photon_rs::Rgb;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let rgb_color = Rgb::new(12, 12, 10);\n* monochrome_tint(&mut img, rgb_color);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} rgb_color\n*/\nmodule.exports.monochrome_tint = function(img, rgb_color) {\n    _assertClass(img, PhotonImage);\n    _assertClass(rgb_color, Rgb);\n    var ptr0 = rgb_color.ptr;\n    rgb_color.ptr = 0;\n    wasm.monochrome_tint(img.ptr, ptr0);\n};\n\n/**\n* Duotone effect with blue and purple tones.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::duotone_violette;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* duotone_violette(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.duotone_violette = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.duotone_violette(img.ptr);\n};\n\n/**\n* Duotone effect with purple tones.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::duotone_horizon;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* duotone_horizon(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.duotone_horizon = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.duotone_horizon(img.ptr);\n};\n\n/**\n* A duotone filter with a user-specified color and a gray color\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `rgb_color` - RGB color\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::duotone_tint;\n* use photon_rs::native::open_image;\n* use photon_rs::Rgb;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let rgb_color = Rgb::new(12, 12, 10);\n* duotone_tint(&mut img, rgb_color);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} rgb_color\n*/\nmodule.exports.duotone_tint = function(img, rgb_color) {\n    _assertClass(img, PhotonImage);\n    _assertClass(rgb_color, Rgb);\n    var ptr0 = rgb_color.ptr;\n    rgb_color.ptr = 0;\n    wasm.duotone_tint(img.ptr, ptr0);\n};\n\n/**\n* Duotone effect with a lilac hue\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::duotone_lilac;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* duotone_lilac(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.duotone_lilac = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.duotone_lilac(img.ptr);\n};\n\n/**\n* A duotone ochre tint effect\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::duotone_ochre;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* duotone_ochre(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.duotone_ochre = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.duotone_ochre(img.ptr);\n};\n\n/**\n* Apply a red hue, with increased contrast and brightness.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::firenze;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* firenze(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.firenze = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.firenze(img.ptr);\n};\n\n/**\n* Apply a greyscale effect with increased contrast.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```no_run\n* use photon_rs::filters::obsidian;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* obsidian(&mut img);\n* ```\n* @param {PhotonImage} img\n*/\nmodule.exports.obsidian = function(img) {\n    _assertClass(img, PhotonImage);\n    wasm.obsidian(img.ptr);\n};\n\n/**\n* Applies gamma correction to an image.\n* # Arguments\n* * `photon_image` - A PhotonImage that contains a view into the image.\n* * `red` - Gamma value for red channel.\n* * `green` - Gamma value for green channel.\n* * `blue` - Gamma value for blue channel.\n* # Example\n*\n* ```no_run\n* // For example, to turn an image of type `PhotonImage` into a gamma corrected image:\n* use photon_rs::colour_spaces::gamma_correction;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* gamma_correction(&mut img, 2.2, 2.2, 2.2);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} red\n* @param {number} green\n* @param {number} blue\n*/\nmodule.exports.gamma_correction = function(photon_image, red, green, blue) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.gamma_correction(photon_image.ptr, red, green, blue);\n};\n\n/**\n* Image manipulation effects in the HSLuv colour space\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```no_run\n* // For example to increase the saturation by 10%:\n* use photon_rs::colour_spaces::hsluv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* hsluv(&mut img, \"saturate\", 0.1_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n*/\nmodule.exports.hsluv = function(photon_image, mode, amt) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = passStringToWasm0(mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.hsluv(photon_image.ptr, ptr0, len0, amt);\n};\n\n/**\n* Image manipulation effects in the LCh colour space\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```no_run\n* // For example to increase the saturation by 10%:\n* use photon_rs::colour_spaces::lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* lch(&mut img, \"saturate\", 0.1_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n*/\nmodule.exports.lch = function(photon_image, mode, amt) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = passStringToWasm0(mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.lch(photon_image.ptr, ptr0, len0, amt);\n};\n\n/**\n* Image manipulation effects in the HSL colour space.\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```no_run\n* // For example to increase the saturation by 10%:\n* use photon_rs::colour_spaces::hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* hsl(&mut img, \"saturate\", 0.1_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n*/\nmodule.exports.hsl = function(photon_image, mode, amt) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = passStringToWasm0(mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.hsl(photon_image.ptr, ptr0, len0, amt);\n};\n\n/**\n* Image manipulation in the HSV colour space.\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n*\n* # Example\n* ```no_run\n* // For example to increase the saturation by 10%:\n* use photon_rs::colour_spaces::hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* hsv(&mut img, \"saturate\", 0.1_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n*/\nmodule.exports.hsv = function(photon_image, mode, amt) {\n    _assertClass(photon_image, PhotonImage);\n    var ptr0 = passStringToWasm0(mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.hsv(photon_image.ptr, ptr0, len0, amt);\n};\n\n/**\n* Shift hue by a specified number of degrees in the HSL colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - A float value from 0 to 1 which is the amount to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```no_run\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon_rs::colour_spaces::hue_rotate_hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* hue_rotate_hsl(&mut img, 120_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n*/\nmodule.exports.hue_rotate_hsl = function(img, degrees) {\n    _assertClass(img, PhotonImage);\n    wasm.hue_rotate_hsl(img.ptr, degrees);\n};\n\n/**\n* Shift hue by a specified number of degrees in the HSV colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - A float value from 0 to 1 which is the amount to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```no_run\n* // For example to hue rotate/shift the hue by 120 degrees in the HSV colour space:\n* use photon_rs::colour_spaces::hue_rotate_hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* hue_rotate_hsv(&mut img, 120_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n*/\nmodule.exports.hue_rotate_hsv = function(img, degrees) {\n    _assertClass(img, PhotonImage);\n    wasm.hue_rotate_hsv(img.ptr, degrees);\n};\n\n/**\n* Shift hue by a specified number of degrees in the LCh colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - A float value from 0 to 1 which is the amount to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```no_run\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon_rs::colour_spaces::hue_rotate_lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* hue_rotate_lch(&mut img, 120_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n*/\nmodule.exports.hue_rotate_lch = function(img, degrees) {\n    _assertClass(img, PhotonImage);\n    wasm.hue_rotate_lch(img.ptr, degrees);\n};\n\n/**\n* Shift hue by a specified number of degrees in the HSLuv colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - A float value from 0 to 1 which is the amount to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```no_run\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon_rs::colour_spaces::hue_rotate_hsluv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* hue_rotate_hsluv(&mut img, 120_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n*/\nmodule.exports.hue_rotate_hsluv = function(img, degrees) {\n    _assertClass(img, PhotonImage);\n    wasm.hue_rotate_hsluv(img.ptr, degrees);\n};\n\n/**\n* Increase the image's saturation by converting each pixel's colour to the HSL colour space\n* and increasing the colour's saturation.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to increase saturation by 10% in the HSL colour space:\n* use photon_rs::colour_spaces::saturate_hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* saturate_hsl(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.saturate_hsl = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.saturate_hsl(img.ptr, level);\n};\n\n/**\n* Increase the image's saturation in the LCh colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to increase saturation by 40% in the Lch colour space:\n* use photon_rs::colour_spaces::saturate_lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* saturate_lch(&mut img, 0.4_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.saturate_lch = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.saturate_lch(img.ptr, level);\n};\n\n/**\n* Increase the image's saturation in the HSLuv colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to increase saturation by 40% in the HSLuv colour space:\n* use photon_rs::colour_spaces::saturate_hsluv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* saturate_hsluv(&mut img, 0.4_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.saturate_hsluv = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.saturate_hsluv(img.ptr, level);\n};\n\n/**\n* Increase the image's saturation in the HSV colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level by which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to increase saturation by 30% in the HSV colour space:\n* use photon_rs::colour_spaces::saturate_hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* saturate_hsv(&mut img, 0.3_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.saturate_hsv = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.saturate_hsv(img.ptr, level);\n};\n\n/**\n* Lighten an image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to lighten an image by 10% in the LCh colour space:\n* use photon_rs::colour_spaces::lighten_lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* lighten_lch(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.lighten_lch = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.lighten_lch(img.ptr, level);\n};\n\n/**\n* Lighten an image by a specified amount in the HSLuv colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to lighten an image by 10% in the HSLuv colour space:\n* use photon_rs::colour_spaces::lighten_hsluv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* lighten_hsluv(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.lighten_hsluv = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.lighten_hsluv(img.ptr, level);\n};\n\n/**\n* Lighten an image by a specified amount in the HSL colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to lighten an image by 10% in the HSL colour space:\n* use photon_rs::colour_spaces::lighten_hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* lighten_hsl(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.lighten_hsl = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.lighten_hsl(img.ptr, level);\n};\n\n/**\n* Lighten an image by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to lighten an image by 10% in the HSV colour space:\n* use photon_rs::colour_spaces::lighten_hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* lighten_hsv(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.lighten_hsv = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.lighten_hsv(img.ptr, level);\n};\n\n/**\n* Darken the image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to darken an image by 10% in the LCh colour space:\n* use photon_rs::colour_spaces::darken_lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* darken_lch(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.darken_lch = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.darken_lch(img.ptr, level);\n};\n\n/**\n* Darken the image by a specified amount in the HSLuv colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to darken an image by 10% in the HSLuv colour space:\n* use photon_rs::colour_spaces::darken_hsluv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* darken_hsluv(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.darken_hsluv = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.darken_hsluv(img.ptr, level);\n};\n\n/**\n* Darken the image by a specified amount in the HSL colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to darken an image by 10% in the HSL colour space:\n* use photon_rs::colour_spaces::darken_hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* darken_hsl(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.darken_hsl = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.darken_hsl(img.ptr, level);\n};\n\n/**\n* Darken the image's colours by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to darken an image by 10% in the HSV colour space:\n* use photon_rs::colour_spaces::darken_hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* darken_hsv(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.darken_hsv = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.darken_hsv(img.ptr, level);\n};\n\n/**\n* Desaturate the image by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to desaturate an image by 10% in the HSV colour space:\n* use photon_rs::colour_spaces::desaturate_hsv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* desaturate_hsv(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.desaturate_hsv = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.desaturate_hsv(img.ptr, level);\n};\n\n/**\n* Desaturate the image by a specified amount in the HSL colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to desaturate an image by 10% in the LCh colour space:\n* use photon_rs::colour_spaces::desaturate_hsl;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* desaturate_hsl(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.desaturate_hsl = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.desaturate_hsl(img.ptr, level);\n};\n\n/**\n* Desaturate the image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to desaturate an image by 10% in the LCh colour space:\n* use photon_rs::colour_spaces::desaturate_lch;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* desaturate_lch(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.desaturate_lch = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.desaturate_lch(img.ptr, level);\n};\n\n/**\n* Desaturate the image by a specified amount in the HSLuv colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```no_run\n* // For example to desaturate an image by 10% in the HSLuv colour space:\n* use photon_rs::colour_spaces::desaturate_hsluv;\n* use photon_rs::native::open_image;\n*\n* // Open the image. A PhotonImage is returned.\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* desaturate_hsluv(&mut img, 0.1_f32);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n*/\nmodule.exports.desaturate_hsluv = function(img, level) {\n    _assertClass(img, PhotonImage);\n    wasm.desaturate_hsluv(img.ptr, level);\n};\n\n/**\n* Mix image with a single color, supporting passing `opacity`.\n* The algorithm comes from Jimp. See `function mix` and `function colorFn` at following link:\n* https://github.com/oliver-moran/jimp/blob/29679faa597228ff2f20d34c5758e4d2257065a3/packages/plugin-color/src/index.js\n* Specifically, result_value = (mix_color_value - origin_value) * opacity + origin_value =\n* mix_color_value * opacity + (1 - opacity) * origin_value for each\n* of RGB channel.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage that contains a view into the image.\n* * `mix_color` - the color to be mixed in, as an RGB value.\n* * `opacity` - the opacity of color when mixed to image. Float value from 0 to 1.\n* # Example\n*\n* ```no_run\n* // For example, to mix an image with rgb (50, 255, 254) and opacity 0.4:\n* use photon_rs::Rgb;\n* use photon_rs::colour_spaces::mix_with_colour;\n* use photon_rs::native::open_image;\n*\n* let mix_colour = Rgb::new(50_u8, 255_u8, 254_u8);\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* mix_with_colour(&mut img, mix_colour, 0.4_f32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} mix_colour\n* @param {number} opacity\n*/\nmodule.exports.mix_with_colour = function(photon_image, mix_colour, opacity) {\n    _assertClass(photon_image, PhotonImage);\n    _assertClass(mix_colour, Rgb);\n    var ptr0 = mix_colour.ptr;\n    mix_colour.ptr = 0;\n    wasm.mix_with_colour(photon_image.ptr, ptr0, opacity);\n};\n\n/**\n* Add a watermark to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n* * `watermark` - The watermark to be placed onto the `img` image.\n* * `x` - The x coordinate where the watermark's top corner should be positioned.\n* * `y` - The y coordinate where the watermark's top corner should be positioned.\n* # Example\n*\n* ```no_run\n* // For example, to add a watermark to an image at x: 30, y: 40:\n* use photon_rs::multiple::watermark;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let water_mark = open_image(\"watermark.jpg\").expect(\"File should open\");\n* watermark(&mut img, &water_mark, 30_u32, 40_u32);\n* ```\n* @param {PhotonImage} img\n* @param {PhotonImage} watermark\n* @param {number} x\n* @param {number} y\n*/\nmodule.exports.watermark = function(img, watermark, x, y) {\n    _assertClass(img, PhotonImage);\n    _assertClass(watermark, PhotonImage);\n    wasm.watermark(img.ptr, watermark.ptr, x, y);\n};\n\n/**\n* Blend two images together.\n*\n* The `blend_mode` (3rd param) determines which blending mode to use; change this for varying effects.\n* The blend modes available include: `overlay`, `over`, `atop`, `xor`, `multiply`, `burn`, `soft_light`, `hard_light`,\n* `difference`, `lighten`, `darken`, `dodge`, `plus`, `exclusion` (more to come)\n* NOTE: The first image must be smaller than the second image passed as params.\n* If the first image were larger than the second, then there would be overflowing pixels which would have no corresponding pixels\n* in the second image.\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n* * `img2` - The 2nd DynamicImage to be blended with the first.\n* * `blend_mode` - The blending mode to use. See above for complete list of blend modes available.\n* # Example\n*\n* ```no_run\n* // For example, to blend two images with the `multiply` blend mode:\n* use photon_rs::multiple::blend;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* let img2 = open_image(\"img2.jpg\").expect(\"File should open\");\n* blend(&mut img, &img2, \"multiply\");\n* ```\n* @param {PhotonImage} photon_image\n* @param {PhotonImage} photon_image2\n* @param {string} blend_mode\n*/\nmodule.exports.blend = function(photon_image, photon_image2, blend_mode) {\n    _assertClass(photon_image, PhotonImage);\n    _assertClass(photon_image2, PhotonImage);\n    var ptr0 = passStringToWasm0(blend_mode, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.blend(photon_image.ptr, photon_image2.ptr, ptr0, len0);\n};\n\n/**\n* @param {number} width\n* @param {number} height\n* @returns {PhotonImage}\n*/\nmodule.exports.create_gradient = function(width, height) {\n    var ret = wasm.create_gradient(width, height);\n    return PhotonImage.__wrap(ret);\n};\n\n/**\n* Apply a gradient to an image.\n* @param {PhotonImage} image\n*/\nmodule.exports.apply_gradient = function(image) {\n    _assertClass(image, PhotonImage);\n    wasm.apply_gradient(image.ptr);\n};\n\n/**\n* Noise reduction.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to noise reduct an image:\n* use photon_rs::conv::noise_reduction;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* noise_reduction(&mut img);\n* ```\n* Adds a constant to a select R, G, or B channel's value.\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.noise_reduction = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.noise_reduction(photon_image.ptr);\n};\n\n/**\n* Sharpen an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to sharpen an image:\n* use photon_rs::conv::sharpen;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* sharpen(&mut img);\n* ```\n* Adds a constant to a select R, G, or B channel's value.\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.sharpen = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.sharpen(photon_image.ptr);\n};\n\n/**\n* Apply edge detection to an image, to create a dark version with its edges highlighted.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon_rs::conv::edge_detection;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* edge_detection(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.edge_detection = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.edge_detection(photon_image.ptr);\n};\n\n/**\n* Apply an identity kernel convolution to an image.\n*\n* # Arguments\n* * `img` -A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply an identity kernel convolution:\n* use photon_rs::conv::identity;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* identity(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.identity = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.identity(photon_image.ptr);\n};\n\n/**\n* Apply a box blur effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a box blur effect:\n* use photon_rs::conv::box_blur;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* box_blur(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.box_blur = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.box_blur(photon_image.ptr);\n};\n\n/**\n* Gaussian blur in linear time.\n*\n* Reference: http://blog.ivank.net/fastest-gaussian-blur.html\n*\n* # Arguments\n* * `photon_image` - A PhotonImage\n* * `radius` - blur radius\n* # Example\n*\n* ```no_run\n* use photon_rs::conv::gaussian_blur;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* gaussian_blur(&mut img, 3_i32);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} radius\n*/\nmodule.exports.gaussian_blur = function(photon_image, radius) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.gaussian_blur(photon_image.ptr, radius);\n};\n\n/**\n* Detect horizontal lines in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to display the horizontal lines in an image:\n* use photon_rs::conv::detect_horizontal_lines;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* detect_horizontal_lines(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.detect_horizontal_lines = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.detect_horizontal_lines(photon_image.ptr);\n};\n\n/**\n* Detect vertical lines in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to display the vertical lines in an image:\n* use photon_rs::conv::detect_vertical_lines;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* detect_vertical_lines(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.detect_vertical_lines = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.detect_vertical_lines(photon_image.ptr);\n};\n\n/**\n* Detect lines at a forty five degree angle in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to display the lines at a forty five degree angle in an image:\n* use photon_rs::conv::detect_45_deg_lines;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* detect_45_deg_lines(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.detect_45_deg_lines = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.detect_45_deg_lines(photon_image.ptr);\n};\n\n/**\n* Detect lines at a 135 degree angle in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to display the lines at a 135 degree angle in an image:\n* use photon_rs::conv::detect_135_deg_lines;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* detect_135_deg_lines(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.detect_135_deg_lines = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.detect_135_deg_lines(photon_image.ptr);\n};\n\n/**\n* Apply a standard laplace convolution.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a laplace effect:\n* use photon_rs::conv::laplace;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* laplace(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.laplace = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.laplace(photon_image.ptr);\n};\n\n/**\n* Preset edge effect.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply this effect:\n* use photon_rs::conv::edge_one;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* edge_one(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.edge_one = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.edge_one(photon_image.ptr);\n};\n\n/**\n* Apply an emboss effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply an emboss effect:\n* use photon_rs::conv::emboss;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* emboss(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.emboss = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.emboss(photon_image.ptr);\n};\n\n/**\n* Apply a horizontal Sobel filter to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a horizontal Sobel filter:\n* use photon_rs::conv::sobel_horizontal;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* sobel_horizontal(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.sobel_horizontal = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.sobel_horizontal(photon_image.ptr);\n};\n\n/**\n* Apply a horizontal Prewitt convolution to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a horizontal Prewitt convolution effect:\n* use photon_rs::conv::prewitt_horizontal;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* prewitt_horizontal(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.prewitt_horizontal = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.prewitt_horizontal(photon_image.ptr);\n};\n\n/**\n* Apply a vertical Sobel filter to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* # Example\n*\n* ```no_run\n* // For example, to apply a vertical Sobel filter:\n* use photon_rs::conv::sobel_vertical;\n* use photon_rs::native::open_image;\n*\n* let mut img = open_image(\"img.jpg\").expect(\"File should open\");\n* sobel_vertical(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n*/\nmodule.exports.sobel_vertical = function(photon_image) {\n    _assertClass(photon_image, PhotonImage);\n    wasm.sobel_vertical(photon_image.ptr);\n};\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nlet cachegetUint8ClampedMemory0 = null;\nfunction getUint8ClampedMemory0() {\n    if (cachegetUint8ClampedMemory0 === null || cachegetUint8ClampedMemory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8ClampedMemory0 = new Uint8ClampedArray(wasm.memory.buffer);\n    }\n    return cachegetUint8ClampedMemory0;\n}\n\nfunction getClampedArrayU8FromWasm0(ptr, len) {\n    return getUint8ClampedMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*/\nmodule.exports.SamplingFilter = Object.freeze({ Nearest:1,\"1\":\"Nearest\",Triangle:2,\"2\":\"Triangle\",CatmullRom:3,\"3\":\"CatmullRom\",Gaussian:4,\"4\":\"Gaussian\",Lanczos3:5,\"5\":\"Lanczos3\", });\n/**\n* Provides the image's height, width, and contains the image's raw pixels.\n* For use when communicating between JS and WASM, and also natively.\n*/\nclass PhotonImage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PhotonImage.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_photonimage_free(ptr);\n    }\n    /**\n    * Create a new PhotonImage from a Vec of u8s, which represent raw pixels.\n    * @param {Uint8Array} raw_pixels\n    * @param {number} width\n    * @param {number} height\n    */\n    constructor(raw_pixels, width, height) {\n        var ptr0 = passArray8ToWasm0(raw_pixels, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.photonimage_new(ptr0, len0, width, height);\n        return PhotonImage.__wrap(ret);\n    }\n    /**\n    * Create a new PhotonImage from a base64 string.\n    * @param {string} base64\n    * @returns {PhotonImage}\n    */\n    static new_from_base64(base64) {\n        var ptr0 = passStringToWasm0(base64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.base64_to_image(ptr0, len0);\n        return PhotonImage.__wrap(ret);\n    }\n    /**\n    * Create a new PhotonImage from a byteslice.\n    * @param {Uint8Array} vec\n    * @returns {PhotonImage}\n    */\n    static new_from_byteslice(vec) {\n        var ptr0 = passArray8ToWasm0(vec, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.photonimage_new_from_byteslice(ptr0, len0);\n        return PhotonImage.__wrap(ret);\n    }\n    /**\n    * Get the width of the PhotonImage.\n    * @returns {number}\n    */\n    get_width() {\n        var ret = wasm.photonimage_get_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Get the PhotonImage's pixels as a Vec of u8s.\n    * @returns {Uint8Array}\n    */\n    get_raw_pixels() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.photonimage_get_raw_pixels(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get the height of the PhotonImage.\n    * @returns {number}\n    */\n    get_height() {\n        var ret = wasm.photonimage_get_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Convert the PhotonImage to base64.\n    * @returns {string}\n    */\n    get_base64() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.photonimage_get_base64(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Convert the PhotonImage to raw bytes. Returns JPEG.\n    * @returns {Uint8Array}\n    */\n    get_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.photonimage_get_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Convert the PhotonImage to raw bytes. Returns a JPEG.\n    * @param {number} quality\n    * @returns {Uint8Array}\n    */\n    get_bytes_jpeg(quality) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.photonimage_get_bytes_jpeg(retptr, this.ptr, quality);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Convert the PhotonImage's raw pixels to JS-compatible ImageData.\n    * @returns {ImageData}\n    */\n    get_image_data() {\n        var ret = wasm.photonimage_get_image_data(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Convert ImageData to raw pixels, and update the PhotonImage's raw pixels to this.\n    * @param {ImageData} img_data\n    */\n    set_imgdata(img_data) {\n        wasm.photonimage_set_imgdata(this.ptr, addHeapObject(img_data));\n    }\n}\nmodule.exports.PhotonImage = PhotonImage;\n/**\n* RGB color type.\n*/\nclass Rgb {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Rgb.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rgb_free(ptr);\n    }\n    /**\n    * Create a new RGB struct.\n    * @param {number} r\n    * @param {number} g\n    * @param {number} b\n    */\n    constructor(r, g, b) {\n        var ret = wasm.rgb_new(r, g, b);\n        return Rgb.__wrap(ret);\n    }\n    /**\n    * Set the Red value.\n    * @param {number} r\n    */\n    set_red(r) {\n        wasm.rgb_set_red(this.ptr, r);\n    }\n    /**\n    * Get the Green value.\n    * @param {number} g\n    */\n    set_green(g) {\n        wasm.rgb_set_green(this.ptr, g);\n    }\n    /**\n    * Set the Blue value.\n    * @param {number} b\n    */\n    set_blue(b) {\n        wasm.rgb_set_blue(this.ptr, b);\n    }\n    /**\n    * Get the Red value.\n    * @returns {number}\n    */\n    get_red() {\n        var ret = wasm.rgb_get_red(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the Green value.\n    * @returns {number}\n    */\n    get_green() {\n        var ret = wasm.rgb_get_green(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the Blue value.\n    * @returns {number}\n    */\n    get_blue() {\n        var ret = wasm.rgb_get_blue(this.ptr);\n        return ret;\n    }\n}\nmodule.exports.Rgb = Rgb;\n/**\n* RGBA color type.\n*/\nclass Rgba {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Rgba.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rgba_free(ptr);\n    }\n    /**\n    * Create a new RGBA struct.\n    * @param {number} r\n    * @param {number} g\n    * @param {number} b\n    * @param {number} a\n    */\n    constructor(r, g, b, a) {\n        var ret = wasm.rgba_new(r, g, b, a);\n        return Rgba.__wrap(ret);\n    }\n    /**\n    * Set the Red value.\n    * @param {number} r\n    */\n    set_red(r) {\n        wasm.rgb_set_red(this.ptr, r);\n    }\n    /**\n    * Get the Green value.\n    * @param {number} g\n    */\n    set_green(g) {\n        wasm.rgb_set_green(this.ptr, g);\n    }\n    /**\n    * Set the Blue value.\n    * @param {number} b\n    */\n    set_blue(b) {\n        wasm.rgb_set_blue(this.ptr, b);\n    }\n    /**\n    * Set the alpha value.\n    * @param {number} a\n    */\n    set_alpha(a) {\n        wasm.rgba_set_alpha(this.ptr, a);\n    }\n    /**\n    * Get the Red value.\n    * @returns {number}\n    */\n    get_red() {\n        var ret = wasm.rgb_get_red(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the Green value.\n    * @returns {number}\n    */\n    get_green() {\n        var ret = wasm.rgb_get_green(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the Blue value.\n    * @returns {number}\n    */\n    get_blue() {\n        var ret = wasm.rgb_get_blue(this.ptr);\n        return ret;\n    }\n    /**\n    * Get the alpha value for this color.\n    * @returns {number}\n    */\n    get_alpha() {\n        var ret = wasm.rgba_get_alpha(this.ptr);\n        return ret;\n    }\n}\nmodule.exports.Rgba = Rgba;\n\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nmodule.exports.__wbg_new_693216e109162396 = function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_stack_0ddaca5d1abfb52f = function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_error_09919627ac0992f5 = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nmodule.exports.__wbg_instanceof_Window_c4b70662a0d2c5ec = function(arg0) {\n    var ret = getObject(arg0) instanceof Window;\n    return ret;\n};\n\nmodule.exports.__wbg_document_1c64944725c0d81d = function(arg0) {\n    var ret = getObject(arg0).document;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nmodule.exports.__wbg_body_78ae4fd43b446013 = function(arg0) {\n    var ret = getObject(arg0).body;\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n};\n\nmodule.exports.__wbg_createElement_86c152812a141a62 = function() { return handleError(function (arg0, arg1, arg2) {\n    var ret = getObject(arg0).createElement(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_width_16bd64d09cbf5661 = function(arg0) {\n    var ret = getObject(arg0).width;\n    return ret;\n};\n\nmodule.exports.__wbg_height_368bb86c37d51bc9 = function(arg0) {\n    var ret = getObject(arg0).height;\n    return ret;\n};\n\nmodule.exports.__wbg_data_1ae7496c58caf755 = function(arg0, arg1) {\n    var ret = getObject(arg1).data;\n    var ptr0 = passArray8ToWasm0(ret, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbg_newwithu8clampedarrayandsh_1b8c6e1bede43657 = function() { return handleError(function (arg0, arg1, arg2, arg3) {\n    var ret = new ImageData(getClampedArrayU8FromWasm0(arg0, arg1), arg2 >>> 0, arg3 >>> 0);\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_instanceof_CanvasRenderingContext2d_3abbe7ec7af32cae = function(arg0) {\n    var ret = getObject(arg0) instanceof CanvasRenderingContext2D;\n    return ret;\n};\n\nmodule.exports.__wbg_drawImage_9e2d13329d92a0a3 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n    getObject(arg0).drawImage(getObject(arg1), arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);\n}, arguments) };\n\nmodule.exports.__wbg_getImageData_9ffc3df78ca3dbc9 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    var ret = getObject(arg0).getImageData(arg1, arg2, arg3, arg4);\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_putImageData_b9544b271e569392 = function() { return handleError(function (arg0, arg1, arg2, arg3) {\n    getObject(arg0).putImageData(getObject(arg1), arg2, arg3);\n}, arguments) };\n\nmodule.exports.__wbg_settextContent_799ebbf96e16265d = function(arg0, arg1, arg2) {\n    getObject(arg0).textContent = arg1 === 0 ? undefined : getStringFromWasm0(arg1, arg2);\n};\n\nmodule.exports.__wbg_appendChild_d318db34c4559916 = function() { return handleError(function (arg0, arg1) {\n    var ret = getObject(arg0).appendChild(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_instanceof_HtmlCanvasElement_25d964a0dde6717e = function(arg0) {\n    var ret = getObject(arg0) instanceof HTMLCanvasElement;\n    return ret;\n};\n\nmodule.exports.__wbg_width_555f63ab09ba7d3f = function(arg0) {\n    var ret = getObject(arg0).width;\n    return ret;\n};\n\nmodule.exports.__wbg_setwidth_c1a7061891b71f25 = function(arg0, arg1) {\n    getObject(arg0).width = arg1 >>> 0;\n};\n\nmodule.exports.__wbg_height_7153faec70fbaf7b = function(arg0) {\n    var ret = getObject(arg0).height;\n    return ret;\n};\n\nmodule.exports.__wbg_setheight_88894b05710ff752 = function(arg0, arg1) {\n    getObject(arg0).height = arg1 >>> 0;\n};\n\nmodule.exports.__wbg_getContext_f701d0231ae22393 = function() { return handleError(function (arg0, arg1, arg2) {\n    var ret = getObject(arg0).getContext(getStringFromWasm0(arg1, arg2));\n    return isLikeNone(ret) ? 0 : addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_newnoargs_be86524d73f67598 = function(arg0, arg1) {\n    var ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_call_888d259a5fefc347 = function() { return handleError(function (arg0, arg1) {\n    var ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbindgen_object_clone_ref = function(arg0) {\n    var ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_self_c6fbdfc2918d5e58 = function() { return handleError(function () {\n    var ret = self.self;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_window_baec038b5ab35c54 = function() { return handleError(function () {\n    var ret = window.window;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_globalThis_3f735a5746d41fbd = function() { return handleError(function () {\n    var ret = globalThis.globalThis;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbg_global_1bc0b39582740e95 = function() { return handleError(function () {\n    var ret = global.global;\n    return addHeapObject(ret);\n}, arguments) };\n\nmodule.exports.__wbindgen_is_undefined = function(arg0) {\n    var ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nmodule.exports.__wbindgen_debug_string = function(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nmodule.exports.__wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\nconst path = require('path').join(__dirname, 'photon_rs_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\n"],"names":["r","Array","Uint8Array","Int32Array","Error","Object","console","Window","arguments","ImageData","Uint8ClampedArray","CanvasRenderingContext2D","HTMLCanvasElement","Function","self","window","globalThis","toString","JSON","WebAssembly"],"mappings":"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"}